%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: WL_logo_color_w-o_address.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Sys Admin%%CreationDate: 10/20/09%%BoundingBox: 0 0 441 141%%HiResBoundingBox: 0 0 440.8858 140.5577%%CropBox: 0 0 440.8858 140.5577%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: (PANTONE 123 CVC)%%+ (PANTONE 2935 CVC)%%CMYKCustomColor: 0 0.3000 0.9400 0 (PANTONE 123 CVC)%%+ 1 0.4700 0 0 (PANTONE 2935 CVC)%%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 44 8%%BeginData: 9888 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD18FFA87DFD7FFF52FD7FFF52FD66FF7D527DFD0CFFA87DFD08FF%7D7DFD07FF7D7DFD18FF53A8FD09FF5227A8FD1CFF7DFD19FF272F532752%A8FD0AFF527DFD07FFA8A8FD06FF7D52FD18FF52A852A8FD07FFA852A827%7D7DFD19FF7CC851FD18FF270E070E2827A8FD09FFA8277DFD0DFFA852A8%FD16FF7D527DFFFF27A8FD06FF52A8FF7D7DA8FD18FF7DCFC9A0A8FD0FFF%A87D527D7DFFFFFF270D0E0D0EF852FFFFA87DA8FD05FFA827A8FD0CFF7D%FD18FF7DA87DFFFFFF27FD06FF52A8FF7D7DFD1AFF52CF7DFD0DFF7D5227%52282F285252FFFF270E070D0727F8FF7D282827277DFD04FFA87DFD26FF%527DFFFFFFA827FD05FF27FD1FFFA8FD0AFFA85352002E280D070E070D07%2E52FF520D0E0D0E2727847D2F0E0D0E277DFFFFFFA8A8FD06FFA884FD0D%FFA87D7DFD14FF7D7DFD04FF27FD1FFFA8527C277DA8FD04FF7D272F0D0E%0D0E0D0E0D0E0D0E0D27A8272F0D0E0728F8A8272F0D0E072FF8A8FF5228%28F87DA87D272727522727277DA8FD06FFA8527DA8FD15FFA8277DA8A8FF%F87DA8FD1CFF27277CC8A02052FFFFFF7D270E0D0E070E0D0E070E0D0E07%0E287D7D070E0D0E27277D520D0E0D0E072753FF270E0D0E282752A7C8CE%C8C9C8A0512752FD04FFA87DFD19FF527DA87D527EA87D7DFD1BFFF85221%27275253FFFFFFF8280D0E0D0E0D0E0D0E0D0E0D0E0D2F52522F070E072E%F87DF80D070E070DF8527D28070E072776C9C9C9C8C9C8C9A6C8A05127A8%7DA8A8FD19FFA87D527DFF7D5253FF52FD10FFA8A8FD09FF277DFF7DFF52%7DFFFF7D27270D070E070D070E070D070E070D07527D280E0D0E28275928%0D0E0D0E0D272EA8280E0D277CCFC9CFC9CFC9CEC9CEC8C8C87627522752%272752FFFFFFFD04A8FD0FFF7DA87D7DFF84A8A8FF27FD04FFA8A8A884A8%A8FD04FF522752277DFD08FFF8A8FFFFFF7D7DFFFFA8F82E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E2E7D2E070E0D2EF852270E070E0D0EF8277D2E07524B%C9C9CFC9CFC9CEC9C9C8C9C8C8C151270E070E0D2F27FFA827282E27527D%272727F827F82752FD04FFA8277DFFFFFF7D28522E27522727282728272E%272727A8FF27070E070E27FD08FF277DFFFFFF52A8FFFF7D27270E070E0D%0E072F2728070E0D0E0752A8270E0D0E2F27F8520D0E0D0E0D28F87D2E0E%21C9C9CFC9CFCFCFC9CFC9C9C8C9C8C89F272F0E0D0E0D2E7DA8270E0D0E%28270D0E0D0E0D0E0D2F277EFFFF272F2F7D7E7E2F0E0D0E0D270D0E0D0E%0D0E0D0E0D2F277DF80E0D0E0D52FD08FF28A8FFFFFF7D7DFFFFA8F82E0D%0E0D0E2F272727F82F0D0E0D0E27A828070D072FF827280E070D070E2727%522F2827C9CFC9CFCACFC9CFC9C9C8C9A6C8C1C8272E070D070E28277D28%070D072EF80D070E070D070E070D277D7D2E070E070D070E070D070E270D%070E070D070E070D072FF827070E070D27FD08FF527DFF7DA852A8FFFF7D%27270E070D072E53FF2727070D070E0752FF270E0D0E2F27F8530D0E0D0E%0D2FF8272F5252CFC9CFCFFFCFCFC9CFC9CEC8CEC8C8C77C270E0D0E0D0D%F8A8270E0D0E2E270D0E0D0E0D0E0D0E0D0E277D280E0D0E0D0E0D0E0D0E%0D270D0E0D0E0D0E0D0E0D0E0D52F80E0D0E0D52FD08FF2EA87DA6757D52%FFFFA8F8520D0E0D0E2EA8FF52F82F0D0E0D0E27FF270D0E070EF827060E%0D0E070E2827F80E277DC9CFC9CFCACFC9CFC9CEC8C9FD04C851270D0E07%0E0D2752280D0E072EF80E070E0D0E070E0D0E072FF82E070E0D0E070E0D%0E072FF80E070E0D0E070E0D0E070E0727070E0D0E27FD08FF527DA87D76%527DFFFF7D27270E0D0E072E7DA827270D0E070E0752FF270E0D0E0D27F8%2F0D0E0D0E0D2FF8270D52A0CEC9CFCACF4B52C9C94B26A0C8C8C8C776F8%0E2F0E0D0E2852270E0D0E28270D0E0D0E2728280E0D0E0D52280E0D5227%28272E272800270D0E0D0E2827F8520D0E0D0EF80E0D0E0D52FD08FF27A8%FFFFFF7D28FFFFA8F8280D0E0D0E282E2728280E0D0E0D2F53FF52070E07%0DF827070D072F070D0627270D27A1C9C9C9CFC951F8A14B7CF8A0C8C89F%C85127072E070D072FF828070E072EF80E070D06FD04270E070D282E070D%2827F827F827277DF80E070D06272727F80E070D0727070D070E27FD07FF%7D27FD04FFA827A8FF7D27270D070E070D070E070D070E070D2784FF272F%0D0E0D2EF80E0D0E2F0E0D30F82E0D527CCEC9CEC9A77C7C2651C827FD04%C8C77C270E270E0D0E0D27270E0D0E28270D0E0D2F2EFFA8520D0E0D2F2E%0E0D2FF85252A8FFFF84270D0E0D2F2EFF7D270D0E0D0EF80E0D0E0D52FD%07FF52527C52A8FFFF5952FFA8F82E0D0E0D0E0D0E0D0E0D0E0D0E0D52FF%FF7D060E0D0E27280D0E072E0D0E0727270E287CC8C9C8C97C76A62751C8%26C8C8C8C1C851270728280E070E2728070E0D2EF80E0D0E0652FFFFF80E%0D0E062E0D0E072F282E277DFFA8F80E0D0E06527D52270E0D0E07270D0E%070E27FD06FFA82752A7C927FFFFFF27A87D27270E070E0D0E070E0D0E07%0E0D2E27FFFF532F0D0E0D28270E0D0E270E0D0E27530D2F27C9C8C9C8A0%51C9A0C9A075FD04C8C151280E27520D0E0D2F270E0D0E28270D0E0D2F27%FFFF270D0E0D2F280E0D0E0D0E0D0EF8FFA8270D0E0D0E28532E0E0D0E0D%2FF80E0D0E0D52FD06FF277E7CCFCA767DFFFFA827A8F82E0D0E0D0E0D0E%0D0E0D0E0D0E0D287DFF7D280D070E2728070E0727070E0728280E0727A0%C8C8C8A6A6C8C8A6757BC89FC8C19FF82F0728000E070D0728070D072EF8%0D070E0752FFFFF80D070E282E070E070D070E0727FFA8F80D070E070D07%0E070D070E2727070E070D27FD05FF7D272727515226C95127F827522727%0E070D070E070D070E070D070E2852FFA82F0D0E0D2F280E0D2FF80E0D0E%282F0D0E277CC8C8C8C9C8C9C8C851C8C7C8C7C727520D0E27270D0E0D0E%280E0D0E2E270D0E0D2F27FFFF270D0E0D2F280E0D0E2F27F8277DFFA827%0D0E0D0E0D0E0D0E0D302752F80E0D0E0D52FD05FF27F876A1CFC97CCAA7%7CC85127F8520D0E0D0E0D2F2E2F0D0E0D0E0D0E27FFA8270E070E282E07%0E0727070E0D2E060E0D2FF8A0C8C8C2C8C8C8C175C1C7C1C75127070E0D%28F82F0D0E072F0D0E072EF80E070E0752FFA8270E070E282E070E0D2E52%7D7DFFFFA8F80E070E0D0E070E0D0E072F2727070E0D0E27FD04FF7DF852%A7CFCACFC9A77C7C51FD04270E0D0E072EF827F8280D0E070E0D27FFA82E%0D0E0D2F2F0E0D2FF82F0D0E2E2F0D0E0D2720A6C8C8C7C8C8A67BC8C7C7%5127280E0D0E2727280E0D0E0D0E0D0E28270D0E0D2F2752272F0D0E0D28%280E0D0E2F27F827F82727270D0E0D0E0D2F0D0E0D0E0D52F80E0D0E0D52%FD04FF277D2727F827F8272752277CA0C8F8280D0E0D0E287E7D27F82F0D%0E0D0E27FFFF000E070D062F070D2827070D072F070D072FF827F87CC1C8%9FC89FC79FC727277D2E070D07282727070E070D070E072EF80E070D072F%070D070E070DF82E070D070E070D070E072EF80E070D0727F827060E070D%0627070D070E272727522727C9CFC9CFC9CFC9C9A6C9C8C89F52270D070E%072E7DFF2727280E070D0728FFFF270D0E0D2F0D0E0D53F82F0D0E2F0E0D%0E2F2752A7277CC1C8C7C7C1C7277DFFA82E0E0D0E2752272F0D0E0D0E0D%0E28270D0E0D0E0D0E0D0E0D0E284C2E0E0D0E0D0E0D0E0D0E2F270D0E0D%2F27A827520D0E0D0EF80E0D0E0D0E0D0E0D287CFFC9CFC9CFC9CEC9CEFD%04C8A0270D0E0D0E28A8FF7DF8530D0E0D0E27FFFF270E0D0E070E0D0E27%27280E070E0D0E072EF87EFFFF279FC1C7C1C79F7DFFFF7D2E0D0E072827%7D280E0D0E070E0D2EF80E0D0E070E0D0E070E0727522E0D0E070E0D0E07%0E0D2FF80E0D0E0652FF7D270E0D0E07270D0E070E0D0E070DF8C9C9CEC9%C9C9CEC9C9FD04C8C1C7F80D070E0D2E7DFF5227280E0D0E0728FFFF520D%0E0D0E0D0E0D28F8520D0E0D0E0D0E2827A8FFFFCF51C7C1C7515227FFFF%A8280E0D0E2852A82E0D0E0D0E0D0E28270D0E0D0E0D0E0D2F282752FF52%2F2F2F072F2F2F070E2E270D0E0D2F52FF53280D0E0D0EF80E0D0E0D0E0D%0E2852C9C9C8CEC9CEC9CEC8C9FD04C8C1522F0E0D0E2F275252F82F0D0E%0D0E27FFFF272F070E070D070E2727270E070D070E0728F8FD04FFC97C52%277DFF52FFFF7D2E070E072827FF272E282E2828FD0427F827F827F827F8%2752FFFFFF2727F827F827F827F8272727F827F8A8FFA8F828282F272707%0E070D070E072E51C8C8C8A6C9C8C9A6C8C8C89FC8C1C7272F070D070E07%2F2728070D070E0728FFFF7D2F0E0D0E0D0E0D27F8520D0E0D0E0D0E2727%FFFFFF7D27527DFFA8527DFFFFFFF852272827A8FFFF5227275227527DFF%847D7DA884A8A8A8FD06FFA8A884A8A8A884A8FFFF7D7D59A8FFFFFFA827%27F8522727F82E27532E2F2852C8C8C8C9C8C9C8C9FD04C8C7C7C1762E0E%0D0E0D0E0D0E0D0E0D0E0D0E27FFFF522E070E0D0E070EF827F80E0D0E07%0E0D2727FFFFFF277D7D7E275227527DFFFFA85252527EFD30FF7D7D5252%2727F827F8FD07C8C1C8C1C8C1C7C1C1272E0D0E070E0D0E070E0D0E070E%0D28FFFF7E280E0D0E0D0E072728270D0E0D0E0D0EF852FFFFFFA8525227%527DFF277DFD04FFFD08A87DFFFD05A8FFA8FFA8A87DA8A8FFFD05A8FFFD%05A8FFFFFFA8FF7DA8A8A87DA8A8FFA8FFA8A87DFD05FFA8524BC8C8C8C7%C8C8C8C1C8C7C7C1C79F27280E0D0E0D0E0D0E0D0E0D0E0D0E27FFFF7D2E%070D070E072FF852270D070E072F27277DFFFFFF277D52A8FF7D2753FD05%FFA8272752522752F852FF7DF82727277D522752272752275252F827F8A8%7D272727F852A8A8F87DFD0452F8525227277E275327277DFD05FFA82727%A0C1C79FC8C1C79FC7C1C19E27F80D070E070D070E070D070E070D0727FF%FFA8270E0D0E0D0E2827527D27522727F84C7DFD04FF7D527D522752A8FD%07FF7D527D274C522752FF5927F8522752277D2752277D27275227F82784%A82752272759FF845252277D7D522727522E2752277D5227A8A8FD05FFA8%52F85275A0C7C7C1C7C1C17527F82727532F0E0D0E0D0E0D0E0D0E0D302E%FFFFA8280D0E070E0D28F87DFF7E52527DA8FD07FFA852522727A8FD07FF%7DA87DA87D7E527DFFA87D7D7DFF52A852A87D7D7DA852A8527D7DFFFFA8%52A852FFFFA852FF7D7D7D7E527D7DA852A8527D527D527DFD07FF7D2E27%F827F827F827F82727A87D52F8270028280D0D0E070E0D0E287DFFFFFF27%0E0D2F2827F852FD0FFF52F827F8FD06FFA8287D2727F8A82752537D5227%F8277D27FFFF275253275253F852A8A8FD042728A82753535252277D5227%2752527DA827277D52F8522727A8FD09FFFD04A87DFD07FF7D532727F828%280D0D0E0D28A8FFFFFF520027F827527DA8FD0FFFA87DF852FD06FF7D27%2752F8527D27F85352FF27A8F827F8FF7D27F853F8275252277DFF7D5252%277DF8A85227F852F8275227522727A827522752F8527D2752FD19FFA87D%2727F82727277DFD06FFA8A8FD1DFFA82E7D5227F827525252272752A827%8427FF2752522E7D277DF87DFFFF597D27275252F87D5952527D277D7D27%5227F87D52277D4CF87D27A8FD1CFFA8A87DA8FDFCFFFD86FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2009-10-20T16:43:05-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-10-20T16:43:06-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-10-20T16:43:06-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>84</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAVAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9IWHnPyhqGpSaXYa3YXe&#xA;owkiWzhuYpJVIJDAorE1UihHbFU5xV2KrZJI4o2kkYJGgLO7EBVUCpJJ6AYqtt7i3uYI7i2lSa3m&#xA;UPFNGwdHRhVWVhUEEdCMVVMVYloC3GneffMemsT9S1GO11iyHULI4a1ukFf8qCN9tvjxVluKoS/1&#xA;bTdPe1jvLhYZL2Zba0jNS0srVIVFFSdgSfAAk7Yqi8VdirsVdirsVad0RGd2CooJZiaAAbkknFUN&#xA;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&#xA;0X1Xh9W4j0fSpw4U248dqfLFX//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:F86AB1CDBF2911DEB022E4FED51823C6</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:F86AB1CEBF2911DEB022E4FED51823C6</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:2BD88803909311DD90DCD292936D564C</stRef:instanceID>
            <stRef:documentID>uuid:6652F123F25111DA8D2EC158D4C2E775</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -140.558 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 140.558 li440.886 140.558 li440.886 0 licpclp[1 0 0 1 0 0 ] concat379.731 125.447 mo369.328 130.929 346.913 127.759 339.726 122.369 cv333.966 118.05 328.525 111.803 335.66 96.5088 cv340.978 85.1113 351.272 67.3711 351.611 62.2891 cv351.95 57.208 351.611 39.25 351.611 35.5225 cv351.611 35.3359 351.602 35.1465 351.582 34.957 cv351.831 34.6904 351.987 34.332 351.987 33.9355 cv351.987 33.9355 351.987 33.751 351.987 33.582 cv353.017 32.6523 358.244 31.1582 360.608 31.0068 cv362.835 30.8633 366.403 31.793 367.061 32.5039 cv367.061 32.6963 367.061 33.5342 367.061 33.5342 cv367.061 33.7461 367.106 33.9482 367.188 34.1318 cv367.114 34.7988 367.085 35.5586 367.114 36.4277 cv367.114 36.4277 366.181 62.2891 368.215 66.0176 cv370.245 69.7441 384.984 92.1895 386.677 102.355 cv388.373 112.519 388.315 120.923 379.731 125.447 cvcpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 0 cmykf130.736 119.883 mo138.98 119.883 li138.98 119.883 138.901 121.497 138.901 121.826 cv138.121 121.786 137.476 121.773 136.563 121.773 cv136.166 121.773 li135.969 124.072 135.89 126.385 135.862 128.697 cv133.22 128.697 li133.034 128.697 li133.259 126.396 133.379 124.084 133.419 121.773 cv132.083 121.773 li131.925 121.773 130.67 121.839 130.67 121.839 cv130.736 119.883 licp0 0 0 1 cmykf146.062 123.133 mo146.062 123.133 146.168 120.093 146.127 119.883 cv149.008 119.883 li148.98 120.187 148.546 126.861 148.638 128.697 cv145.744 128.697 li145.862 127.493 145.93 126.292 145.954 125.078 cv142.426 125.078 li142.323 128.697 li139.455 128.697 li139.839 124.971 139.864 120.093 139.851 119.883 cv142.731 119.883 li142.731 119.883 142.52 122.564 142.533 123.133 cv146.062 123.133 licpf157.927 121.812 mo157.278 121.786 156.513 121.786 155.759 121.786 cv153.565 121.786 li153.472 123.293 li154.478 123.306 155.812 123.293 155.812 123.293 cv156.235 123.293 157.185 123.266 157.185 123.266 cv157.055 125.223 li153.354 125.223 li153.262 126.832 li153.554 126.847 155.561 126.832 155.561 126.832 cv156.949 126.832 156.513 126.807 157.701 126.741 cv157.582 128.697 li150.381 128.697 li150.726 126.266 150.83 120.055 150.83 119.883 cv158.02 119.883 li157.927 121.812 licpf167.925 119.883 mo167.925 119.883 169.048 124.68 169.153 125.42 cv169.379 124.258 170.754 120.636 170.951 119.883 cv174.585 119.883 li174.585 119.883 174.281 126.134 174.359 128.697 cv171.969 128.697 li172.021 127.918 172.206 123.067 172.153 122.381 cv172.153 122.381 170.303 127.997 170.08 128.697 cv167.714 128.697 li167.489 127.416 166.418 123.133 166.285 122.394 cv166.142 123.306 165.902 127.891 165.891 128.697 cv163.604 128.697 li164.039 125.313 164.356 119.883 164.356 119.883 cv167.925 119.883 licpf179.049 119.896 mo179.049 119.896 178.745 124.217 178.745 124.877 cv178.745 126.359 179.089 126.887 180.305 126.887 cv182.036 126.887 181.93 125.616 182.087 123.596 cv182.169 122.524 182.271 119.896 182.271 119.896 cv185.102 119.896 li185.102 119.896 184.798 123.688 184.743 125.591 cv184.691 127.574 183.607 128.868 180.041 128.868 cv179.049 128.868 175.931 128.71 175.931 125.975 cv175.931 125.313 176.275 121.642 176.275 119.896 cv179.049 119.896 licpf192.538 122.076 mo191.956 121.851 191.335 121.653 190.714 121.653 cv190.29 121.653 189.433 121.747 189.433 122.328 cv189.433 123.398 192.564 124.217 192.564 126.437 cv192.564 127.746 191.335 128.868 189.022 128.868 cv188.164 128.868 187.305 128.724 186.472 128.565 cv186.472 128.565 186.354 127.006 186.273 126.385 cv187.015 126.713 187.794 126.966 188.613 126.966 cv189.048 126.966 189.789 126.847 189.789 126.292 cv189.789 125.247 186.656 124.19 186.656 122.154 cv186.656 120.465 188.243 119.725 190.093 119.725 cv191.217 119.725 192.366 119.974 192.366 119.974 cv192.538 122.076 licpf201.48 121.812 mo200.834 121.786 200.067 121.786 199.313 121.786 cv197.121 121.786 li197.027 123.293 li198.032 123.306 199.367 123.293 199.367 123.293 cv199.789 123.293 200.741 123.266 200.741 123.266 cv200.608 125.223 li196.908 125.223 li196.817 126.832 li197.105 126.847 199.115 126.832 199.115 126.832 cv200.502 126.832 200.067 126.807 201.256 126.741 cv201.137 128.697 li193.936 128.697 li194.279 126.266 194.386 120.055 194.386 119.883 cv201.573 119.883 li201.48 121.812 licpf205.92 119.896 mo205.92 119.896 205.615 124.217 205.615 124.877 cv205.615 126.359 205.959 126.887 207.174 126.887 cv208.905 126.887 208.799 125.616 208.958 123.596 cv209.037 122.524 209.143 119.896 209.143 119.896 cv211.972 119.896 li211.972 119.896 211.666 123.688 211.613 125.591 cv211.563 127.574 210.479 128.868 206.91 128.868 cv205.92 128.868 202.8 128.71 202.8 125.975 cv202.8 125.313 203.145 121.642 203.145 119.896 cv205.92 119.896 licpf217.425 119.883 mo217.425 119.883 218.549 124.68 218.654 125.42 cv218.878 124.258 220.253 120.636 220.451 119.883 cv224.086 119.883 li224.086 119.883 223.781 126.134 223.861 128.697 cv221.469 128.697 li221.523 127.918 221.708 123.067 221.655 122.381 cv221.655 122.381 219.804 127.997 219.58 128.697 cv217.214 128.697 li216.989 127.416 215.918 123.133 215.787 122.394 cv215.641 123.306 215.403 127.891 215.39 128.697 cv213.105 128.697 li213.54 125.313 213.856 119.883 213.856 119.883 cv217.425 119.883 licpf234.944 126.914 mo236.556 126.914 237.572 125.709 237.572 124.15 cv237.572 122.738 236.621 121.653 235.169 121.653 cv233.581 121.653 232.55 122.909 232.55 124.442 cv232.55 125.83 233.529 126.914 234.944 126.914 cvcp235.261 119.725 mo239.673 119.725 240.349 122.867 240.349 124.084 cv240.349 126.926 238.498 128.868 234.797 128.868 cv231.601 128.868 229.776 127.006 229.776 124.482 cv229.776 122.129 231.415 119.725 235.261 119.725 cvcpf248.565 121.812 mo248.565 121.812 247.799 121.8 247.23 121.8 cv247.23 121.8 244.972 121.786 244.537 121.8 cv244.468 123.333 li245.144 123.345 246.466 123.333 246.466 123.333 cv247.005 123.333 247.375 123.333 247.837 123.319 cv247.773 125.207 li247.773 125.207 245.024 125.194 244.377 125.207 cv244.377 125.207 244.298 128.605 244.298 128.697 cv241.416 128.697 li241.76 125.936 241.826 120.067 241.826 119.883 cv248.656 119.883 li248.565 121.812 licpf260.243 122.076 mo259.66 121.851 259.04 121.653 258.419 121.653 cv257.997 121.653 257.138 121.747 257.138 122.328 cv257.138 123.398 260.271 124.217 260.271 126.437 cv260.271 127.746 259.04 128.868 256.728 128.868 cv255.87 128.868 255.01 128.724 254.177 128.565 cv254.177 128.565 254.058 127.006 253.98 126.385 cv254.72 126.713 255.5 126.966 256.317 126.966 cv256.754 126.966 257.494 126.847 257.494 126.292 cv257.494 125.247 254.362 124.19 254.362 122.154 cv254.362 120.465 255.947 119.725 257.799 119.725 cv258.921 119.725 260.07 119.974 260.07 119.974 cv260.243 122.076 licpf261.469 124.535 mo261.469 121.349 263.979 119.725 266.954 119.725 cv267.746 119.725 268.538 119.845 269.317 119.974 cv269.41 122.011 li268.737 121.851 268.051 121.707 267.349 121.707 cv266.491 121.707 264.244 122.117 264.244 124.523 cv264.244 126.119 265.407 126.938 266.914 126.938 cv267.706 126.938 268.486 126.767 269.252 126.568 cv268.922 128.671 li268.46 128.71 267.746 128.868 266.532 128.868 cv264.482 128.868 261.469 128.104 261.469 124.535 cvcpf270.889 119.883 mo273.77 119.883 li273.479 122.474 273.413 128.697 273.413 128.697 cv270.519 128.697 li270.703 127.123 270.969 120.81 270.889 119.883 cvcpf282.688 121.812 mo282.04 121.786 281.273 121.786 280.521 121.786 cv278.326 121.786 li278.234 123.293 li279.239 123.306 280.573 123.293 280.573 123.293 cv280.996 123.293 281.947 123.266 281.947 123.266 cv281.815 125.223 li278.115 125.223 li278.022 126.832 li278.312 126.847 280.322 126.832 280.322 126.832 cv281.711 126.832 281.273 126.807 282.462 126.741 cv282.343 128.697 li275.141 128.697 li275.485 126.266 275.591 120.055 275.591 119.883 cv282.779 119.883 li282.688 121.812 licpf287.759 119.883 mo287.759 119.883 290.56 124.971 290.918 125.657 cv291.01 124.601 291.127 121.642 291.143 119.883 cv293.666 119.883 li293.441 122.301 293.204 127.627 293.177 128.697 cv289.953 128.697 li289.531 127.903 287.337 124.165 286.753 123.028 cv286.753 123.028 286.568 127.442 286.557 128.697 cv284.022 128.697 li284.376 125.525 284.469 119.883 284.469 119.883 cv287.759 119.883 licpf294.867 124.535 mo294.867 121.349 297.376 119.725 300.351 119.725 cv301.146 119.725 301.938 119.845 302.716 119.974 cv302.809 122.011 li302.135 121.851 301.448 121.707 300.747 121.707 cv299.889 121.707 297.642 122.117 297.642 124.523 cv297.642 126.119 298.806 126.938 300.312 126.938 cv301.105 126.938 301.885 126.767 302.649 126.568 cv302.319 128.671 li301.857 128.71 301.146 128.868 299.929 128.868 cv297.88 128.868 294.867 128.104 294.867 124.535 cvcpf311.464 121.812 mo310.815 121.786 310.048 121.786 309.296 121.786 cv307.103 121.786 li307.009 123.293 li308.014 123.306 309.349 123.293 309.349 123.293 cv309.771 123.293 310.722 123.266 310.722 123.266 cv310.59 125.223 li306.889 125.223 li306.798 126.832 li307.089 126.847 309.099 126.832 309.099 126.832 cv310.484 126.832 310.048 126.807 311.237 126.741 cv311.119 128.697 li303.918 128.697 li304.261 126.266 304.365 120.055 304.365 119.883 cv311.555 119.883 li311.464 121.812 licpf313.021 127.099 mo315.569 127.099 li315.464 127.256 313.733 130.178 313.627 130.335 cv311.897 130.335 li311.897 130.335 312.969 127.256 313.021 127.099 cvcpf133.342 134.823 mo133.342 134.823 133.447 131.785 133.407 131.572 cv136.288 131.572 li136.262 131.877 135.826 138.549 135.918 140.385 cv133.023 140.385 li133.144 139.184 133.21 137.981 133.235 136.766 cv129.707 136.766 li129.601 140.385 li126.733 140.385 li127.116 136.659 127.144 131.785 127.132 131.572 cv130.011 131.572 li130.011 131.572 129.799 134.253 129.813 134.823 cv133.342 134.823 licpf145.206 133.501 mo144.56 133.477 143.793 133.477 143.04 133.477 cv140.845 133.477 li140.753 134.98 li141.759 134.995 143.091 134.98 143.091 134.98 cv143.513 134.98 144.466 134.955 144.466 134.955 cv144.333 136.909 li140.635 136.909 li140.541 138.524 li140.831 138.536 142.841 138.524 142.841 138.524 cv144.229 138.524 143.793 138.496 144.981 138.431 cv144.862 140.385 li137.66 140.385 li138.004 137.954 138.109 131.744 138.109 131.572 cv145.298 131.572 li145.206 133.501 licpf152.128 136 mo151.309 133.477 li150.119 136 li152.128 136 licp149.34 137.85 mo148.983 138.576 148.177 140.385 148.177 140.385 cv145.138 140.385 li146.617 137.756 149.327 132.577 149.789 131.572 cv153.119 131.572 li153.119 131.572 155.59 138.549 156.357 140.385 cv153.423 140.385 li152.59 137.85 li149.34 137.85 licpf160.121 131.572 mo160.121 131.572 159.751 136.977 159.751 138.484 cv160.081 138.484 162.024 138.484 162.024 138.484 cv162.726 138.484 162.751 138.496 163.769 138.457 cv163.624 140.385 li156.767 140.385 li156.767 140.385 157.32 135.284 157.268 131.572 cv160.121 131.572 licpf163.898 131.572 mo172.145 131.572 li172.145 131.572 172.065 133.185 172.065 133.514 cv171.285 133.477 170.638 133.461 169.727 133.461 cv169.331 133.461 li169.131 135.761 169.054 138.074 169.027 140.385 cv166.382 140.385 li166.197 140.385 li166.423 138.088 166.542 135.775 166.582 133.461 cv165.247 133.461 li165.089 133.461 163.833 133.529 163.833 133.529 cv163.898 131.572 licpf179.224 134.823 mo179.224 134.823 179.33 131.785 179.291 131.572 cv182.172 131.572 li182.146 131.877 181.711 138.549 181.802 140.385 cv178.907 140.385 li179.026 139.184 179.094 137.981 179.12 136.766 cv175.592 136.766 li175.484 140.385 li172.618 140.385 li173.001 136.659 173.027 131.785 173.013 131.572 cv175.895 131.572 li175.895 131.572 175.685 134.253 175.696 134.823 cv179.224 134.823 licpf193.638 136 mo192.817 133.477 li191.628 136 li193.638 136 licp190.85 137.85 mo190.493 138.576 189.688 140.385 189.688 140.385 cv186.647 140.385 li188.128 137.756 190.837 132.577 191.299 131.572 cv194.629 131.572 li194.629 131.572 197.101 138.549 197.865 140.385 cv194.932 140.385 li194.099 137.85 li190.85 137.85 licpf202.015 131.572 mo202.015 131.572 204.816 136.659 205.172 137.346 cv205.264 136.29 205.384 133.329 205.396 131.572 cv207.921 131.572 li207.695 133.99 207.457 139.316 207.433 140.385 cv204.208 140.385 li203.785 139.593 201.592 135.853 201.01 134.718 cv201.01 134.718 200.825 139.131 200.812 140.385 cv198.275 140.385 li198.632 137.215 198.725 131.572 198.725 131.572 cv202.015 131.572 licpf212.915 138.496 mo214.448 138.496 215.677 137.729 215.677 135.694 cv215.677 134.004 214.66 133.41 213.403 133.41 cv212.28 133.41 li212.056 138.496 li212.915 138.496 licp209.69 131.572 mo213.854 131.572 li216.999 131.572 218.452 132.959 218.452 135.575 cv218.452 138.895 216.548 140.385 213.271 140.385 cv209.28 140.385 li209.664 137.135 209.718 132.325 209.69 131.572 cvcpf223.392 131.572 mo231.637 131.572 li231.637 131.572 231.557 133.185 231.557 133.514 cv230.777 133.477 230.13 133.461 229.219 133.461 cv228.82 133.461 li228.624 135.761 228.544 138.074 228.518 140.385 cv225.875 140.385 li225.689 140.385 li225.914 138.088 226.034 135.775 226.074 133.461 cv224.74 133.461 li224.579 133.461 223.325 133.529 223.325 133.529 cv223.392 131.572 licpf239.655 133.501 mo239.007 133.477 238.239 133.477 237.487 133.477 cv235.294 133.477 li235.2 134.98 li236.206 134.995 237.54 134.98 237.54 134.98 cv237.963 134.98 238.916 134.955 238.916 134.955 cv238.782 136.909 li235.081 136.909 li234.99 138.524 li235.282 138.536 237.288 138.524 237.288 138.524 cv238.678 138.524 238.239 138.496 239.43 138.431 cv239.312 140.385 li232.11 140.385 li232.453 137.954 232.559 131.744 232.559 131.572 cv239.747 131.572 li239.655 133.501 licpf240.815 136.223 mo240.815 133.038 243.326 131.415 246.301 131.415 cv247.093 131.415 247.885 131.533 248.665 131.665 cv248.759 133.699 li248.082 133.541 247.396 133.396 246.696 133.396 cv245.835 133.396 243.589 133.807 243.589 136.211 cv243.589 137.811 244.755 138.629 246.262 138.629 cv247.052 138.629 247.832 138.457 248.6 138.258 cv248.271 140.36 li247.806 140.398 247.093 140.558 245.876 140.558 cv243.829 140.558 240.815 139.791 240.815 136.223 cvcpf256.474 134.823 mo256.474 134.823 256.577 131.785 256.538 131.572 cv259.419 131.572 li259.395 131.877 258.958 138.549 259.049 140.385 cv256.154 140.385 li256.274 139.184 256.342 137.981 256.368 136.766 cv252.839 136.766 li252.731 140.385 li249.866 140.385 li250.248 136.659 250.276 131.785 250.264 131.572 cv253.142 131.572 li253.142 131.572 252.932 134.253 252.943 134.823 cv256.474 134.823 licpf264.531 131.572 mo264.531 131.572 267.331 136.659 267.689 137.346 cv267.783 136.29 267.902 133.329 267.915 131.572 cv270.439 131.572 li270.214 133.99 269.976 139.316 269.948 140.385 cv266.726 140.385 li266.303 139.593 264.108 135.853 263.527 134.718 cv263.527 134.718 263.342 139.131 263.33 140.385 cv260.793 140.385 li261.146 137.215 261.242 131.572 261.242 131.572 cv264.531 131.572 licpf276.808 138.602 mo278.419 138.602 279.437 137.4 279.437 135.841 cv279.437 134.426 278.483 133.343 277.032 133.343 cv275.445 133.343 274.416 134.598 274.416 136.129 cv274.416 137.52 275.393 138.602 276.808 138.602 cvcp277.125 131.415 mo281.539 131.415 282.213 134.559 282.213 135.775 cv282.213 138.616 280.361 140.558 276.662 140.558 cv273.464 140.558 271.642 138.694 271.642 136.171 cv271.642 133.818 273.28 131.415 277.125 131.415 cvcpf286.638 131.572 mo286.638 131.572 286.269 136.977 286.269 138.484 cv286.597 138.484 288.539 138.484 288.539 138.484 cv289.238 138.484 289.268 138.496 290.284 138.457 cv290.139 140.385 li283.281 140.385 li283.281 140.385 283.835 135.284 283.784 131.572 cv286.638 131.572 licpf296.042 138.602 mo297.657 138.602 298.674 137.4 298.674 135.841 cv298.674 134.426 297.722 133.343 296.267 133.343 cv294.683 133.343 293.651 134.598 293.651 136.129 cv293.651 137.52 294.631 138.602 296.042 138.602 cvcp296.36 131.415 mo300.775 131.415 301.448 134.559 301.448 135.775 cv301.448 138.616 299.599 140.558 295.898 140.558 cv292.702 140.558 290.876 138.694 290.876 136.171 cv290.876 133.818 292.514 131.415 296.36 131.415 cvcpf311.515 135.258 mo311.37 136.897 311.293 138.549 311.237 140.2 cv310.089 140.413 308.926 140.558 307.749 140.558 cv306.495 140.558 302.344 140.586 302.344 136.278 cv302.344 134.718 303.219 131.415 308.146 131.415 cv309.164 131.415 310.155 131.572 311.145 131.758 cv311.145 131.758 311.186 133.236 311.237 133.831 cv310.365 133.555 309.468 133.329 308.557 133.329 cv306.599 133.329 305.12 134.334 305.12 136.407 cv305.12 137.874 306.031 138.682 307.473 138.682 cv307.896 138.682 308.319 138.602 308.729 138.51 cv308.806 137.082 li308.677 137.069 307.617 137.069 307.617 137.069 cv307.617 137.069 307.683 135.775 307.696 135.258 cv311.515 135.258 licpf317.565 137.042 mo317.445 140.385 li314.633 140.385 li314.766 139.211 314.856 138.021 314.883 136.845 cv311.924 131.572 li314.963 131.572 li315.2 132.154 316.191 134.229 316.39 134.729 cv318.238 131.572 li321.252 131.572 li317.565 137.042 licpf413.08 50.5996 mo413.57 50.5322 413.776 50.5459 413.849 50.5596 cv414.074 50.9131 414.575 52.2598 414.575 57.2881 cv414.575 59.2578 414.342 60.7031 414.005 61.7461 cv413.023 61.7607 412.013 61.8105 411.241 61.8887 cv411.241 61.8887 408.408 62.1709 406.965 62.3164 cv406.965 60.8779 406.965 55.1943 406.965 52.3252 cv409.641 51.5703 412.827 50.6689 413.08 50.5996 cvcp413.149 106.069 mo413.149 106.069 407.257 103.911 407.104 103.855 cv407.053 103.813 406.987 103.719 406.965 103.657 cv406.965 103.533 406.965 94.1201 406.965 89.3535 cv408.977 89.5879 410.946 89.8164 410.946 89.8164 cv412.22 89.9355 415.419 90.2334 415.419 101.979 cv415.419 104.176 415.149 105.639 414.82 106.606 cv414.199 106.422 413.595 106.234 413.149 106.069 cvcp435.86 74.6367 mo435.434 74.168 435.022 73.8418 434.605 73.4922 cv439.914 67.2793 439.938 55.9297 439.938 45.6309 cv439.938 34.7666 437.375 27.0254 432.319 22.6289 cv427.311 18.2744 421.742 18.9961 421.507 19.0293 cv420.169 19.2178 418.1 19.6602 416.798 20.042 cv416.794 20.042 389.759 27.9229 389.759 27.9229 cv388.159 28.3896 386.829 29.6055 386.087 31.0986 cv383.795 31.9053 382.093 34.2402 382.093 36.6758 cv382.093 122.413 li382.093 124.949 383.929 127.389 386.363 128.091 cv386.363 128.091 414.854 136.319 415.067 136.381 cv419.987 138.332 425.045 139.779 429.072 137.729 cv430.93 137.686 432.678 137.234 434.243 136.173 cv439.085 132.892 440.886 124.937 440.886 106.824 cv440.886 86.8896 439.616 78.7695 435.86 74.6367 cvcpf298.806 88.8516 mo298.02 87.7461 297.18 86.8301 296.41 86.1025 cv297.224 85.3203 297.878 84.4541 298.41 83.5234 cv298.542 83.3799 298.684 83.2422 298.806 83.0918 cv298.806 88.8516 licp281.501 74.5449 mo281.48 74.5615 281.45 74.5889 281.441 74.5928 cv280.858 74.9268 279.618 75.2754 278.975 75.2793 cv278.975 75.2793 275.394 75.3047 274.14 75.3125 cv274.14 74.3242 274.14 70.2383 274.14 67.5313 cv276.229 67.3691 279.581 67.1133 279.581 67.1133 cv280.919 67.0098 281.317 67.1865 281.37 67.2129 cv281.804 67.8408 281.807 70.8428 281.807 72.2998 cv281.807 73.2139 281.679 73.9414 281.501 74.5449 cvcp235.016 90.4033 mo235.016 90.3867 235.016 88.8877 235.016 87.5547 cv236.187 87.5547 241.676 87.5547 241.676 87.5547 cv244.513 87.5547 246.817 85.2715 246.867 82.4463 cv247.173 81.7822 247.354 81.0498 247.354 80.2715 cv247.354 76.6514 li247.354 73.7578 245.003 71.4043 242.109 71.4043 cv242.109 71.4043 235.229 71.4043 235.016 71.4043 cv235.016 71.2773 235.016 69.6895 235.016 68.2266 cv237.083 68.2266 247.717 68.2266 247.717 68.2266 cv249.81 68.2266 252.515 67.8428 254.544 65.2813 cv254.544 91.1826 li253.75 90.6973 252.824 90.4033 251.828 90.4033 cv251.828 90.4033 236.314 90.4033 235.016 90.4033 cvcp200.424 84.6689 mo200.293 88.3145 197.568 90.0898 197.451 90.1641 cv196.872 90.5127 195.537 90.9219 194.831 90.957 cv194.831 90.957 192.925 91.0547 191.566 91.123 cv191.566 85.4199 191.566 69.083 191.566 67.4004 cv193.535 67.5283 197.444 67.7822 197.444 67.7822 cv199.369 67.9082 199.74 68.2803 200.079 69.0381 cv200.212 69.3164 200.321 69.6738 200.415 70.0801 cv200.609 72.1826 200.609 74.543 200.609 75.7256 cv200.609 78.6846 200.609 81.7461 200.424 84.6689 cvcp334.165 94.4746 mo334.165 94.4746 322.285 93.7578 319.302 93.5781 cv319.302 92.2598 319.302 46.1191 319.302 46.1191 cv319.302 44.6738 318.696 43.3057 317.642 42.3643 cv316.587 41.4219 315.158 40.9775 313.724 41.1416 cv305.353 42.0957 li303.059 42.3574 301.196 44.0947 300.648 46.2725 cv299.527 47.2852 298.806 48.7314 298.806 50.3086 cv298.806 53.4668 li294.952 47.3496 288.728 44.8301 284.794 44.3672 cv283.422 44.21 281.273 44.1436 279.899 44.2197 cv260.375 45.292 li258.76 45.3799 257.336 46.2314 256.408 47.4648 cv256.324 47.3496 256.249 47.2295 256.159 47.1182 cv255.541 46.3564 254.777 45.7773 253.912 45.3809 cv254.296 44.3867 254.504 43.3203 254.504 42.2217 cv254.504 39.875 253.591 37.668 251.931 36.0078 cv250.271 34.3486 248.065 33.4336 245.719 33.4336 cv245 33.4336 244.309 33.5293 243.64 33.6934 cv244.195 23.5215 245.47 13.2227 247.597 12.4834 cv248.047 12.3281 249.702 13.0186 249.967 13.3311 cv251.608 15.2617 252.463 17.1377 253.225 17.9961 cv253.345 18.1328 253.459 18.2607 253.567 18.3799 cv252.454 20.3564 251.908 22.7041 253.257 23.5303 cv254.689 24.4102 256.691 22.6133 257.943 20.5713 cv258.776 19.21 259.245 17.8174 259.245 16.7598 cv259.245 16.5264 259.222 16.3066 259.175 16.1074 cv259.033 15.5127 258.704 15.208 258.454 15.0547 cv258.205 14.9023 257.783 14.75 257.189 14.8916 cv256.43 15.0742 255.562 15.7217 254.758 16.6611 cv254.143 15.9678 253.065 14.7207 251.151 12.4727 cv249.681 10.7402 248.384 10.7178 247.559 11.0049 cv243.4 12.4473 242.021 26.7422 241.575 34.4766 cv240.655 34.9707 239.836 35.6299 239.149 36.4063 cv237.351 34.6826 235.002 33.7314 232.501 33.7314 cv230.979 33.7314 229.543 34.0957 228.263 34.7295 cv224.416 28.7031 216.216 16.2881 212.169 13.4883 cv210.728 12.4883 209.321 12.1592 207.985 12.5078 cv205.178 13.2402 203.437 16.8027 201.898 19.9473 cv201.86 20.0293 201.822 20.1025 201.784 20.1836 cv200.412 19.1416 198.941 18.6064 197.999 19.2861 cv197.743 19.4707 197.424 19.8252 197.351 20.459 cv197.224 21.585 197.974 23.2285 199.308 24.751 cv200.971 26.6455 203.345 28.0674 204.669 27.1133 cv204.669 27.1133 li204.925 26.9287 205.244 26.5771 205.316 25.9414 cv205.444 24.8174 204.693 23.1719 203.359 21.6504 cv203.251 21.5254 203.132 21.4102 203.018 21.291 cv203.11 20.7773 203.213 20.2832 203.382 19.9375 cv204.727 17.1865 205.88 13.998 207.786 13.5 cv208.53 13.3057 210.067 13.7725 211.012 14.4258 cv214.742 17.0078 222.824 29.6797 226.586 35.7803 cv224.335 37.5439 222.876 40.2813 222.876 43.3584 cv222.876 44.2715 223.009 45.1641 223.253 46.0195 cv221.286 46.1084 li218.517 46.1387 216.179 48.5039 216.179 51.3789 cv216.179 61.0381 li211.801 51.7783 202.6 47.1816 202.091 46.9346 cv200.608 46.2109 198.336 45.6465 196.687 45.5938 cv178.665 45.0029 li177.247 44.957 175.908 45.4727 174.894 46.457 cv174.007 47.3145 173.493 48.4395 173.372 49.6563 cv173.316 49.5713 173.247 49.498 173.188 49.416 cv172.965 46.7959 170.869 44.6602 168.204 44.4727 cv159.993 43.8887 li158.574 43.7871 157.171 44.2793 156.147 45.2441 cv155.136 46.1953 154.56 47.543 154.56 48.9492 cv154.56 48.9658 154.665 59.252 154.779 70.1768 cv151.886 59.4824 149.242 49.7207 149.242 49.7207 cv148.985 48.7676 148.461 47.8965 147.777 47.1719 cv147.745 47.0527 147.729 46.9883 147.729 46.9883 cv147.08 44.5889 144.813 42.6602 142.341 42.4033 cv125.293 40.6348 li123.861 40.4863 122.441 40.9434 121.393 41.8887 cv120.346 42.833 119.745 44.1992 119.745 45.6387 cv119.745 109.11 li119.745 110.55 120.346 111.916 121.396 112.86 cv121.8 113.228 122.275 113.492 122.771 113.705 cv122.944 113.929 123.124 114.146 123.337 114.339 cv124.378 115.275 125.79 115.727 127.209 115.577 cv135.131 114.741 li137.856 114.457 139.977 112.101 139.977 109.359 cv139.977 109.34 139.857 98.626 139.732 87.1377 cv142.526 97.665 145.111 107.398 145.111 107.398 cv145.45 108.674 146.235 109.756 147.263 110.507 cv148.362 112.215 150.349 113.29 152.433 113.134 cv169.269 111.879 li171.782 111.691 173.786 109.756 174.159 107.326 cv174.26 107.48 174.38 107.62 174.496 107.765 cv174.753 108.525 175.169 109.228 175.765 109.803 cv176.771 110.773 178.1 111.285 179.506 111.238 cv179.509 111.238 200.932 110.49 200.932 110.49 cv201.03 110.48 li209.615 109.614 213.968 102.415 216.179 95.4678 cv216.179 100.236 li216.179 100.317 216.195 100.41 216.203 100.496 cv216.203 101.922 li216.203 104.51 220.435 110.204 223.619 110.229 cv223.623 110.229 236.303 110.304 236.303 110.304 cv241.88 110.304 250.995 110.646 251.087 110.649 cv252.495 110.702 253.825 110.195 254.837 109.224 cv255.045 109.022 255.228 108.802 255.396 108.573 cv256.308 109.973 257.854 110.939 259.609 111.017 cv267.79 111.375 li269.185 111.434 270.557 110.919 271.556 109.963 cv272.091 109.447 272.491 108.833 272.756 108.158 cv273.625 107.215 274.14 105.972 274.14 104.673 cv274.14 104.673 274.14 99.7295 274.14 96.752 cv276.24 96.8584 279.191 97.0107 279.191 97.0107 cv280.363 97.0713 281.132 99.6543 281.262 100.537 cv281.401 101.545 281.527 103.352 281.527 104.389 cv281.527 107.26 li281.527 110.047 283.703 112.403 286.478 112.627 cv294.879 113.3 li296.283 113.412 297.678 112.938 298.703 111.992 cv298.967 111.75 299.196 111.482 299.4 111.192 cv300.209 112.806 301.78 114.01 303.646 114.222 cv331.374 117.406 li332.798 117.57 334.215 117.128 335.265 116.193 cv335.394 116.078 335.494 115.938 335.611 115.811 cv336.33 115.606 337.004 115.257 337.567 114.754 cv338.62 113.813 339.224 112.446 339.224 111.004 cv339.224 99.8467 li339.224 97.0059 337.002 94.6465 334.165 94.4746 cvcpf77.2119 35.6494 mo76.5459 34.0586 75.1621 32.7891 73.4053 32.3828 cv73.4043 32.3828 64.9473 30.4189 64.9473 30.4189 cv63.5342 30.0908 62.0615 30.375 60.9082 31.1992 cv59.7549 32.0215 59.0068 33.3203 58.8594 34.7617 cv58.8594 34.7617 57.5098 47.8115 56.0186 62.2314 cv54.292 47.3857 52.7354 34.0195 52.7354 34.0195 cv52.4707 31.7285 50.7363 29.6123 48.5596 28.8359 cv47.749 27.3057 46.335 26.0605 44.6934 25.5918 cv35.8242 23.0557 li34.4043 22.6494 32.9092 22.875 31.7236 23.6719 cv30.5371 24.4668 29.7646 25.7646 29.6025 27.2324 cv29.6025 27.2324 28.1338 40.582 26.4219 56.1221 cv25.0967 39.2236 23.9385 24.4863 23.9385 24.4863 cv23.7529 22.1289 22.0146 19.8057 19.8037 18.9639 cv19.0732 18.6855 li18.3174 17.3223 17.0996 16.1846 15.6875 15.6455 cv15.6865 15.6455 5.99609 11.9561 5.99609 11.9561 cv4.45215 11.3682 2.87598 11.5547 1.67578 12.4658 cv0.473633 13.3818 -0.129883 14.8486 0.0234375 16.4941 cv10.8516 133.232 li10.9883 134.716 11.75 136.029 12.9404 136.836 cv14.0264 137.571 15.375 137.811 16.6904 137.523 cv16.8135 137.628 16.9229 137.745 17.0566 137.837 cv18.2383 138.636 19.7314 138.853 21.1514 138.429 cv34.7393 134.385 li37.0645 133.69 38.9346 131.437 39.1846 129.023 cv39.1846 129.023 40.0938 120.216 41.2236 109.287 cv42.0762 117.64 42.708 123.832 42.708 123.832 cv42.8574 125.286 43.6084 126.588 44.7695 127.407 cv45.6768 128.047 46.7764 128.34 47.8896 128.277 cv48.0098 128.382 48.1143 128.501 48.2441 128.594 cv49.3955 129.409 50.8633 129.679 52.2676 129.337 cv52.2695 129.337 66.0098 125.982 66.0098 125.982 cv68.4082 125.396 70.3652 123.196 70.6689 120.75 cv70.6689 120.75 li80.5293 41.333 li80.8291 38.9072 79.4102 36.5752 77.2119 35.6494 cvcpf202.213 22.6523 mo200.663 20.8828 199.171 20.3506 198.894 20.5195 cv198.867 20.5566 198.85 20.625 198.85 20.7217 cv198.85 21.1953 199.224 22.3457 200.453 23.7461 cv202.007 25.5195 203.499 26.0498 203.775 25.8799 cv203.801 25.8418 203.817 25.7754 203.817 25.6787 cv203.817 25.2051 203.442 24.0566 202.213 22.6523 cvcp0 0 0 0 cmykf255.069 18.8096 mo254.231 20.1777 253.989 21.2793 253.989 21.8477 cv253.989 22.0459 254.018 22.1719 254.063 22.2295 cv254.37 22.2539 255.533 21.5859 256.646 19.7764 cv257.481 18.4092 257.727 17.3086 257.727 16.7393 cv257.727 16.541 257.694 16.415 257.649 16.3574 cv257.345 16.332 256.181 17 255.069 18.8096 cvcpf245.534 35.1006 mo243.73 35.1006 242.034 35.8037 240.758 37.0801 cv240.576 37.2637 240.406 37.457 240.248 37.6572 cv241.462 39.2998 242.13 41.2773 242.13 43.3584 cv242.13 43.9707 242.069 44.5762 241.957 45.167 cv250.392 44.7832 li250.269 44.7891 li250.729 44.75 251.173 44.7607 251.605 44.7949 cv252.04 43.9053 252.289 42.9092 252.289 41.8555 cv252.289 40.0508 251.585 38.3545 250.313 37.0801 cv249.034 35.8037 247.339 35.1006 245.534 35.1006 cvcpf232.319 50.585 mo236.508 50.585 239.912 47.1777 239.912 42.9912 cv239.912 40.9648 239.124 39.0566 237.689 37.6221 cv236.254 36.1875 234.346 35.3984 232.319 35.3984 cv230.292 35.3984 228.385 36.1875 226.95 37.6221 cv225.517 39.0566 224.726 40.9648 224.726 42.9912 cv224.726 45.0205 225.517 46.9268 226.95 48.3594 cv228.385 49.7949 230.292 50.585 232.319 50.585 cvcpf244.713 38.1406 mo243.501 38.1406 242.52 39.123 242.52 40.3369 cv242.52 41.5508 243.501 42.5322 244.713 42.5322 cv245.928 42.5322 246.908 41.5508 246.908 40.3369 cv246.908 39.123 245.928 38.1406 244.713 38.1406 cvcp0 0 0 1 cmykf227.798 41.1914 mo227.798 42.5352 228.89 43.625 230.23 43.625 cv231.576 43.625 232.667 42.5352 232.667 41.1914 cv232.667 39.8467 231.576 38.7578 230.23 38.7578 cv228.89 38.7578 227.798 39.8467 227.798 41.1914 cvcpf229.668 39.7275 mo229.37 39.7275 229.131 39.9707 229.131 40.2676 cv229.131 40.5664 229.37 40.8066 229.668 40.8066 cv229.966 40.8066 230.207 40.5664 230.207 40.2676 cv230.207 39.9707 229.966 39.7275 229.668 39.7275 cvcp0 0 0 0 cmykf243.911 38.9941 mo243.614 38.9941 243.372 39.2373 243.372 39.5332 cv243.372 39.8301 243.614 40.0723 243.911 40.0723 cv244.212 40.0723 244.453 39.8301 244.453 39.5332 cv244.453 39.2373 244.212 38.9941 243.911 38.9941 cvcpf412.1 108.935 mo413.233 109.349 415.127 109.892 416.309 110.14 cv416.309 110.14 422.513 111.443 422.513 100.297 cv422.513 89.6631 420.014 85.2441 415.194 84.793 cv406.097 83.7324 li404.898 83.5957 403.915 84.4678 403.915 85.6777 cv403.915 103.741 li403.915 104.949 404.843 106.277 405.977 106.691 cv412.1 108.935 licp411.546 64.9238 mo412.748 64.8037 414.717 64.752 415.923 64.8135 cv415.923 64.8135 421.652 65.0986 421.652 54.6934 cv421.652 46.5068 420.531 44.1318 416.4 44.8076 cv406.028 47.7334 li404.866 48.0615 403.915 49.3184 403.915 50.5254 cv403.915 63.4941 li403.915 64.7002 404.899 65.5898 406.099 65.4697 cv411.546 64.9238 licp388.506 33.6621 mo388.506 32.4531 389.454 31.1904 390.612 30.8516 cv417.649 22.9688 li418.808 22.6309 420.735 22.2178 421.93 22.0508 cv421.93 22.0508 436.889 19.9531 436.889 45.6309 cv436.889 60.0625 436.285 71.6807 427.935 74.4619 cv427.935 74.4619 li427.935 75.0488 430.217 72.9619 433.604 76.6885 cv436.992 80.416 437.836 90.2363 437.836 106.824 cv437.836 135.1 433.531 137.834 420.014 132.444 cv390.615 123.951 li389.454 123.615 388.506 122.354 388.506 121.146 cv388.506 33.6621 licp316.253 94.2539 mo316.253 95.4619 317.24 96.5088 318.443 96.5811 cv333.983 97.5205 li335.188 97.5928 336.174 98.6387 336.174 99.8467 cv336.174 111.004 li336.174 112.21 335.194 113.085 333.991 112.949 cv305.698 109.698 li304.498 109.562 303.518 108.459 303.518 107.251 cv303.518 47.5723 li303.518 46.3662 304.498 45.2646 305.698 45.127 cv314.071 44.1719 li315.273 44.0352 316.253 44.9102 316.253 46.1191 cv316.253 94.2539 licp278.995 78.3301 mo280.204 78.3232 282.037 77.8047 283.07 77.1816 cv283.07 77.1816 286.172 75.3086 286.172 70.0117 cv286.172 63.9707 285.958 61.2002 280.551 61.6152 cv273.275 62.1729 li272.073 62.2666 271.089 63.3301 271.089 64.5371 cv271.089 76.1855 li271.089 77.3945 272.075 78.377 273.283 78.3682 cv278.995 78.3301 licp258.351 50.6543 mo258.351 49.4443 259.338 48.4023 260.543 48.3379 cv280.067 47.2666 li281.272 47.1982 283.238 47.2588 284.438 47.3984 cv284.438 47.3984 299.192 49.124 299.192 66.5479 cv299.192 76.3359 299.048 82.3037 290.226 84.7734 cv290.226 84.7734 li290.226 85.1367 291.078 85.9355 292.119 86.5488 cv292.119 86.5488 298.835 90.5127 298.835 98.4297 cv298.835 106.724 li298.835 107.934 297.852 108.842 296.647 108.744 cv288.076 108.058 li286.871 107.961 285.886 106.894 285.886 105.687 cv285.886 102.754 li285.886 101.547 285.751 99.5801 285.586 98.3848 cv285.586 98.3848 284.749 92.334 280.551 92.1191 cv273.281 91.7471 li272.075 91.6846 271.089 92.6221 271.089 93.8291 cv271.089 104.673 li271.089 105.88 270.102 106.826 268.894 106.772 cv260.544 106.407 li259.338 106.355 258.351 105.324 258.351 104.116 cv258.351 50.6543 licp194.984 94.0039 mo196.19 93.9434 198.022 93.3828 199.055 92.7578 cv199.055 92.7578 203.275 90.2158 203.468 84.8623 cv203.659 81.8438 203.659 78.7412 203.659 75.7256 cv203.659 72.3672 203.597 67.7139 202.505 65.4121 cv201.351 62.8301 199.165 62.4258 197.177 62.2959 cv190.056 61.834 li188.852 61.7529 187.865 62.6777 187.865 63.8848 cv187.865 92.1719 li187.865 93.3818 188.852 94.3184 190.058 94.2568 cv194.984 94.0039 licp176.372 50.1768 mo176.372 48.9697 177.357 48.0127 178.566 48.0527 cv196.588 48.6426 li197.794 48.6816 199.67 49.1465 200.755 49.6777 cv200.755 49.6777 215.411 56.8164 215.411 71.1416 cv215.37 75.4492 li215.356 76.6553 215.329 78.6318 215.306 79.8379 cv215.306 79.8379 214.835 104.409 200.322 105.875 cv178.565 106.633 li177.357 106.675 176.372 105.721 176.372 104.513 cv176.372 50.1768 licp250.53 47.8271 mo240.771 48.2734 li240.365 48.9531 239.884 49.5918 239.31 50.165 cv237.491 51.9834 235.074 52.9844 232.501 52.9844 cv229.933 52.9844 227.514 51.9834 225.696 50.165 cv225.335 49.8027 225.013 49.4121 224.718 49.0059 cv221.427 49.1553 li220.218 49.1709 219.229 50.1709 219.229 51.3789 cv219.229 75.9033 li219.229 77.1104 219.229 79.0859 219.229 80.293 cv219.229 100.236 li219.229 101.444 219.983 105.604 223.711 105.604 cv223.711 105.604 230.808 105.68 236.628 105.68 cv242.444 105.68 251.828 106.034 251.828 106.034 cv253.037 106.078 254.022 105.128 254.022 103.92 cv254.022 101.7 li254.022 100.491 254.022 98.5146 254.022 97.3066 cv254.022 95.6475 li254.022 94.4385 253.033 93.4531 251.828 93.4531 cv245.189 93.4531 li243.984 93.4531 242.006 93.4531 240.8 93.4531 cv234.161 93.4531 li232.954 93.4531 231.966 91.7334 231.966 90.5254 cv231.966 90.3379 li231.966 89.1309 231.966 86.7881 231.966 85.5811 cv231.966 84.6611 li231.966 83.4551 232.954 82.4658 234.161 82.4658 cv235.137 82.4658 li235.153 82.4658 235.255 82.4658 235.479 82.4658 cv235.482 82.4658 li235.827 82.4658 li242.109 82.4658 li243.315 82.4658 244.304 81.4785 244.304 80.2715 cv244.304 79.5586 li244.304 78.3506 244.304 78.5723 244.304 77.3633 cv244.304 76.6514 li244.304 75.4424 243.315 74.4541 242.109 74.4541 cv235.827 74.4541 li235.808 74.4541 235.708 74.4541 235.482 74.4541 cv235.479 74.4541 li235.137 74.4541 li234.161 74.4541 li227.479 74.4541 227.943 64.1611 227.606 56.1963 cv228.793 60.9414 229.259 62.7432 234.161 62.7432 cv240.587 62.7432 li241.793 62.7432 243.77 62.7432 244.976 62.7432 cv248.274 62.7432 li250.983 62.7432 253.018 61.9512 254.202 58.0527 cv255.39 54.1582 255.729 47.3818 250.53 47.8271 cvcp170.18 104.936 mo170.18 106.143 169.195 107.206 167.992 107.295 cv150.813 108.574 li149.608 108.664 148.369 107.782 148.059 106.615 cv135.81 60.4688 li135.5 59.3018 135.119 58.3398 134.962 58.3301 cv134.806 58.3213 134.688 59.3018 134.7 60.5088 cv135.221 107.801 li135.235 109.008 134.263 110.099 133.063 110.226 cv124.977 111.075 li123.776 111.202 122.795 110.316 122.795 109.11 cv122.795 45.6387 li122.795 44.4316 123.776 43.5449 124.978 43.668 cv142.026 45.4385 li143.229 45.5625 144.468 46.6191 144.784 47.7842 cv157.015 92.9746 li157.329 94.1416 157.7 95.0889 157.836 95.082 cv157.974 95.0771 158.075 94.084 158.063 92.876 cv157.609 48.9707 li157.598 47.7637 158.571 46.8457 159.777 46.9326 cv167.991 47.5156 li169.195 47.5996 170.18 48.6602 170.18 49.8662 cv170.18 104.936 licp64.5234 119.066 mo64.374 120.264 63.293 121.479 62.1191 121.766 cv48.0996 125.188 li46.9268 125.475 45.8652 124.725 45.7432 123.523 cv39.7861 65.1572 li39.6621 63.9561 39.4521 62.9678 39.3135 62.96 cv39.1758 62.9541 38.9639 63.9307 38.8379 65.1328 cv32.3877 127.569 li32.2656 128.771 31.2168 130.037 30.0596 130.383 cv16.1953 134.51 li15.0381 134.852 13.999 134.151 13.8887 132.95 cv3.06152 16.2129 li2.94922 15.0088 3.78125 14.3779 4.91113 14.8066 cv14.6016 18.4961 li15.7285 18.9268 16.7295 20.2637 16.8232 21.4668 cv23.3105 104.064 li23.4053 105.269 23.5957 106.238 23.7314 106.222 cv23.8691 106.204 24.0889 105.209 24.2217 104.008 cv32.6357 27.5674 li32.7666 26.3652 33.8242 25.6563 34.9854 25.9883 cv43.8564 28.5254 li45.0166 28.8574 46.0801 30.1113 46.2217 31.3096 cv54.251 100.303 li54.3906 101.503 54.6006 102.472 54.7188 102.456 cv54.8359 102.443 55.0322 101.45 55.1572 100.248 cv61.8916 35.0771 li62.0176 33.877 63.0801 33.1172 64.2578 33.3906 cv72.7158 35.3545 li73.8916 35.627 74.7314 36.8301 74.584 38.0293 cv64.5234 119.066 licp/0 <</Name (PANTONE 2935 CVC)/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 1 0.47 0 0 ] >>/CSD add_res1 /0 /CSD get_res sepcs1 sepf340.43 87.0234 mo340.43 87.0234 331.637 100.628 331.282 103.371 cv330.995 105.596 327.914 121.92 344.77 126.493 cv353.003 128.727 369.626 132.488 381.767 126.664 cv385.025 125.102 389.374 121.381 388.204 108.706 cv386.389 89.0352 380.412 85.6689 380.412 85.6689 cv340.43 87.0234 licp/1 <</Name (PANTONE 123 CVC)/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 0 0.3 0.94 0 ] >>/CSD add_res1 /1 /CSD get_res sepcslevel3{gsaveclp[41.9804 0 0 41.9804 348.735 87.8877 ] concat/0 <</ShadingType 3 /ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]/Coords [0 0 0 0 0 1 ]/Domain [0 1 ]/Extend[ true true]/Function<</Domain[0 1 ] /FunctionType 3/Functions [<</Domain[0 1 ] /FunctionType 2/C0 [0.1 ]/C1 [1 ]/N 1 >>]/Bounds []/Encode [0 1 ]>>>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[41.9804 0 0 41.9804 348.735 87.8877 ] concatclp/0 {<</NumSamples 256 /NumComp 1 /Scaling[[0.00392157 0 ]]/Samples[<~)&aG6*??1C+<_pR,UFca-R^Dn.kE8)0/#"61,CaE2E*QS3BB5a4[)(q5X@_(6q'R884cBF92&&T:Janc;H$Op<``C+>$>-8?!^lG@:E_VA7]@cBPD3sCM[j*DfB]:F*)MHG'A1VH@($fI=?ZrJV&N-KnY8:Ll%"IN/`jXO-#KePE_>uQ^=)-R[]h<StDXJTq\<XV5C/hW2ZetXKAY/Yd(I=Za@-K\%&uZ]">Vg^;%J"_SX4/`Q#s>ai_fMbg"GZd*^:je'uq!f@\d1gYCT?hV[8MioB+]jlYail0@U$mHs?1nF?)@o_%qOp\=R\qu$El~>]>>0 0 0 0 0 1 []true true []/SeparationRadialShade} /Gradient add_res /0 /Gradient get_res exec grestore}ifnewpath340.969 85.2842 mo340.969 85.2842 346.74 81.043 350.794 81.1016 cv354.853 81.1602 374.186 78.4561 379.31 84.0576 cv380.665 85.5518 380.327 89.1416 367.736 90.5195 cv347.522 92.7354 336.564 91.2881 340.969 85.2842 cvcp1 /1 /CSD get_res sepcslevel3{gsaveclp[27.462 0 0 27.462 350.684 85.6855 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[27.462 0 0 27.462 350.684 85.6855 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath354.668 82.1768 mo361.151 81.7412 374.641 80.833 378.371 84.916 cv378.671 85.2461 378.564 85.5234 378.531 85.6172 cv378.37 86.043 377.084 88.2168 367.6 89.2568 cv344.75 91.7607 341.751 88.6973 341.382 88.0586 cv341.31 87.9346 341.278 87.7939 341.278 87.6445 cv341.278 87.1797 341.586 86.6367 341.905 86.1807 cv343.557 85.002 347.904 82.3291 350.777 82.373 cv354.668 82.1768 licp354.499 79.6406 mo350.813 79.8301 li346.382 79.7666 340.465 84.0771 340.218 84.2607 cv340.061 84.376 li339.946 84.5332 li338.312 86.7588 338.628 88.3701 339.183 89.3301 cv339.934 90.6328 342.221 94.5938 367.874 91.7813 cv375.513 90.9463 379.898 89.1738 380.908 86.5166 cv381.34 85.375 381.095 84.1348 380.25 83.2061 cv376.042 78.6016 364.752 78.9531 354.499 79.6406 cvcp0 0 0 1 cmykf354.873 69.7656 mo353.266 69.7402 351.748 70.3496 350.598 71.4805 cv349.41 72.6484 348.759 74.2227 348.759 75.917 cv348.759 79.3271 351.472 82.1816 354.81 82.2773 cv356.409 82.3271 357.926 81.7344 359.078 80.6162 cv360.282 79.4463 360.947 77.8516 360.947 76.125 cv360.947 72.6719 358.222 69.8174 354.873 69.7656 cvcpf354.853 81.1602 mo357.591 81.2412 359.812 78.9902 359.812 76.1357 cv359.812 73.2803 357.591 70.9326 354.853 70.8896 cv352.111 70.8447 349.89 73.0947 349.89 75.9121 cv349.89 78.7295 352.111 81.0791 354.853 81.1602 cvcp1 /1 /CSD get_res sepcslevel3{gsaveclp[6.0983 0 0 6.0983 352.462 75.5215 ] concat/1 <</ShadingType 3 /ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]/Coords [0 0 0 0 0 1 ]/Domain [0 1 ]/Extend[ true true]/Function<</Domain[0 1 ] /FunctionType 3/Functions [<</Domain[0 1 ] /FunctionType 2/C0 [0.15 ]/C1 [0.15 ]/N 2.20249 >><</Domain[0 1 ] /FunctionType 2/C0 [0.15 ]/C1 [1 ]/N 1 >><</Domain[0 1 ] /FunctionType 2/C0 [1 ]/C1 [1 ]/N 1 >>]/Bounds [0.37 0.99 ]/Encode [0 1 0 1 0 1 ]>>>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[6.0983 0 0 6.0983 352.462 75.5215 ] concatclp/1 {<</NumSamples 256 /NumComp 1 /Scaling[[0.00392157 0 ]]/Samples[<~-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-71&d-RgMr/M8_31,LjI3&s&_4[21t6UXC684lNK:/=\a;cQk"=^#$8?=.,MA7]@dBkhI$DfB];FEMePH$apfIt3-'KSG8<MMmISO-,ThQ'Rc)R[fq?TV8*UV5C2jX/rG,Yd(OA[^WcX]=bkm^r"".`lH3DbK\>YdF-Opf%A[0gtgiFiT'"\kNM0rm-a?3o(2MIp\=U^rVlis~>]>>0 0 0 0 0 1 []true true []/SeparationRadialShade} /Gradient add_res /1 /Gradient get_res exec grestore}ifnewpath363.75 55.0898 mo362.985 54.3301 361.979 53.915 360.912 53.9209 cv358.676 53.9316 356.853 55.8096 356.853 58.1074 cv356.853 60.4092 358.677 62.2842 360.918 62.2891 cv361.981 62.291 362.989 61.874 363.751 61.1143 cv364.55 60.3174 364.991 59.248 364.991 58.0996 cv364.991 56.9541 364.55 55.8848 363.75 55.0898 cvcp0 0 0 1 cmykf360.922 61.2109 mo362.564 61.2158 363.898 59.8242 363.898 58.0996 cv363.898 56.3789 362.564 54.9893 360.922 54.999 cv359.277 55.0078 357.943 56.3994 357.943 58.1084 cv357.943 59.8174 359.277 61.2061 360.922 61.2109 cvcp1 /1 /CSD get_res sepcslevel3{gsaveclp[3.55768 0 0 3.55768 359.322 57.9893 ] concat/1 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[3.55768 0 0 3.55768 359.322 57.9893 ] concatclp/1 /Gradient get_res exec grestore}ifnewpath356.686 14.25 mo355.565 13.2021 354.088 12.6816 352.531 12.7881 cv349.356 13.0068 346.774 15.8037 346.774 19.0264 cv346.774 20.6396 347.402 22.1221 348.541 23.2021 cv349.661 24.2627 351.139 24.7998 352.702 24.7158 cv352.702 24.7158 li355.89 24.541 358.482 21.7422 358.482 18.4775 cv358.482 16.832 357.844 15.3311 356.686 14.25 cvcp0 0 0 1 cmykf352.627 23.8369 mo355.367 23.6875 357.59 21.2744 357.59 18.4473 cv357.59 15.6191 355.367 13.4795 352.627 13.666 cv349.889 13.8525 347.667 16.2656 347.667 19.0566 cv347.667 21.8467 349.889 23.9863 352.627 23.8369 cvcp1 /1 /CSD get_res sepcslevel3{gsaveclp[7.23176 0 0 7.23176 348.904 20.1279 ] concat/1 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[7.23176 0 0 7.23176 348.904 20.1279 ] concatclp/1 /Gradient get_res exec grestore}ifnewpath364.215 77.9766 mo362.774 77.9385 361.411 78.4746 360.373 79.4844 cv359.289 80.5391 358.692 81.9736 358.692 83.5254 cv358.692 83.6602 li358.718 83.791 li359.257 86.5527 362.954 86.6826 364.169 86.7266 cv364.169 86.7266 li364.34 86.7324 368.364 86.8496 369.454 84.9541 cv369.62 84.667 li369.632 84.4043 li369.663 83.793 li369.663 80.665 367.221 78.0547 364.215 77.9766 cvcp0 0 0 1 cmykfgsave % PSGState363.778 77.4023 mo360.153 79.7656 li360.153 79.7656 359.329 82.1338 359.626 83.6553 cv359.964 85.3896 362.632 85.6143 364.222 85.6699 cv365.808 85.7256 368.669 85.292 368.794 84.2217 cv368.922 83.1543 369.494 80.0225 369.494 80.0225 cv365.491 77.4443 li363.778 77.4023 licpclp364.18 79.0342 mo361.665 78.9668 359.626 81.0371 359.626 83.6553 cv359.626 86.2754 361.665 88.4785 364.18 88.5752 cv366.693 88.6729 368.73 86.6025 368.73 83.9541 cv368.73 81.3018 366.693 79.0996 364.18 79.0342 cvcp1 /1 /CSD get_res sepcslevel3{gsaveclp[5.10757 0 0 5.10757 361.863 82.6377 ] concat/1 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[5.10757 0 0 5.10757 361.863 82.6377 ] concatclp/1 /Gradient get_res exec grestore}ifnewpathgrestore % PSGState379.731 125.447 mo369.328 130.929 346.913 127.759 339.726 122.369 cv333.966 118.05 328.525 111.803 335.66 96.5088 cv340.978 85.1113 351.272 67.3711 351.611 62.2891 cv351.95 57.208 351.611 39.25 351.611 35.5225 cv351.611 35.3359 351.602 35.1465 351.582 34.957 cv351.831 34.6904 351.987 34.332 351.987 33.9355 cv351.987 33.9355 351.987 33.751 351.987 33.582 cv353.017 32.6523 358.244 31.1582 360.608 31.0068 cv362.835 30.8633 366.403 31.793 367.061 32.5039 cv367.061 32.6963 367.061 33.5342 367.061 33.5342 cv367.061 33.7461 367.106 33.9482 367.188 34.1318 cv367.114 34.7988 367.085 35.5586 367.114 36.4277 cv367.114 36.4277 366.181 62.2891 368.215 66.0176 cv370.245 69.7441 384.984 92.1895 386.677 102.355 cv388.373 112.519 388.315 120.923 379.731 125.447 cvcp381.429 83.6348 mo375.328 73.4688 369.875 65.0332 369.569 59.5791 cv369.146 52.0635 369.328 38.7412 370 33.958 cv370.04 33.8232 370.069 33.6826 370.069 33.5342 cv370.069 33.2324 li370.084 32.9551 370.084 32.6973 370.069 32.4609 cv370.069 32.3867 li370.088 31.8652 369.948 31.1426 369.255 30.4307 cv367.424 28.5557 362.601 27.8662 360.415 28.0039 cv358.694 28.1162 351.235 29.5664 349.477 31.8408 cv349.145 32.2715 348.97 32.7568 348.97 33.2471 cv348.97 33.252 348.972 33.2598 348.972 33.2646 cv348.564 34.8057 348.342 37.7002 348.563 42.6377 cv349.447 62.4004 350.761 61.417 344.552 73.4688 cv338.79 84.6523 326.709 104.389 329.587 113.11 cv331.704 119.523 337.042 128.021 349.579 130.052 cv361.737 132.023 386.339 133.026 389.35 121.895 cv392.737 109.357 387.526 93.7988 381.429 83.6348 cvcpf340.939 91.9355 mo340.939 91.9355 334.332 104.132 335.349 106.166 cv336.366 108.198 338.144 103.625 338.652 101.847 cv339.16 100.068 340.939 91.9355 340.939 91.9355 cvcp0 0 0 0 cmykf364.249 29.2246 mo363.222 28.2461 361.872 27.7441 360.452 27.8145 cv357.509 27.959 355.111 30.543 355.111 33.5762 cv355.111 35.1006 355.702 36.5078 356.771 37.5391 cv357.797 38.5273 359.146 39.0439 360.571 38.9922 cv363.526 38.8818 365.928 36.2979 365.928 33.2285 cv365.928 31.6787 365.332 30.2559 364.249 29.2246 cvcp0 0 0 1 cmykf360.521 38.0703 mo362.985 37.9795 364.984 35.8037 364.984 33.2109 cv364.984 30.6172 362.985 28.6152 360.521 28.7354 cv358.054 28.8564 356.055 31.0303 356.055 33.5957 cv356.055 36.1572 358.054 38.1631 360.521 38.0703 cvcp1 /1 /CSD get_res sepcslevel3{gsaveclp[5.06331 0 0 5.06331 358.574 33.9229 ] concat/1 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[5.06331 0 0 5.06331 358.574 33.9229 ] concatclp/1 /Gradient get_res exec grestore}ifnewpath367.567 32.2979 mo367.496 33.1133 363.365 34.9316 358.742 35.1133 cv354.315 35.2881 351.614 33.9121 351.468 33.1563 cv351.361 32.6133 350.837 32.2598 350.295 32.3643 cv349.752 32.4717 349.396 32.9941 349.501 33.5381 cv350.001 36.1074 354.567 37.2813 358.822 37.1143 cv362.437 36.9707 369.301 35.4629 369.563 32.4727 cv369.61 31.9219 369.204 31.4365 368.652 31.3877 cv368.102 31.3398 367.617 31.748 367.567 32.2979 cvcp0 0 0 1 cmykf105.405 105.415 mo106.998 103.066 106.516 102.158 107.387 100.343 cv108.336 98.3691 109.572 97.3203 110.395 96.6816 cv113.202 94.4971 120.864 88.4951 124.431 84.5166 cv127.997 80.5371 129.108 68.9219 128.485 59.2539 cv127.861 49.585 120.688 38.6699 109.772 35.2383 cv98.8545 31.8086 82.0117 28.6875 71.7207 41.4756 cv61.4277 54.2627 65.2412 72.2891 67.043 80.4639 cv68.8594 88.7285 81.3896 98.2412 83.5713 100.112 cv85.7559 101.984 86.5205 104.104 87.9482 108.509 cv89.0107 111.799 103.812 107.766 105.405 105.415 cvcp1 /1 /CSD get_res sepcslevel3{gsaveclp[49.6373 0 0 49.6373 83.4688 54.7139 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[49.6373 0 0 49.6373 83.4688 54.7139 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath108.835 99.1777 mo111.114 97.3125 114.563 96.1621 116.098 94.6885 cv124.464 86.6436 129.067 84.7578 129.886 71.6611 cv130.387 63.6455 130.571 55.873 127.375 48.9004 cv123.666 40.8164 115.981 35.3916 103.879 32.3193 cv88.7998 28.4893 79.3975 33.2891 74.165 37.9902 cv65.8438 45.4688 61.6445 58.5439 63.4688 71.3066 cv65.9492 88.6631 73.4346 94.1045 78.9004 98.0762 cv80.5732 99.293 83.3008 100.543 84.9766 102.14 cv86.6768 103.763 87.627 107.442 87.627 107.442 cv87.627 102.439 84.1807 98.4453 80.5498 95.8057 cv75.208 91.9238 68.5596 87.0898 66.249 70.9082 cv64.5527 59.0479 68.3994 46.2725 76.042 39.4053 cv82.8154 33.3184 92.2041 31.5762 103.188 34.3662 cv127.015 40.418 127.169 56.6162 126.146 72.9775 cv125.565 82.2773 119.365 87.6504 114.151 92.666 cv111.947 94.7842 108.99 96.1074 107.417 98.9434 cv106.822 100.014 106.582 101.766 106.497 103.389 cv106.497 103.389 107.181 100.535 108.835 99.1777 cvcp0 0 0 1 cmykf109.971 104.119 mo108.076 102.28 104.123 104.046 96.7178 107.597 cv93.3818 109.192 88.3623 111.598 87.1045 111.4 cv85.4717 110.444 84.4785 111.119 84.1221 111.466 cv83.2705 112.289 83.2764 113.674 84.1377 115.168 cv85.5654 117.639 88.8232 119.611 92.8896 118.45 cv98.9268 116.727 108.271 112.396 110.141 108.167 cv110.939 106.366 110.882 105.004 109.971 104.119 cvcpf108.86 113.143 mo108.403 112.989 107.905 113.058 107.506 113.322 cv104.827 115.108 101.117 116.308 97.5313 117.471 cv95.7979 118.029 94.0049 118.611 92.3643 119.25 cv90.543 119.959 88.624 119.926 87.0801 119.902 cv85.3271 119.874 83.8154 119.853 83.1445 121.211 cv82.4824 122.551 83.2969 123.984 85.1396 126.314 cv85.5439 126.902 86.2119 127.293 87.1777 127.505 cv91.2344 128.4 102.211 126.19 106.692 123.021 cv110.476 120.344 111.128 119.468 111.403 117.844 cv111.432 117.68 111.456 117.539 111.5 117.382 cv112.076 115.367 110.608 113.724 108.86 113.143 cvcpf92.418 116.155 mo90.5518 116.688 88.4619 115.977 87.6895 115.441 cv87.4854 115.304 86.5205 114.082 87.542 114.493 cv89.7305 114.336 93.0371 112.808 98.0605 110.4 cv100.957 109.014 106.674 105.723 107.387 105.852 cv108.101 105.981 108.013 107.21 107.943 107.363 cv106.835 109.875 99.2959 114.19 92.418 116.155 cvcp0 0 0 0 cmykf108.339 117.32 mo108.264 117.765 108.198 118.146 104.896 120.48 cv100.578 123.536 88.8545 126.22 87.04 125.097 cv86.4092 124.705 84.1895 122.345 86.5566 123.008 cv86.7207 123.009 86.8818 123.011 87.0303 123.012 cv88.7471 123.04 92.2559 122.48 93.4912 122.148 cv94.7295 121.814 96.7207 121.002 98.4893 120.429 cv101.952 119.308 107.689 116.111 108.208 115.594 cv108.726 115.074 108.495 116.485 108.512 116.514 cv108.512 116.521 108.512 116.519 108.51 116.529 cv108.418 116.848 108.374 117.112 108.339 117.32 cvcpf103.11 127.803 mo102.551 127.449 101.83 127.492 101.313 127.903 cv99.6924 129.202 96.0938 129.378 93.9463 129.483 cv91.7529 129.591 90.4297 129.653 90.0723 131.025 cv89.9502 131.5 89.9268 132.413 91.1689 133.188 cv92.0869 133.763 93.0195 134.437 93.9219 135.088 cv96.4248 136.889 98.3975 138.316 100.161 137.805 cv100.929 137.581 101.53 137.008 101.858 136.19 cv102.829 133.765 103.764 129.637 103.804 129.462 cv103.949 128.816 103.671 128.152 103.11 127.803 cvcp0 0 0 1 cmykf99.4785 93.2529 mo99.4785 93.2529 101.038 87.6377 101.662 84.207 cv102.286 80.7754 104.781 73.291 104.469 69.8594 cv104.157 66.4287 100.726 63.3096 98.8545 68.9219 cv96.9844 74.5371 96.6719 81.0879 92.9307 72.3555 cv89.1846 63.6221 84.8193 64.5566 87.0029 72.043 cv89.1846 79.5293 86.3789 83.2715 85.7559 76.4092 cv85.1309 69.5469 87.9395 58.9434 90.7451 62.998 cv93.5518 67.0518 96.0479 73.6025 97.2959 69.2363 cv98.5439 64.8691 108.835 57.0713 107.277 66.7402 cv105.717 76.4092 99.4785 93.2529 99.4785 93.2529 cvcptrue sop0 0 0 1 cmykf90.3955 16.4082 mo90.083 4.55469 84.1563 -4.48828 86.0273 2.37305 cv87.9004 9.23242 90.3955 16.4082 90.3955 16.4082 cvcpfalse sop0 0 0 1 cmykf111.643 23.7002 mo119.753 9.35156 123.808 9.03906 120.688 13.0938 cv117.568 17.1494 111.643 23.7002 111.643 23.7002 cvcpf67.7871 27.8125 mo63.2148 17.8213 51.8672 8.53613 55.1016 13.5391 cv58.3389 18.5449 67.7871 27.8125 67.7871 27.8125 cvcpf133.163 36.4873 mo138.778 32.2754 151.877 27.5977 149.538 29.4668 cv147.199 31.3408 133.163 36.4873 133.163 36.4873 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/CSD [/0 /1 ]][/Gradient [/0 /1 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Sys Admin) (Wonderlab)%%Title: (WL_logo_color_w-o_address.eps)%%CreationDate: 10/20/09 4:43 PM%AI9_DataStream%Gb"-6HZLGkE\DaR5_"Rg7jfQh%tur=nr4;K2VEFnF!\ecXCHt%U#9n"dTGR,0eZ\me)1)b"/tK;N^fe+GC<rN+ur>k:d?4eRE-1.%qWR;Fp%,*-Spts-s.>p#>M-qt[Q1.#Wbq@T8,qo.T5IsV1c]9X:2"iL;tAEtT%"B'4],"Lo6BX"rqc<Dc1>"D^::qlH22K)Is_4T%j_*>SgT0W^2BSLhA,^ZOm.P%@s5NJ3e[D#.^jPqNm.I^>Vk:`<HZJ`;1[<S'^uMp%pqOJSqX3LP/cT%js7lNgp@Zn(0<*EiVuM!3%It!5=e8P0?O)J@<U+t,$rG4a2f.ULehq<6<rpo^QYJ0f0@d?D:m_7P+67r5p!=_uO#2]=KRt%"mr7TY<h+=EG.FCB347`%,<7,a"%:UH50a8bk2S*ur^I.cLae[,/9s)'K[U[L!VaF4$GpAW1amIpJ?k/ZlLRk$hkl^LZQ-XY]brHN\^l@tWT\oNtCEQ\&?riIbd!Ou.`%`bf^,>?d6)N5`DSoBbV;caJ>9\pjANec!\[AL5'<FtIKSqVp&cBE*`&-+gMnXU4VqYA\>cr6+\EY6_tWY`h3Ca8;bn\"@M)Is-<g%L#m=Pn`.5<q!..`G;l^]qX/9/""?W`:B*]rEd@?LbmRZY]\n\iDk;H$s##l2O`-B9!r8s79?ZrB\%ZkVPMareY7c5/kn?5<H0_ug%&q!8]oYl`$h`Z>c=e<'_Jp0OgIsCMMkod/Jd(+Pe\X^/BB[oo$j8oNO?TIt9J#8059epCNs/T3[cZKjgrjtCT?Ca1Rj(!Aj=5VJe%G^f=EOQT!cVR4;X4!T?&IX^tTlEfm->20%[S,_98rVR"L^sRWdid3-L5#(gdgDMh;r1jd,n/["<;?"/aj(We='XT=n^QjCOV4^g;%qn;Y_9kZ=WBJ\%cG^>h*C7<KVs2&ueg?m7%\&4EA*WEA!U!8%I^[Cimi9C1]J)B_V)&]]<=2lJ'PeZ3Lqg49kO740l0IM6</'Q+I%.Y#?pn/Z@",CIPE%28:`k(N3u%5YkFoH\[EShVI;a1UpU:s977'Ptqhd0fK^GI6&l!OMI8a9BV97DTVNbEF]&)81u7`[5WEaDHp<%L&?^,Qlj&;-Wra'[JWa"$pW,Ho<T/IXN7`8+26bobYH_2hdtl!i&b+NIeYOr-r_C8Q1s<u7KXL<d>tDtN)-[<<e<9JMp,EqO-.Vq%jLs!JXd?E!s3LtV1WmZ&n?gDCregO14'Dr=@t'"CGo#;b#.*'3A<^qX7kc</&F).l2HhhM_oRO0KGJB2fU<0(ATWNHH*?-8,I\Dm%\]NLOb2+babOb:Kq+jI44&`(\em*/=4m_u/U#3-0jdF@`[Tget1-?$"([<oi+7t>d#7]?]+003[*p\=g)(+nG^kRj!`bY%.IcX/i%*WLne_A0c`(P;Qrr074ZP2F;Uq/>k%c2nkJjhG!\p[M2]CJB7rc/.:K^XH-WbP3OdSXmmkj/;gaq<7`]+QKBtGB"e@O.Z!8li.8U%a4fLaXK28:^WB9??V%enpZK9XpSY-bn'<N#Eu7,mgNoFnroSCTau):echZH5/atFcP2g7$fS$.i`P;?]J#AnA$T1b=:c%_EZo^]<%lfGK.9])fIL!tc0COptjC@=WaFgl/>9C#F1KqkiujP:XXg@H9/m<PG*F$Jfpa)grdIM^=ca3O_Am<@$YitdS2huHQqZi&BqH7s^6%WII1[K%jp`5Q@5C_!gDl)3appiOc&u@qN3ZOlMFg2goUQ+6YlY-Cll"LO.pWl0n76STD(O$UrY$hMG+Oq!c`g7+R!0'M/[VJZsrZ%XoHX9i<&JD^ZfS)QBp`oHi&6`DYQ>2/R\k9`u#-//_M[0^@?Xjh%"l&ZePcWJt@gjopt+N=LGomm+]6+Ic'10VF"I)r)GG20n]Jd%VnT4qgL\X9d1"?QYdW06"=<Y<6uf,b%OsbVMdCO*7mC_KKLa8;@.N0*7BBaS\ru5C]0lsJf6/uhqEEkTf`O9B;*W1Z;/3c-fKGuQ%d;/k5Qnm85AXrY;.seK"76?]HMX\Y:*\M![q\]k0)+W23[&CCZf^NVGF]rUWfOKe'*iJBBTjs%:pUBIQ_Rr26NkaOe_^t8Z:5+Hf%F[Q=Q'@qM*-%R`p/U6Aj0DDXXrbD5X,#j,;$e?#)KQ5cBJnp=H-(te)6V1kj9#nT(HDNRVLMa6e.'o)idI/Y<<oKFk_Ze:\kp\<9%0ch_?#6!TN`5tS_n7p0[B5>t>*p[92#)o(OS8`W`(lL.fE"Vmae2I"XE(qRekW>a-f7c@>=E2?9X3?"a+?Zg1XH!Ot"FCotNP-RL%?L`OX\(RoEQT\&aa1M:dk510i55U0_:Ohp:.qq/!3t)U:H\"Y6+oIW)N>9(((UG1Jg56'%B=$J5K:)Ui/'mh<fdZ@`K=`np$?*uA%X\?]+rFjI(@#r_0\XtM;NZG\%4'nW[UsKNnM=c5$?gr@:M)Lpq%X&n*cVGY\77K:`OP/C&=#mu2.G.^o7j._jT@NqFrsmUDc>g!(%@@h&r^7VSlp9j8S$E;HT(Qt`Akj%/Hm>!5#m24.;?@@FWqfqLr0;"Q!_>,2WAbB\6oKqWgEp^J>;.Z*+dV2G-&F[Ia=4SGaT!3R8%)-K0jCV4_Xb+4H=>E`3KgB4tQd.JbS*Xi?6<h;<`)4F(QpGrB/M.<^3Q"MRur8%r8/!U]):EB$dSp<@A3ZtFuB;#mLl,jf)mJ>*;%`]mI,bVY_'Anrdo(6(u^)t,sLH_N+fdE9V<'HDM,n,#$/j5A2/N`j9"\mjj6UNh"QcQ_#9hRuNg>&hu?gSmt]F[nZeE'3=o]_['F%#LNP:@dTlf&>e#s%'oHe12i?[SZh\u#lU1R3B2ZTl&adi2MtK/-!:^`;Y[BaeBkHMlPH+2:$@E`];JT]h6apiAhJitZHf7mISNDR%lV;ih68ZII]C$<_TT!6c[!\Un35BRj_%l^gPNpGbc4_W&=OnSa%VV<\2g2d[V!Sfna`ASAEb?:,c+TW6F.q:9MA;t7hcIOkbd\LQ%F^W`7eT+jV/Z$3t0@X.NAaJF`3JmAK>a6hnl5*TCemKlp0fr_o-3!h?iqu,He+ms$'#(PPrs:+SH!mrVPg7r=HTIeXX(L=:XR.]k%S?;24qH)@D1WTUCh`$tLfX!EK$i<"Fe%s<_XR08sVKl@'aa;kH^S'tJ-Bcg&?%'tV\+]KjhAk!)I81/Cq8P2P$p,R&TCsg3QtuAC%C>-VF??G8RDj^f'4#i>tU+,L@c@Vf[kbD(ET5Cca/r<U9pljs,U:74F!-u?GQ;.On+p608RJ&,*G=qC2e&+r5<W9#,qH^i!djB;%%FKeLDU3YBDi/o,KguqjA?;c?EX6ESL>^DHZ\iW'/eRBmfo0AKcXtl>_,6(Y5l"d"+\CrPN5/HDeOa"WbJ'Gn4._^QD.&FAT@>n.U%ciC**IIU'XPFT[Jk.8!V_`f&T!.9C=9^,5M9g95=%==)WS3@G&F;qnC%f.f/*c<dbp$Z"XG<=I]]_9tcB0l^Y%]VN>,ol@B,sPcE%mJLTd/c3(8S83ZHQ!;Z;Ccu7dOSpl)kB#SllaG:Jl35@*SmO]$<41YPo\HR<?Kq]oIIA="=;l]#cr\2Q8FWbe[/$:VdK`/Ach=2M%KBI/uU7.)l\c[&-3Ie9(5<GG,)<J6Xq2Akl\&Z+S(WqSBS9[MT)Jc0ONh%*^:A%Rha&B7m#X@8'd.d'!QR9&hmS=pq#&SM2DK,Rm%]T3BI5cdk!HJsh+_h*;EKj`^[Z!D&jCIE*0T7&bu>3nK);[lg74_88.U&j?]e%Y/,ekYV3I:!t/#mXWtcMss9Hb\&\k#SaTIXc5l%`O[SE?*+lYXYB"QX'OSP$SCj?oaqK^!6_fD%(AmTg+C-g2U%^BU:7hiEej=Dm0sTqL)I01gB_#_^lqmClHc;+iDssbmj0OkXi[Pr%c`4l(ea^HK\5$UOo5/Q,W)81MmH-KJYu_5b_M]Op`5X**mBg9t"eRo0S4s8J_P`B7aVUO,qq.FBc2".4qm>%ELTT.OFdCIJUl./p%AnJA_VT1CZg5ks5a%V[7ZnST.-4u7dTpiD;ZmdA#Z29u<<2e"h7X16On^(n>&ZjeJZ&8KufT$1>5L%W?-aW]+mN?";m'&)M$-"g+%e7*7mR;^V"2Qep/1h_D`j_Uj_eO$LmTloSZ(gjtDcVAGqB,BPsFOlU8"LEnVO#Z%=#t)J3UO9"q4CS.uMi$BQ@Ng*KIQ3sXq+kfX%@cJ)(@/^4tY17__HBqGGYCTjC%F.'nO#7J!e@amfdX3pVURLkk2!ha]RJ+Z>`:7SM8'PUY:tci&l^>>fLA?;N(N>BO.(.B%_#nkp%E)kY$EXnSf.!#XMF`RJI<C>*1Cb#\gU`Xl^$4WH-.,,\t.ls*!X=uI:XR^HFlC+hor!ZS#Z,=:f>a4XJeYk_"Cc00b+QLLkOqY2f%6VTY54.W*_pP;Olr02\>jt/;P2k8e3P[pp`akHI*SeVdtnC)s>fZ0+grjpsR2[6I3>?l1dqk>m^L"Z/83iq81.%g7aq:q#[j"ZAb%9@R9k@D%G@l1sh#b4"oiiIR5UT6B+ed#%+.Bf2Kd0D!p&efBc2\9MglX)gSh1tOZu^.X[hAe>\`M:#eA#W1"]AVG.]O/Db-<0H2n%lE`7gAI0(3\Hq*R=?Vd7Jm$hA`ad8s,T`I1A"e.g,hDD09li!P_7i].Xm1f2e`YNMKTGZ''GR/VgS`#2an!`)Ymcu5e/,J64;C#N%2PFHnf@\KKrAT'*Hd(!+2E5a7]u>A5??KMhOM0DI?R-47>)M^_*[VqdXD+8B=5hts@Y/%]#`.*+nm?W2Bub[imcuh2\j'hkr-9fe%Bmk*nr$`iAjBoOr4%(%%[$\9T?ejPqIj]a3s5q'Y^3TDJ7g[f-hnT-fSm"@*Nf^frkPU\?m?b;cktceREW>mUIsh7Yqp!0Z:[aq2%CqmW/p&4UNp?)2"Q_/(/-GOH[$%cJIHZLF9PH/=\Ie)(h^3Y@'aR?QE4Sb&-lW<__!lhtr^OGnAk*J/UI#TPi(Yc84Y?uanrTaC]%[Z>A&V`mcX1DK6V3o9BQ5OeT/kCVsY2edo^2k@[-oiLl'CAmW@k`:5<^$i+ADkDIPip+SQT3\Y6@--kU:%Gc#nZr,\eVfpe4TB.\%hgm>.^3amMqs<G#TZ.l1bGuG_SmC714T>0<X.-_.md9r7chB*\AnY]<`Uc#I\+`,4#2(/$c_#+TpXP0DhpsZNl-I\I5G]C;qg"k)%rpE:0`GZiJJ+_h2&,4WKHZ&ZS*Q\$LlM8tg/]2q%?p@&o`6X`#8RT6\r%0YC3U;%aBG7jfcY&4,%kk)W4sQZqg%OI4f2&!nhJ<Y,%p$U9?5+SQH2@oh%laPC&e'5XEgr>nHVF]Tmo))_8S$;kTgTq^gg]+a&B5Yb^F-W?fg#M*5IsT0VIj0B*IPQB[Ik!W$qUYEtn`Nk9%BDgHQk?L4fr7U*DS:9NNnmB=J6f/N+7._5m</k%rB@>*TJ'Rhqe'C%(0)3=3qb>^5`ug^Bd#\*kplkALpf%";oJ?%#PWrgUD!9W6%5NhsTd*Ec*jS33jPGuW-m(^c:_Ol_3L;#PE9`-p$cP_4Ur&N[4:Kfp$8mshU3qFB<G0eVF4JBttBKG?5*p3]fbk"pL^E'MJ2YnK[%5@((5Ftg*2,#Z^sjI.#:&5td;B6fiio0qLP7k5Ye8ZCcK8hH#d;`QFBAQR1#`MW"&,I.T._,PJ-#csiJ<);ftWTArTTOS8T9-E#e%QK`ZOBPesDj,=IakO##2-V(NX#k)Ip""4gG5IG3o:8bF42k<_\e,Ii/R0B$f3mDW=SDlL^+Y*)*GC"^aEOnAU7"Tt*/=k/kcH99Q%CM2,Ym.BZ2Cj1&OG&atJiN*`,.I"''T>DB-Bm7-Mg[01I]8I]Hh`MKM4=:Q.kOV#T<'-_t:X@A4G6mCphf!3.GbR+C5e>#Qje?(g%Ms96nip:,uEIMnIZ/7WH4mY@YZ;D-dH:l\"TYB6":[^<ApRT]Y-U+XJ)G?f%"WEpngXA^>BuFX@nqj5?Be#Mt(!jaOB'<"a1u!)?%obl#'+tQ^17OGc9_N-o-4dtk_:3\iFr(Vjb8f5f@BTZ-X-V$5d"eg?7kWdl[UaB&EPt\4lBpF&jeJkr6>.l^q`JKn]<qr^.X`:#A%-M=cOd,OMM#Yp3n)NdH3njl.q@70ZR-T%QgF2IDadF(E^<Je:B;&KiH51<YtW/m0?U;U!)s$jq0Le&0kCET?o[';6>Lj)82V]2Ar%7eBuBc4eTP+M)d`KfQ'EE(7HK@N0TdSW[ZY#@]?H=O%()TH1;5;drXaQrY@oQA?W9NCU@\*"<5/NY(>\U7u)F:8Y`GJs$)20i;Db%Dp9LndRY^&>cA%$GeEk9gL'KhfunU+5J(d6^[;9ra?.%#g.p,/G2M%Qhe2+XjI)NAQZJsC]_l2<bWYS7P&eC7*(dHUT1M8Fr&Nf`%DFMS4=(GR'bIGe``%?Y49":^V4'Rhe(NUJ'=V5X'j;&@\Y=Q13,2pg*.j@`Bgd8mR'a^4-,[B0,Lc?,i$OM$k,2q=7KSu<7&Z7s5%+lT:',oe0*PgKh[mM1A*EOM*[6h7A&5*gR8'n%ULmm-HGahC-akJ>O-_J^dt<:V'P^159oP^RDT,5P:6WU*iUHpdTJ8A7e7I4"kk%oW:YJPC3s75*C>`LIC%'OF6]@7*Pcri6M)hn2YW37\.5j7,0mM'&Qb7DB9FImjeu/%uJ7!Q&(ob7,n)9`6CXnnUjKQ8L26d$cN%[%4%h(Bd]X<cGi72pX35/5IK/TSle<d<R82lGlbPga9k+&q@f9#1rCpc"9k+&q@f7*7XAp&Es+RSnC2MjUr;"T5h=U,"Tcp&Vf>%<l%H+ib&diUMLhgo0"dkC_hs7d*+rNo;R5ApMghqduTRf@*nW4&'gC>KT.ea;2jpCas%pq8i[412gcGlDaTS-In^!+4)D^-dNh%C3X>%P`r*)pNGP:W*9>RHicVZ?mQpIqf_\-8r1_UCj2@3*`%RIq%Fk8"NY]ELbcM.3\rkL0^S&"#'ik68Nqtp-gP`%[6siID.fW9ppW4h%Y#!Z%VfOqn4mDe<PKDpBa&4uJdhM;E3si=77:5;TZrF-EEnFe[ahS>0F%Z!KTtldU!,`&ZV`aFN&f+A\LZl&3;F_P:aNt[f8W3/*%F:sdQo*u;X<=eS+qh/2A'5mf&fT.jN.@I%sVjuk%0gak(ng5Gpg;'<?EQ/[56!K::e#sMJ`"8+j,tYUH1`eRZ25F3IBhC.`]%WBL%$C3Sa9!#Hs@AR[nd_A=?/@nac$,gQ^#rGG'=ZZr</^QA#)aURS,TRHb"0l@CeCO6"B]ULR>FHCKoe^G78=2G_[*A2k)_ki>$R\<L%[cg&DiF!)L2?LDj/go#&N&5Xn1Gm$1EY?Gk(dpM1)5G-86K>bH*0Gs,24G#!Lu$nLcbrES6skEdDXpTA_>XPU?+)uB2bGGch'b*T%gF.aAjs)gZ2/GpodeClD&'LdjIqUJ-pc!2l`ugaC4oVZjC4Z?/V%iep*/8l<9Tqq6[!p]_3q>K<c[5S`H/@T+^MKe7a.I2JombH*%=MBtKY`S;A,kTnZlMh3BhdhqL[#ZSOP*m`M)NZYD9Va#(fO'@%;^1nLJCd\W4T/ZGk]i/$:E21r?&a"o.P%G]AQk);Ws]si'"1"&%R>s@Gqi0$<SU;2lVK8*:RM[9p.+/95[m>4:ogrLl,1-pBV-6Vb<Rsn,*"#=NckDHK+EcDf>ZL1W:=VXuF,Yh-dLMtaSnC;sU@j2h%dO=$MST6gG#d)$'!t-H3SRm(PBth[T&l_>_EK0r4dWQ@@h[gS,Ju+>?UR(mI-\jH]'&/,s(LSuG"T?:!-f>\`6nt2sYLi<n0.nd-%OflE`IUS+q%S05ggXVXA0*=#;IO/RmR2/.m;^RXc[?D:F0/.6H3q!4=KMWpB^g<l_N3pRGHRg,t(:7FMA([ru%&4Yd#tfG.[4e[A%p4LMu4B6Kp+Z'MSGDa&T0gZMXh+9#HjJU&8:toqU-^Lb88Dq]/"h<23_6@FkdKN3cAfdes]=kp24!O3u<A(g!=fR$`]V)$>krrO9%KT2o5#d'n&&MZ96.flY`2kUa*n\_G98<6DTV)U]b^aelLnR<-98I:JH]&Q4fE>PP?.b97Qj^<'058R%cMs\n%qEY:l&Ec:D#YJKN%Tco/*A<EVn@fm+cB;WO>qp^NR1';.9Vlhr`i9dg;E,a^CbEj_USqTYN>]&?+S@I.IdGaHdq0N?k2TF/'Cc4d>^YV(MPXOI;f]c?-%*@5gS/MjVI9UD.0&J->Q"!A0f/_Tf/#phTbV-8%7>G_]?RghW6L)/KAq4MR:=gdU=!9XG$d+MMkVmBMH@DG],Wu-+h6fTL^WO&n'%.].f/kIM3P!W(0?-'4>u>*>gO)dj:!]'VtjQ$*[0O6pBZ"uP,R<l./W@WS%53e3,#FRX[b^"<(mNc:Z4+mr7@9>Z-u.&i,$f^`W^%!JXLc#`e'=+cq?d=P!0-&F?^lRF*Ou2Pqs==!)toYEcN4]Xr!<=(J1_=g&4k(r6VC7QYpecg(iAL)eXYSa]'GlWP:<Bu4!t0ro,=%pb[!>5VbHk]'Eg,+-Z/l;72\]"dZn2ThNtj4"[,0Uma_.e<3:qe3ALQ'\.p1L^K\;MLJ5=,fD*@,,1M%o2Bct`h-769slJ_`06t*%oifW_G^6E#7-?g_a?p]U;_UeG0E[6YP@^?t]k2HoUV/e/,X\&P+_4R;ND:,nKMo8%!@Uc*TS\iq5%mSMa5l8HY629O_#TP4N_X5n%3l6C[%K1i7He#\%A8B5b9W.Cu=B#c>=[@S`V*c@;"he&/2S^S";QAJ_YB6Wo;r'&rTKpC(/S6tU99_HA4uVkP!#Hjsi7Vd6YHrKp%iF!d`kYIUaWMVB.1c3`F",dLc6lH`#p-r0dM%^)+HYNa3]n_ujG0qi1=85V#M\-f1'@%:&gCf:&3?7ZPJ;Y"]n9hUVfD3(>E+$c'%Tq>,CX?-)M"WN*?1[lWt1F4--(RM*A!f75*0epJ^V'[#r(;1?B\:am*"9t)#.L@-PJb-=(PeV=mCBlI^0Yk$Bp0QqR3l6FkB<kGO%ENQ4%mVBnC;i:]0WZMe6%KXfk?YbN==%1hp6^iUYIRU"5RcLQ+K3k[[8m&!ef.)VC^VBiPbp]C[:NFU96m5rZ;;]?*;#plI<^oNh%T5I<e[u0gO)3CB33We;65r`d^iH:(\i+@Gj+%I'SOO)6o,bH7g/]'$_6Y4pNj60'DAUD&B$]@ffLF:[DU7R>4eF_]<dgb%j7%m75%G>)/n<ZJEZ0dRqZ\5guoLi5%#H#*t-ffQubM]*#)@>9<(88RoZn`h#pj=`%:!qZQ<cuo*p:-_!omSn2tZK)<-Q"Gg(Jmuq,FE30P%S[&INjrti,b%)Lq3lNn'`6st\7l"Eh?Zb;"Ot!f]!#VYqj%qR890JF>(k]9`k%Fg.2FA%;NhpL!V,qro$sY/Yn`Y@Sai6l)f$(oq%7-.;[E'K%H(c?O@@H`M;a7u2GMNZT"B)Eu`R+N+)%\bO"KPor.BOF\.<AfW/>"m&8S#2o>#]tYWbY3JkVTMhV$l,=mAh\N!eXSFP%WRQGFU0O,?Z7WCp-3NmD`Ca?B3Uf<>!8I<Eff7A[QF93j-8>9l71iJ)=2A*+H6'Fm+\t^7:gDC3?ahPQ.1!(Xm6OPPESbN3h(F9M%Ubn$>+kUpC99ot:^g[pL:#Sc"Ard0V,pSd('G"TNg:!g(FX9'&)/\*GN&I=\FhCDQlLp7P)DK70V(GVR3SUNd-bW-]=0+go!%H[6%&!;dK5ZIguaLM*r&raO+`9'"%(pmku/Lf`Pc%R$s3rmI-ZK3<G[n#gN%CGd,P[!n?OLA;&!\VXX)UF&"5oUQ^99`@;K6751VAZR>%@Du-5Asg1Wkr*2%9PZ@p#Rj&r*4.#&3B\NbbZt"p%_gM^Ys9<S':GT-4#p1.^K+2f3B;R$(Jdsk^_h('jG[W<l#h)SYeqp3nXp:j%9bq+%i`a+$S0tYJV'6:M^rIh!A]+cYE2plj\RJ%`0@'P@<%?*V66;Djc^A((&L*"D>a.Ef2_3kfSn-kHb[uu_8V"6_h??%e[#hnP%bjinbN,^>PM.jm)O`?oab,&e%ikucS9LKBtUc/(dRiu:Q5uGOWUO_;aS:jFi`3L@B6&j.`[Rgs@)(\A')?a#D,$:_O<Nd_OTp0oq%*Yg=[-WmR3nDKFB7DQ`tg/"XrXm'NpE,;IMp.5omC06$j&k,/3af+[&a])l%UuF//mIXZj<u39pWlZ.bb@30rSH/g@l5p\Ye0h-!%R4["Lpu(>sE(pDGL!mF:b9L&N&7VC/ntG>7I"H3;g.oNG=a)VS@tgUY/3"2n[LS;:hKV]0MXNtt2q?9&8A1;?[tfG%BccD:I1:.,%0:s_()^k%tY,."ElD#_TZ[3@QX;Pht6NVR:0!&[PlmLa4g+OQ;Q$GcqQ2jCD+\UXm"]@l"n#Tb$)'p-cA+/%HVG!+hk7Onu:#/sR%l1DF;lVZ!0&^2')Wk'5*&?TGSSS![RO<1f@]3c8q"h+D0eKRA\VqT9rnRctLE<K<67H!B]P@EaH2iG,u8Djo68]:\ZK.7jLAh\iS%W9On]P$24RoOUlr]#-X_mg==A(pf\.=_`0\N>so3L>^=.V=m2aJ9KeHfr.ahp*o4T4&pB&7A0p%LmANSkcE45$&k1BR$P$XhkmQS%(?%gf/l?K65u+Nj,XRW%H#UVMgj[Bm[FpToLW&!@`0je(KRaqh@qMS"<Egh[X_P[M@0itR]@#,V'8EW)^o?'D8AOb0>M9;/%2`n2%*=6Nsh:.!oX)77>IXI7Q7_DB9JDi0b@21f$@2NJ.<BH:"dEG_mO1MUL_eUn6'(3S?8aUsJ\p>+j_+/op`pjXm:Q"!:]0]_!%QP`,%T:EPc*o`P5M=aM=ji'\[LX&$8Uf4b<!1_S6PK)I6ho_G3]K.d)'&p5;;W&j<_Y#(jN-a]1/B:k3R'.#6et]L6j+PZOc"9e\AIB(k%VcHf<nL90]&ggNgpLEX>PM-66CrP'.&oFPFi9'.j!^)?H!81@F`u#+6Pqg3dK8qj%Fqd97Om];f&T:UU#=%HF,[2<.QZJl@620n@%FbN5==[c&9/$[1*lqdlAVe'EWTq@17r<Q,00<Rk!!:$l-ISOW!It.u-Mjo:XbkDTLj&SY!&'R=q'YS[h9W1hE#4Xl[bTUK'7(MY:%q-$R@WcU+g7FY[CHSg<U^G^FH.8dl#CicT0TGKc0^r$$B&6Eiknk(jKHV/Pt`@NT>idLnJMVkH+TT_`R,(gk4eIuCr%OM=KP-Yb!%k#dODQL&,qA!ZU/P8oS(TY!M%@i;Ng0pV0^=&EmDTpP'>C$7*Un"&BUJX%V`<KqUpV<HG"jErgs7?jd[>E0&p]uWN2KWk1[TM1aF%k+eI:,j2l3"$<`>1M/@u&J5W$l3$(1^8OJ#"<sJXJhj`a'1!-ULob)r$!$PHLJFB@_X7/YYuVsSh\rf-/Np`Qq!b`6Z\?VS[3jj(%,=hs;%9,-!9,p;V5ss]f+9,s3\Gm]10]@XP_fu:b<2Hb@,pZkOKK,$I3J&fW@3kacm]/pr?,354g4Kr-=$#UN-]T;^=^)h&dmf8t%-E8Vo.[6`!6RIIT^BP\G2PuL[>A&D8=g,m+[:g((%uSpCh>"-K*8]LB46TQ].YiS'NRYQM%Rfs+_6]^W$&I(6l,(XqEu:l(V46r`%9\Z:prk+V4fKPVFH#t`<SH=%ig+d$($YhN;)-^qb,dO(a>q,rQV21j*`bJ.4s3@@cee9k-2,dbr\#V.-dE?>?;)EZW=+r8:'Tjo<%"HE2\'U:7S#XO/9qGPpC@n0.]7sI^:K)or^93P/Z"V$-tCki[%1g!;GZlY0(LJRh<eU4Hn/+%<EJ;1*:1t\AObV0t!oZ(@*(RN]s%0Hm!Nb!L%'EJV@bjTFG28/C,'U1nUA.;,m)j(T@$]2$(7PkdTjXI+XL_)-V?,\7lq&;bA*V[GP;WlA&6KRrY"?Vp%?=KqW[6ZXr<%$L3706e("$;*RILj*aa6$6*eICp9R<Wn-WmJj>\pKRJ^jE?l7"S*p&o2@bCbLgEb!'iC9,*251O(:84T9%N7NVuZ[fBtGq3F`<p@%50TI1ofIWY^k]oe;:!3OF*IhGV]_4j+rUZa.n-k<R"krH+IL&uK*mQH8:=E4ZO;X"!d7(V%eU[K+?9OV4Cdd>3>iu1eHibZ)FP[l%.Scc3&gtt0]'9^09<)!<N=64T4BfrtO&LU)11ardTkc^G:Nh\u(9_*u6)aLr?;GeR-8F.^r()Dae-SJJaK`d;FB^$F6[LA?95:pE%_$tiM.F@6!8N;A:"$9!ch1"2rZd&<=<uC!FIl%3d"/<6K)O[/.7iq9E(9*Kj:nF1(6NL$uZ5@_RG\8ph'Ug*)/`m-j@5>SK!_LV>%Tt(4Y+=N"s(_e2bp(Ht8o#eVFYuu;i$u[n(T!m>K2)GrI3)9d`"49*D*)`rCOt]SV]-7E2RdAN/@dfum_WqfCjt+ZJ,c>;&md+n`%ahq]R%"H4J.dnN72EaH*<ugnXgY2o9Q^JhP^b0%Gm,<51[ON9X-\`RD97a#n*-`#9`BKnRa@FoFS1\,L+&X_lphI2ha\Q>N2+mk@%-'h[WY'%FV0_+2bIH62W(9*:5Q=Af6R<Xho?0U<7()@^>Vc^Tm`>a(/][T*8`PCD>_D&-9^]CVL'^>?mTAsi^+m\+WWn[5`K6L!4%X7P5B4s)/7iV;UfJqQOamr))K7]"SET(8sE3obpi7WJUqL@)_h[DcnSq,!O&pGf-&TF`u<+akOD]W*lLJAB9I&Z.%4XQIc&;\kcE%71Y5l,S:k/=M8Ss0nhdNP(9;Si7:W1!93Ld"/'j4hN%M6UJDi@MDPd!I@?5Li6Ll["=2:@6L$@7g^r+^rt507EXltH)5taH#kQYd%bK<t`YF'&tn#1e-"rA#67n;,UXLs'^KX-X-KDZNYorrnq-Ah>60%OqViQq*Ee+tUH[GqNWd^'T^,5?_kjq7J)<)mU,gpcm++ep@W%i?#+j*gTJN,9]\^.6n0dZ:)L=k1t(;8BJV/guG4q+Hl?s6!;N`/N`<,_-9-:^=ROR45PG02R&d6-?/^./E62T[Y_rpr^ILJKIrV;%os!J,i#jb^.JRoi%S=+Jjg('T^nVS'q+)['P@is1Ca>m'r1N^FbVC#OLL%tcl&j/@/V?$)mM'Ko8[YZ_ilJl8)$l+NUAeaLi$:ml%h:dYlHLgqP1Lc0N\-:9@<%3dC(P8G-]htV<nn]3+Z_Ojo+c@!C@\n=U558=kO+1P<6fVon4r)&H+RIKk[m[Vbq80_Tm6fp&?@ql^%C(l%N779qn#jYQoLNn';%c/VoeUH0n5?tFKl%0TGNG^dG+2$o7O>Yl)K0'c8H$cs*"ghk(/[X,O:rJoeLAjZmFj6Cd:V;F?i,iJS%V1F3&da7S:RA"+Dk]t#@<M)rM<_q=LeME*lV:N]F3k1/uql)6n0agugqSc#ogYu$Q-=8acJmju<=AgV/NBl?q,RNkG=gQ=)-GMqL%gj'6cZe*+lP7?Q,>(fl^$<V_R2fMui\;i&FK8TQF"rE$(=L'p>CcR:&RCC?&29s42U4nUNX9dk"e[)U9a:Jg/e9e-C]G\#U8Id00%)BsXC1Z#cmb9Wk&\I#XPNFbikPF^2jVscL;H)r>8h'7Xqb@"C*C];Ugp2(APKoS7B/S(R,\uu\jWM)C(Pl>p6\k[I\VRFua)\0;i%)uJeE#K6El"cI4q7Ku(!p4Y5PXJ%.:6H<?HdV"R&.2T:3"BC24JQgjJ"68BCdOB9eG<dAp??VY/QCU:'UlK(BWEGt_!dH^1`[#0B%b@LnhJ4CD#nJ2^88AE.64'V\//Z.uf9^G!J>R.]7bIX\-(*WO<f9hRTU<mDXHlS/#[%M5ngqj[>Mf./,/WT(]J.L[?<8cs?;/slq%H:WYZ6\(@KGhAuo2IE/#O<pLF_R`;=W0so*Q>Lc1OUK`=7Hm50Rq11p4gUA]0sR6%Fa_CRe.Efi-9JPde&ElSU=cn7OqGA2-e3*V%aP#8o:$>$/T#>H^8NJp%4oL0pCD2)H6.]pu6;t1c>USd?#e]](Fh<>s1rF7%HA7pnBOqK"PnB6mQA=2*,9U0Y/[QG>daNU04GepR%Od`e6Iis%f%\&k!(]?K%bE_cn79XY>PmjiBUD`;h+Bq6.+C(TKb/Jn"8uDt"V4PIJ5$9#YFLfh0pjc^G-TIi*E@7qfq<EE2)70gR%#gYi%G>::5V0-ge?C`*(J^dRj%oK&7J7?U9Y\IJjN<KBEp=66]lB-d33HpP9!G_Bl%Vm13&S\eX,P(VPGFR.!fdPWT1rQZ;A9+!R%O*RFe,<nj83")-1,P7L0M72B3'6S)JZ,ese9-GU2Vu!^qgRrW(6X_%%=Io9t]=Y,hetK,CF$/,eME$f)j<I)GS1-X:'hhY6!g+t'%<?cXa=q#N#I/)_:ph'-EC9=Z)g,MND8j6B[E4'-[#Y$6YUrBU5U.;.oN.>c)6TgrnP/`r03.BW<gZXjnUh5'55%6#SW7a7V.oaf;%/dFK*(4$*<-2#>uqS*)c?#hY'#t&)R9\")0N]60!1<F66#s2P>@E9mkP#r?L3=JnR@[BYApWjN_a<<e14].o('b2"6'r"Wc:KAS#%#[]+#j^f)PhM$Dp_l,:<X;Z(5"]Gc6`#0_Qg1&_HG`pTK_WCpa^oK6n!C]uj*[=_$@cTNte7s#D&=iOb2/Xe]IQ0WNNWsMD%I@re%,k^[OdK>DC4ufUp0\9D>;Fcm"1,4-6U/Dbe[^J*8noF#GVnG8lEIIMK(D1\qQnJmr5mLS!icnimV>Q0ATBOg^cMe2-=m^TZ)!aPD%XR<&ghIRAYb/'8,*^])3\o^6T+Y9XXcGHU:RfE]\3Epq*`dM]fBU2CkU78a#ojD[(KT*Zu?2pG`QN/d'.FX)I&&1N,eKSJ/n!TLJ%hiqq*XuI'=4dmZ;RQ^V81IV8GhXpUb%"cc^3JTRRl7Kf(%SZcI82t/Fpgae0F/NGE(4nX!Sh,'Y[qedbC*(>.Xnm_5d3*89W;um>%i\'sl,\<p)81H:45!s/Tb\?D$[&%it3odTp3:3do`1-jpBn\(@!e5c$a.?/D`Y"+3q41X?hu*qRN0rCQYd+I>QJ@Fe*HA3nLN\_P%8h42oJA&tgEnE+%1gujV0hc*;910"_IUK7eer<'!46ji:,VSWs9pTn7/BKV9G+2JDE2d6)4iD$`r=<.+cod7[.T`W]&g8G04qnl9%ZV;5nO5ghAN&6ld]!lZ",KuOV'+BMg6j.EF90&H^h<)OFYG11\<3DpCFb/-)_HRl?&Y$1)D%56N3ad-6@"&^#=OZj_dP2fi7ohL6%K<;KWQ!<EJ,tVoIO0%f);Jg+hYYlUY10<R[I$V?C6\6X=YXMT+"C>o$fEG**5j:II!-8\2mBjpr^WCMoU-rqO8`ESgM2s5&NH"#)%`_OQIN8?%*W@f>KQPdJ*-QGoS#a?2,,TX.S3<HSKarCGdl:^CoC,WY:)6+Zn^p8\qF]*pCJ7C6%dA)P+h80q2`Th>h%>LRS#;dso%A"Yfib'%q&U:4Qo^?BZ]VFMKj2=-@-^Ud/NX_BUn#iq`5-5!7%&i;l$e%f@OQF7&d,Bc&pC=;qfAen`Xrsp/&*:%rUpO_J`89m-\%?ruF>9P`S0,rg.+Fh:n%nc3oV14k@b>/8Puk/@"Je76U?Z6!jb7*HQ[XMM0G3AtXk>-rmQZ*BQ&5`krP$K9KlJtY6].TEaA)=":.%4qn<"NGhA9Q<[/bV^_7U2*3p6Bt7H37$>q1OA).'c`0P\A5\3$Djhq,-qn)`ludBF8m:k]KKZ>52od\^Rg%.tgS6Jr%c=[cot;V%%K<HbkT4AUnQ=#9``p)?48<%NPVj/P#=&AG:=Yc:tlnPT%kTHqRi-S$B#XFMp("Tm!"_riPRVG;3$j+t0Y"G9+J>.J4R52k*_,3XE%:j.TG5RF[uVL5`a</OP2r/o4*?$,>a#EB?GS_7P-H(cQ:)%\fSP3FI;:i*8/S7dGG`N+$]!T)r=_pW'77[9+/;YAVV@[7/LPcnb,%^u.Yi.kh)P6VcIk*Gkoe$cYJ:.N\fNCJ)NYZ/>T`,M0Af-!Lpg<PSY-:#!\?/2^o'q9UYE!1`rccko9c9N4%Q>r1ET?G9b'ijZTj%)")ZG[1!a_VCUc2&JgiWgoo\IfU>pp7rjhd<`C5#>C%POB.3t`#N/*]5SX;3Wl4TqOrWW6[&aA%Pq:bDkGBOYbXT&AlD!85@T;Xh%U;<auV)Dj$-#=]_U<Z#V<=tBIM[h>e>?(ecm':Gag-bIn3@ZC*!-9jGSsL(^YtEB=FeELSYiT=hYZ,DAhJu:;O_OqcT\E67-4MoQ%`3cfRb^!3(Es,.-dS^CM23H*`h>6!)"`IjBi%e4NW>]'Gf"p%pX:.NFM<!3&ZdXN)"J2X&#[/f,):e[4A>,]kjq]k8BJg6>G6W[G%8d$Ts%[`hRE2[o&&=b$+Qbglo'e&3TE"%Y`5,)Jd%bN=hS<#LPlLsNd=os]q`Q*uCDo'7N>h%#]LnLOM^LG6=Zq(NNmG:H^Bsn`=%qFt!47&u_":th>E+>>/q96>-P<mjU8[V(`qLkLrn+m8p5@@dT::$aVg<X+m(*^ui*MuhS[;`Mb'4(+B4>6?B)Or,^<Mo%L$.NM&[%D[MGd#68-;,8`JRW,f,3YaT)N$ZN+XDa.?olh*-A=I*?W[`OFBU0#0)6-[tsq[fDI#N/;*U'1O<SHglgpL$HCd-7ob8CV$1Pb>!M%h>Kc>=aDD#9(GG5:ngRND"Q4G59)r&kOaQk_:@$d:7TiT>=q(T1Y=f(3!nY^"ZAhb;jID;c9"`&jXFB5&?aGY>>k)VW80"%>#GN5%fdb#C*1DFY3Wc6/p:_>*b?_Zu8[_a_3.Rp."\kjk2HU(6\4j0ih&icWp%lOc("]*m*0#C4[67G$gJ3j'4otKo]`@<pDZdG%M%Y5M%<`\n/^^a>Umo1`*#YL^2[/i:JZ6pVC_7'c3El^T6]#f\7VgiM,%E7I-"QnoWakqNXU)<EX7Pd;E]aBcQl@kP3ne@ha;k7M?fA)Z-%b+<o.$4oq5[_Bni@9nC%D_k<Jb,f7eJ.g,4XJhuH*-5t>@ZiPq[T`;s6d#esbl7"`dU'+0\.O=Z//Ui.Qb;S%3n;uLHU11t!U?MK%Z[#nW(a^iMH(a%5pf>5"K+?YLEYR$A&VZ#s?@'&B<6kWdT=Vk9>-nTKG@sp[[AqkAbm%lg<^^CD31F&$ngq+]1-pM6Po;2_9YCE3%HthDmHN_&_YSOIc:gUHTU8>Mr:/<aAZZQ!m),QkhAR_/]eI1SE_.O%PApL0W$[04tNk3#6of>0&CsLf@<GcAOliE1"\el^6%&^]m%RAipp^EU%A(e:!H?sm&g[H6<J!QJOCes`Z]V&ZO!5;fbt>'<)MB7^:`L$h9rWW>,pZ9L"N)d"-2,/U`(P$/!jiZ^?]b%fMg75t+D%m7;nT#ub7a7pH*e6DXfd\5-h^*X0j?h'i^(keS1J[u(ThP%3#&)C1KbU.(bJ[5CUjS/a)JQ9U4@;F.XaXE$+`*,1]bN8pYjTLb0)%['f6`<%*Pcd5Y=#>g:WH$J)7;Eh*dMJ4s:1Ysh2cjI7/WB`uC]`E!1I"eVe1r3%=K1oUe)&nd<QQFT53PTT7mi%=c..Mi>03q7&]%Let.0=m%>UaGu>>d0?quU1'S#8uC%u<%S-&1WaGBea$pNUY+l[99r-I=pdE#ThrXk@dd]*W8"WI;if-fq8-l!KnG@ujc[51#:H.c%E[Y%$8noQ<j[sj@P`"+o?K]K]QQ5tD_7!L;"9Nq:bQjl^`DClg)0DN`Y;5.s./P33jA:/I,4,8k;b4\d.[J.V`:MhXHm/Yl#Jb6!%^),I5#o@ro!]J2"UG2B,bo64TTj#HkO,d[09:BT?`Z-LtSU,jr.`F?J>>6u5)Q=prm#1]lbeJG9/D'3gAW4&(F(#G,09VU>)*tH$%$eTIp*]#o?p"_N!=1&Se,B5T5Q-bL6ltGt'W)QQ_f'=GDTa3ui4g(*FU'\a^o6=n`9iPcu8i2A<`I(%W!m!sC)lHuoAHX\XH_)fO%!5i,N2:T=@P6;%i$\(I6KcWsNQ6YU.Y)D:oC.D;T,BZc9I*\LA*[["[a93+X<`MTSOX>*>>p(E]fSQ*5HAp+4\EG!5QNG1Cgd<!^%#\4Q.B\&1h6+-piWEE48[E?<h1((7Q;_)%oN.?g-r*g2aWSUU$!4>]V666;[>_^^B[8b=[A4*Gc9,NjijgXIYW5.PTa7?nifBTm(%Z?W,BWkAR*D4+F])A:%R(,iuOAi*\fh$.@\e#HqjC2D:fmraG9\-p6KhR("XXFE.F'LG6>26dCn=i#q=WRL3@nDc@nqV=Z8gB6BD%QaGJH<hi/b!ros^%e"C9)2%]0\I+mH_+AC:aP?Fi0Q=jCq_(RY^Oh.biG?sm5_ES#?<q+B45gUURi#S[E>I#$Od"3m8'\9,S5f.N%"X^ga]VS`(C(W!Uf1K.[BY[Ilf29Y2d\t@9X!7G6Td$$(099m3B*PiE=&9r'4)/a]JZ+.l,=<R6lC,HE[;$?l5g.GB[HF]:GI!$j%I=[KL1+FR7nTZtl,6V1mCXBfI!-g[8pU]Q7CPK:.*8p,16l)nWTtIL0m1Koo0U?@:0!4bUl",VM<!+YK5Y&FhVUq]"1*W]1GuS84%C)pWG!j>3*r0FI^=\F*+OfS31?$N?8.F4cXCU,ap`0YQjR(A7g'j,cJ?+ZV92Q\24?M@t>/a!>U.LM>@es7X-E@%u.qpBG0VYT<m%QM[gM1Oc?lFkJ\LSlT-CSX,T//i6UCXTP[uB=pN\lnXd5B"@,(i10U"bc_pZ?6DR\LoT1a&4L=[R%"i@[9gHc9m@`bA+rkWg;+bb%keX(&i*tsff,Wam(&5,@O3jriBIA#4qg843&`TpGLh+XV9WL-(n;(3H)QadTh.n^4?]5)eCVRY8=SN]qLYDH'FeK4*GjXTbMXQRa%)U,C@pgt4X^"/$ChY\X-Yl[m=M:nn`HAho8!6)U?aA[^X@[@4tJ\0F7_%.=g1(K9B&I,r4i*ZY\`ib5#KpMpLRC/<G5uX__<2RB9%E[F`g:9hu%]iVF\?PBTD;?]j+9s8[H7;`mGIKaDBciSHBK<^,QX$Ksjdn%,.6!"1?Rn__L(s`Iue,%H_D+ZsW10L+YHm[!-3?=l=%0T*J`*E36KC*4Oig5k(&27k!RHI]IP1A4uFEO,]\J7a&1WmH#jW$.C@_1lG>>k_O#jNlA'/X7)C,GHVRfs)ID?)DV<[(>$mGeUMn%Yue#2!P2UXD?f1Nq+-jX%b0<>H[Q@=Z?;W4Y#aLg[GYS^ahe%NfS<>4=G$,&jjUN&`sB3ClABlh(OM%1J]6i[p4RLpMh3'/eI8:e%`Ogj9c>H<G!CF&Ha[HlKh6YoX#1Yn`bNW&;QE?tIOd\5T\"\R_5Tn_X/f*c58pb$5JEnW/Eo/HZ[If:RfbB[l"U?:jg?_h:ZD\sZ%e?m"DW*'X5a%/>*FQ0udA<Qs82>-$f6qoAO0?IrtU"SFl;*XOB;:pdV(/W.Ed\0pE"`+s\lOps%D>50n`-1?$6&?KRN^1ei(+4/-%T[#ZlL&eZ&iD'p/C!sKu"nGF*qq7b$[iuomdkl2_-;-L&c.j`*!he%lG#!;6c6T2R!>&@o=FeM&4-cEB[-&<p2?;b,r-XU]HC:%a%WH5>"F^djtT>njQ++pa%<ZYM1o=X!B25WY%]CNhaB>+f%BpkSGK+`)^J6gb.jmlnhV$-,6YWBnWh:_C9mg%L*8SH:*@NaDt<$"uR%[1ij5+UYc\^nFe-1bN"VU$K&(K0u2kR`A`MA4`A;PD`-@S9g/Sgc6VSnctTRC3O_iQT!][6QfcrH06,.HV(SqZ\0`GI]3D7Wb;o]%N#PA(/sgo&TW2$/"pPq>hWV>r+q1\Z'ok!;7]R!Xcm(Lu;DeAJmbLA*B^*M%"h9l,X:t-F\W(c,U\[\JN.c?=(Q.E.70'f/Z0GL(%(EJ#PIA?'-*Jfn%c.QM3AIFr9dd2XcAgLlqDN`XI+VTB[,kVAh90L0d'+6CQ6Yit]M'1pLI$P=#]*X$_BoEG&^89PHpr7^ogTk*A%Tn:nJYlc?Eja3e0O#nf_3a)p9OhIVPY/-$qh1e`U)]F<73:r$QCo[%$8WJSS2@)r'E5PTiJ!+s-[(r!`s%QZa;_ZKQ4aBfNWI=/W%A,)\W/fJ(Cf(p?W0$-E#[iWu5o`s+Zl)R2ifI]<m",dcHcY#`^V5:h%++SbC@&G!!f.UFi0Pk^r?oO#i]u2*hW@N3AUW$AhF:9L=%_rP@uEj%NVA*I-[0sYV`;SVc/RXZ)"S`QYnX]ULOgkucgmipn__\fL/(B5Mh(9heR!l1t;S?T%-Eml<=Yc"`KJ>+HrP]=Y%W'1qF%bp!t0\>LG[[#R?@8YdJkdfWa6,*BKlS<q^!dZ*%+m<lZ5]9oGq0$@i<ZQ])J[l]4Z%AEtUnus[#"MeCb=i:7C>dT.7C[Q83#,h(`%rD(-1,#IE]>BhI^dlC"2Z<Sr?70Z7tTpMhqS"?,1MBAhL&5D3URcG](mNq)LBi*A"AQij3FLbc;^c*Ts#\7G.p$*mT?Q_`/2Llc!%0a6!K[+'-P=L+&K,^bP>+N!a-kVdKeNe>qGArDO-^qlLm:k!-n&dG8"/DgiU#)$):]fS<UB:FF8ZUbm:Q;Dn_7$4Uf1_?\B?H#B?%WrO#`PUcu6#u_5Fi]I%lc14Nc/;QW@$f//!k?0DaiR*AiX?B^a(K$5g_F>AYf2M_u_oc-s>CiO@_aYLpE$B=?O4kXh6=+#"-`]Fm%R^7:=+qLAZ.XS*0Js_=S1urpRK3/Oq8ZuRXqAJGW<&c$jJ538(j1P?lP\;GI`hF>"==u2;YEbQ!^#erMk/,dep4*Ej)kffPFZK]7%WQ7!gjsr*YX0Q[W:>IC\lp[o;'(#Z*YT@i[@^=R#[jG*W&?7.4DjasYo4tB7)p)_h"f6(A)XSrg3P:]RU-Ig6pU66SK=_?[E]t0\%n*"?STsUrXh\*M`H]/3[KR>X%Ct7_TeV$K]lf,f7eNK\S&`c]5gbYnF&q2V'L<V,H[@9Et8'bs_nd3UaUMpC@VD\$6^NpspJ#tha%74hOCdLNr6gSM:X-G/>L$&/Lh<OceBC(]bA"PhT\-daJWDH7NLa[f;?9,Yio_/>Dd=s[2&K!L$#>P\7*!>9\m$QKoO[B>:Kcp9'P%H;$hrB4WZL05e/?N+1*IWP5:adWdX@#L48:BO<9>M8=(L1bTQ1R@6sB\GN'R^`5iKYZ2\O6';JKA$)lO@Gc5Y3cc<J+lDVITOO:C%c@L64eq5*c5\Z^ibU=EK"?XZrUj<SA&a`a-%`l:=YdZ#-Msq"c'K.S'dArQ7B/+1)?T,])l\N5ZG;kF;oSD3rb*9FDZqR5hk4b7S%j3m6&f>:M:ETsM9A_'bb$IiprePpbHJOV_5hld^R%P2h63Jm6-Zt)7VNM&fG6a!L7k'!]:af5j?d8P!l&jYo8]XE7=HKc$$G7VO>%e>u)C"_]iZ"S#T#D[]n<Ots]^#XGpubt9H7YYNFSUW6K<U@LM*"!JKuP_BK04XL5Ai8.[!!BfG1U)6]RbI0Z\Z)X!Op"c3.7sq(6%'HN+<U:%_2YB!,^Es=74@r8",^'o/9qV6#IDBcgP.%+;:0D&@,Sbck7"u,^r/Y2##X]OklOj+Pd[<EJ#Wtkm1\4.i]oUcZRfK7*i%Rg0SA\4l:b"*;r.W3e6;/IYKtF45oLQ6"gIn`rg2!eX[9?@pd>13ijP4.m>&qXS\&gcDf,r7pXQ`5=;\,RFCBQ<_%JUl+kj[flFT%]eEAV_9F3\4aOZqj!@ccmB;QHk4o2Ec(`&MWkV,nZB^#r]=9j9/F'>hrJjd0=X^`oQ1$<$>d=]cmu#q*R]B_Geh#;D#^X$aG*%$+%dWcFA0,f6r#%bU<"..a5ZaQ7#82[hdlb.@p8<NPbpSZ44hH!mI&oiSA$h;?m'DiFa\H^H:/e<;3'`+>(G+h(BUG^?Y@L"+dV4&t0%Z+!amKC!Mp@/+\[#!?Q.T.a0/b@TR3>4MYu1rI+LEqOGn^0](\7`dEB5V,>jDCuG3[5'\o%:45:;+;oS)&$8R#m8uFkihUBFW3@k%CoKIZ1e1&SSa.79^$k=MkSW597u-Qs82G>fmh-auCR^uW+1,qMYZmUTjTARqrs$Vq?c'"?M"eFr1nR)/hT0E"Xn+9c2T2>^AW^3"%WIrV&+G"9-W%,)#`&,kLIo!B>%$kX69mr)N5Og3P?.>kg1Qe$t6uarW^!X)erSqA=0ES203_4Gg*9@I!AuE'gp>6m7d&[3]J[Mdf%`DLEV[^i\E]eTo9_G?!r&Hj^SOChElq][#0+c\"l*bE<f>b3\PU;VT*Y.#`&DH:k^G(Ul46`Y`)'?WV=;'`37_0Yi<J6&U-MQpEj%X4<+>.qE@]Q-CLJIC*75@W`=@8E#+FeV=Kua/H=)+&)*?IJ%I&a%0NBNe`q'=K00WB6NM^g[V"=4$#T^Zo%ui0#dA)Nf.Ek$sW-V%5s9s98AQH0=s\;$Ht&o0gc?=_fG+IQD,P3<Y$)aa^j6:EOW#m+M-msH7<F"[=4eOVi4u$?O+I!'hhhb'SAeD=8Kl%o!"=0r2n,&3%?^)1ig`-;O`=^_XMFVMpIQOT^fVI)!PB,6/OP3?!+:-DO"<hZGXO3bJ>?XVKWCcAS7nMV6L>+c\<Zk.8)$D%u]gg+%acZeRb2#-.%7Xr*+0H]nUZO$G>gNftX=BqAS_sC.]TJr*9=I4<;J4Y_G^a-c+5g<`<e&^:H<<o^)0ZQ.u_tu!*!LgeD#51d/+Qf:q6XunkSV"3/%'a$!Y<WK.2'@EY"'e1o<5qEj(npcTd`'qJDP?,(p=^u6\64^,]F$sSu#2#QTD6[QF(g<t3Fil1"==[<VDEr.cVD^(,ji[3gg[B]M%Y+t(qM$@!B/5ni=-^_*F@gs8Fm<pG9^fY"]"+XB$2e0X,$OYkPk)KGO.`#ln)M=hnE9"6jgL[^_VBWfI.8pnWq)uR8Q*'flDJ!/=%"W>?i*P9;cIC7/iWdtDlmjG/#:lCSMWeg,mf_/^X,B'!NAit';Y,]?4:#c$h].XRp4+#>]*[]&g\;%R'.niJH"@oHnRqb")NHVU!%<oi^$N7aq=maQZD#Mm+!UbB$@UpdVsHbbk^qlV]Y@odft(2_oCC,0o'?!:Gl5[7ZETNHp:6d)`,VJ?>5&@[%;Zi1":<doH>B1:RO%mG;sqXX!tea/P'1,(D1)4\KcQroJIl#JkoXYG,=LaaGUkn(pM_fj&a2C;_&o,qC<uMaXY>%\7mH/f?9CmgS?PiBAqUB4\D/UofI8%iiGmHO*q,S*!WG(miG@^Alo=r"iRF^QmVOuh!*s!J_5iJ("eU)U!O8[>g,q-+E\ncRV?V(,U@o*ID,KWb6+=h"^i@WHuJ-"n-Ub:%J_P,UhSDS?">[SR8$g#^WfIEaW7>Y^eCa4#70c7K$N\h:55CLMcK&T1<jjW(WJ\&n).0e9m-()[=ESG/R4r:'S'I2ujg8M_ko`To%Z7'm:*KJ@eCbYejK0XpMQ_?=,_INi%WYRWr?oEHc0kCblZ71CMrd;!62)&.([fM;OF_)#bf9bWcD8_\Q$"XNJY&(dMY_@_lc=N)_%-A`p#.S6`R!,Z4;[$r44"&LJqFDZ/KM5na7q%fJ3lpftc/G32-)!9&aFpfMs,q9]rQ#@*'qYm(R]EDlhnW7'/9hR(q14iD95j;Za%9Z+t+"h:q0jm#AFIt^*ZS5^:(.4B`44)2NVLF[&XmOleUV8r!*W>_"LD/5e<?&PB.HF\&)bT1BE`XJ/@d$b2nU[=k5iQ\Z#"kW(Y%@8mp;QEEQX68dWJEbg^h@RS@]jE8n?,:dDM$6D&ulWO`/Y#JET[5Jg'P741P5\6T<&!M85H3[?!Pi\QS1[^p8_PQu21/NSKTgDM&%c*\Mspn%!^hh.;cKRP?O6s`45[QJsBMou=_/6ng0Q$Z`e4-0G%!,'X4V,1/;JMrdH=ocME]s7^klO.2Q`nhNF]8P,uNAp/eDd%&g%^ncNA3;0t_^jp\[O?'MW0NdU'^eL4>r*>N?%CA=h!>+%nG9A%S!%U2;PI%JT8:%WO+A=Sa4J+17#reM7m@_N@\M>a:I"28?<!#gI%<OH^=N)FgfJYhYB:d_Z/=A=HhRBk[8c%]Doqo_CW".3il@(?QplYA9l:!:%'NOeEX2.aIk9qA?#K;O[9*^C7iSKuV>VK&a8Zq:5[%f!B$-W7<,fKE3JTpQht9d=F^Z22QU`:88;"_k7hpZthp21d54OfYgpr0afi%8HgLRT&6m\^7e59j0r>6T7J1Z!%`OA[&a7X6RA+P%]D@$f683f!hSF4EY1M9;86!irDOL[Z(JQZ+pl[P!*-rt8aA`dE.p&7A8e%(h`uA78p)H(U(D]a<F@ngii5$Tt?h;Bo`C+e%8YN&c%8lul3MiC^mUh%`F[BsBS%#uS4eYc/88N3I]K90D4QqbC6J@aW(@Yd[e26]&m%BMgOj^B'%2IT;\18+<p470A6G&'7e<X4PIm=%!g%Ujca_oJ/uH('D+u<E(L3\/2DBJOJljWj4?Q)+Y\)Pm?6GS?:"*A\)h8omtNHkob0`HQ!e.>'M>'c*bUi>I1@<q;R*gm\ti&Sen'P%"C"<MU'I$r\<Fk>0d50]MeT..0r"Z3Fco@eCsF@"PoT/8XAqXe2%ASFdarPZOpF:AZegLol'9QRA#JLa;Am2*h+`O9WYHjhYaumI%8R_g+N'M`7$%P%UdD5h;DQ)BiOec7^lIN^Vk6Q^TX)f,0(:OV*l$P?5*%i$V-c9%c<h>)BFqWp[19kPF2>!7c=f![6-Ro&:@%Bis%EWceE*N8fWJAD@BF4/pKeYGoR[-Wj#@Dpr6YkPb;Gj+C&QnB(AUCSr/60R:/3Pg7nBsrI4$[XMU;PP%t)CnhtPJO9I2Tu&R?JrCO%;5G=!OBV+g)r7n?XFhY3OoX4?RU$nG^qM<F-On[\)IJAfU=oAp5/;_](BXo5YAe$Oi#iO`.YFSW,WfDXC4Tql<`BtGVscE=*oZOL%bG(Ai]),51p!o2pO5\YHoFNWQ/mp,+_SBca1C$[pb,6*qMc@C.Y^At:%%(=MIS'=dlheLV9"#F*<10?%!efc6eVm(RE\?$7&]kN2%?&C1`@qcE)3_2'cV;.<O^0+[^9&c#b;s_;s*<a!]J\gX*BpO1`5d`lMWuqC!7q(H+ai9>5?9l4.[d2g_a)+jeK2F>Z2"[/O!GOYK%V>Y5]+)WSJ4n]e+Qkn[sXTM39D=FFbhLWoolC$s_&['a;`YP]/@@7RaB!I688o6I6:C8/M!_DnugWd_TZ#AQHd*Q@.ZS32GqmJ6q%i2n=IRsi4LJ3#1?OOh[!!8A[!S"@.P9'ZRUNDtK-a>-n&-UjDJ>#KaI=je=#5`-'05%WUT8hp&LK6(t3/-JZ&X9HKAbfLY!q#T&V%G3n=2J8O1tjM;I6YHQ/P1/g5c<)L(M99\VOBm*f28ZgjN?O4QTUIg]u)Vpe?m;1_))UiI8[[pcP!/tpe7p@do>..bDqOsf9KKb"M%B>ALrOeiJT\]</3]5*=Wb"Ft("M%?;."3`b=O16K?fr@r>a^K$eA@g_De%&<^lr]MK;*uMb-@#Yi-KfcCs>;]6s8jUh^OhWCoWtZ%a9+G+O9?b!.Mm'V7l4M-j#5/J6>'h-.SI7_B[*]J9NqQM!a!1BbB7Gp&:2Mo9-[+1,Hr*bj+rE:HBUj)%mijHVFm^dhI[a`#nB^H%b=,lZZibZ_;dqF*'=[AK#n*#Kjg+[/6*n#EeUHAR7;89WLt,M8?=+[V2/e4]3*\f-Bs*dBE`N8PGgN0Zm.(a"2=LXt>`Qq\W\lT&%)H_R<.Ue`5$Z4HFS&]j\"0=u0d*-I_1qq+%:tlClX(Jie]4(VW?!DO/eEo?$cth$GVlKA.\"tmb5<fh21LQ4&q$o8#k>%3A6gi8R%fALt'BlqTra?EBL.\5C/%m17$BP53/9H8"f?*Km>2dQf0nmeT&f1<a65\YqPctc8p=Rp82eq"Sd"'DRP8?Z5U"PWYY+OTikBM5KC%Bkt-C4IMJEL8s?S#mP]KQp5E/<?TiGD,4QmXom4W#,%%ABEXNh*Fo4d6:7r?.3Uh,eMXjC?^dBNP8h0%8CK8dBl,OpCH!+ip/8I)%RYf/:T!JSJC`ZcDB$p`aS2Jj?\c@tqbo#),#H2h!.YG_>bZ[ig]n;su'TF[%=62+<RQN9&LpOB`4=s-OA(pCe8PNkX2q46\;B)33%Qm/?qcN-kJhHAb"VMLh6"7R#:oTF$dR<SIO&['a;At4deC3_<mGb(*tWK>uZ&AbWDd]-WT%;'*94[km4VY@'Z`P;i)`IKT6%^NKQ%MbrkMJBa27/9_1]5?S4cePQKn2r`>X[FLReb_h&F'EP5XA]]G7mWc"si)E]J7@82b\,NlY8D/@O)p>=8)*%:VFg/,3ZV2FC_"I!(%ge(P?gkj*R6:!IbG;*[pC@E=Ch=P9CHq3t_9<kh/3BiPp=3Z&n2h3$B^%Gm4lY!*E?$grDJN/;oqd.]*E-UN8<H>:V:i*NV:=`tB%jZ_"@_aDm(1-hj@acrlD2rJ-@;mM`c_cm[W-o:@%%B<_<Da4\'mhM#iCdA>=phEi:RSd?OE/FV\ojs7cN-obgi2ApY`,$0(05[,Q%qLT^o<$,^k2SY;ZBaWp#'dUIL(Q-[DPn\bVAn6mE/Kk5X9EAON?HpJin#Yg#p\5*%mr51g'c3%maufZH)olsUU("L'78k"Hl8Nl6%/,:VBW7mEP3fX0m>T'K5*m*B"7J45l!9T\TEX&rS5rDlR@=*,'Y1H`E(/f%r6W>XEQ9O&`@l&'XJpI4cFp=$q0gWn$>+p?X,H4aI%:%P]%da\7+I\\?lWq"7g&!`_1)<#-hY9:/H6*KahaiFC(YtY69L()PSG4BVE5$"^%c2>DFS/*6R0^[i1ZSgs!TB;\6FV7AWYuImV%Xm)$TcT3.5Rk^jEGk1t4YLcie*:#G$%TJ@e.F#i7\#"&7/8*2QgtpHH0'0n>aU2komKp*e<25soZbqG"&4EQl`]stTLlsCJ4-5?R%2-TfOH!.HF"_FA.%bG1*i@f=s#fY"=#/YRq0:l9n%'EC1S_pWE@;rX8M7EXY>S8$/ec!RX`"-5a_e3gKI"^[XK?fP1[_00WfB[5D%Fr!-,d28"++@Fn/R\GiSW7Lo:*,*0*[;6A0^\'i6^0e[a:?t2/>ouY8HIS?H1'cr"]WeNY.cmCJ`a5XUp=+C+J41qBd'd<..%_]m%*QYTk$Q9,`p3oG]*c['^<c.^:4V5I*4'>[L<N%Ek2'W3'`"n@WZ0/MK+eU;QUe5M8/?O',\d$dP9/DKalDA-Q+#i;XLgl,0_1it4%O!_99(10*gGC+0ZSR\@d:TXipAt=*D#KD3TScN+;Vc*toBi<>_JT@5Tm?NiG"Fcd?]-g`$d/_d5-]c^1:<f2fbE<9<:P]_/e/?b,%\Q*uV1Ke<Ec#"46[Xa,#\?k6.og,Z3_=dZIbR@q&"gsA82lT>Q"7#B@T&O7cW+_/Kc<bN,V`:C]Oi('K,Z(\!@USo#E8/lnQ3T+<%W"rbmJg%i$3'fDrnHaG+@#mK^6]5#bnqYVNW'B?:B@ZR98>01rI%A6CFeT=.P@=htedV"HS!h)bD``O]##MLh>$6LDoqf4L>SSs:%-<\!gP&e=9>3n9)6k`"c$m"(d;mS7CU?AjsNIB9==6YW3VXn50`uTgSYG)i98fFCLO'3GZq2jKMk!]b!iso[/020tQ&bWk$J2KD*%@ur8P?rQ!2;EN"H`seIU+db%R%c6:Y7UaEd*R(d*QDFq(E3a7\VegX2WX">o9Wq#JIc&a.[Us:d/W"g/L1'b*>'PVj@+cJ!CZQ<+%8\>asKkF4V$,5"Pm:ZK(hJEb-27X@/7sNR"c^/EtNHhri3n2?j=Xdo^^+7R0c"'e\iE@m/h)p"o"6-"[[?i0i*&7UHH.[PbL@23"%2AbaU(3]S9"JCAeJtD4ic"b?tW0cfp5+7u`9;Y'4qRAU(nViq3IEHQ-%PbLJ^HULC]+,f`5qp_mY.sAPZHiluL3$ZJ%Mg:%jWIaA%#P#!1JQPH+MCKC$7sQ5&n"DS;@cb;N=tZD9j]_/&kp\X?Cigoc\eM2eKJh0+*!;ZVAZ2BnJHV"`gmceH`k_Nc)K'YU#4CECe<pPn%rf=tj+0ENW)q["uWo2A4!arEl@5`Tt>0D6EXY6W7-B=X>lXrdJ1W"mSk3dd!<8k>LVUf-6))$2DcR*":gbKN2Q7r0uJU/CKjtWZL%P)EcP\2snajX"'#2>1ii30jaf.'/12<:`$%YnkUt3<R&KWDRPh8=-rB=DghXm8d"=9f%JT7RU/_d(8pQ417c)&;H+SZt-=:nF<'o%96>4Z(HY*"<A8Tk[d>PNG3Tn^M<R(,].m\6)/"k7^24q1Eh;#VKP"US"s1EPa+<.e\YZ4gV7Lh^er-mXSu-tBPNnjdpPr[SosPcT%[b.#$2AtA'Z_23L$asc/GAA%;_AqgrT@[c;E+1^Oe3Z%J7-C[NXj"ZlL\>9em-VqOSs-bXoUZki^\X=1pKb"EV!f?VBFJ7paRq@`%:9g:!TP%iLpQcU=fuiqB$rBTf+i%-Uop>`_=5p>5b4WT"I/f'4mR's<Y.1]%4cW-m"![Jec"d.r!IBai^U%AX'@_<k8,2L\M?7!>%obP%#:0*MdhDd$'h]uI/\l#("<B=-:63W=2U_ou8b9Cq-JJM$JOZ'>,iC8>1^j;iuU07jES?cH?_.O8*@d5AN+beuR%9EU3D-YL@%_S/EEaWrK?VZna1DpS4cghp^)<#c2f-!Mat9?eUo`TgX]#)D=dKlHn[:b6t$d/hM?CG-s/\*o7WP\^Q1W4>L'D(4;mRn'['QBZ/l%7S=-d=EN6Em*4.7,\2S*T6n*tI*;b&6Q-[NH3Gq0]ZE#n=mTnTbE\Mp*ic[b\XROB7:!?<2<D@V!B[pj%'S,Qj#J28Q,U8cFOTLU%Nb?^!NoOYM_Ij/590,^P?k1d#CV7Roa1+3%Z>rE-<.GXKafJ.L8LBZh7*iY)CnjC5o1Nnp*`#SB[HZ`A@^U-afA/KQJqX0l?Y"46%+o?_0HUdM2f*c2&@"`dIKLYX@eG9nZ.'=q_\IHUn6H-uYGL0OJi%<L_pOW0W5UFCF2onSr*K8`FP3V`(<uiTs9h)TQ?KU<$N</ZM%^Fr$,gokWo96o4!)#B/sCG8U(>P&<;(F<9?_&fG06H"2\jpYP:VO&5f(9$?KOh5apchIj&kh*j<*'85N"=H>T07cqaomTA`8'/HP%DIdS/^b@NiX#(Ofh9mttNiJJoMn#.m&behRi9J#DPPCJTQ!e=4>=H5@<l32N9UpF6pu(M!b1MF^(mrp%G2oN\l_?o5`l[4E\FQ3I%*pt;YNB;*U'.&[I,!MMU?T_\H/&cW9&Ch8K?%Xm72^r#=@$59];MJ.(96W(m=o#iSkM$uVKM+JOI`uK.=jbB$.AJ:kLt(fDf>EL.%p/uuG0g=cH.OrS49N(T4Bta5[(Sdq[5#$2:'9:Vb_RNHL>I@ZEj-ar&)(tTDN[`4^s+bfI#$*U5muK..^K.k3=Yrs#3uG_JQE8j9%Jd&c!Y.%-]KN/_o*95l!Tnqt!D;O!@?g.p;RH1Y46Ck^bRato\[OpXJ-"JK"pgWu`^s/Q1fg1n?+U`2\Mc8eFl39)L!&ZKC%NK;"%d6S#tL76]ZXELh%@g^RLbeV50\mVS`;Aj-%AUq*l(M-jVoZRV/:-_sm/q8O*@?V_3KX^NrP8V#'9-i:di;hcAoL++Uk:So5OU$5I%>Us$!N_O>/XVhHMY\;P6DOh^fb-).(>[gHdL)\r#_9i-<\U+NS&h+?!Z9-6Gm!MEmJT[i[Q%1*sclN<?'fN[o_AmuhPJY3<U/@M\%K]SA9$&m;4#ON.88gMI7?I,C8JT\3+C46F,b*.d@19apFYgs&O!=`>HblXF-8h;\W"\Ccs@"','C,Y/k=KFlYB$2ME#/Rbl(XdTf%fK26VE:)rl^0Q>1os*;*2ESLG^ma6Q3&Ae\\8X>sE^Ak6<A)4SV:W8tI^)a]f#^Z7!t#ZKb=lIO^/[d%?i@'a2VEpqp9G"&$\(";%!QJEX)OLu,P^f=MFoW<aS)Pp7pelmKQW3NMQN2=^s"[fJf'J3(^tj$p/=-$T93o]Cq]MflZ8gqA?WdZ#ZV<0[fM2.X3R+\q_!cFe%8t5k[h!37860%`XdG2sjg%+EdPoo,2n3kd,B#DS$m$tr7dEE;E@;N:)YC^*.K;&D+ki++tUj+eQ@V.2.c@p,<orQ-81qBM:FdJ3H%K8[(5'QRlWJL[Np01h(JH8Du\2h1*9:Sq6@%/Bnbr`iID@FP)d`"AX`<D>Qn=@UAQ%fjUp:j!I1XAuls2Q>sbR'_RQ>Fl&]V-FFd%If=oLje%>ArWC,Z[m)G[36COU'\-CeSu]S:_lC9i>EIV&<en?B4J);jNpuJKWciI.-p`Q9<=M4;M@Y/a"gm1I[?[>')$nudYdUPj%_^-J8c9gR?P1+her7X?i,FUE7NEQUtHSLqEMlEH5cPlSE<2Eq=mNbEoJo'$Fr+KKho+?`FIMWns^I4h%$iV*SqV1Q6>ILd/Ho-Dd%pY05>IhUEtXPa!Bl6L/AfOjk/F#aW5k4I@C%tKY'O4pkbQ"/i>agLupdkQ1T(CS%*IWkecEpqH?E!;ts?EX$IWL*2J5N(6b>WI3$%.\c&>_P.\20gm+s>jq4R\!=BSn\<\=AVnnt`++sD,dS0TC-;j22j`J5QpXK9^$)-JgVDs]4!*c$3T,L(X#n9ZL.\jo"(*[s>tsjp%j9H7,ej-Fu4WM9?i;TJ.7QfqE&J+FZV?6l,D3]WP_#!if@=R`887"WMlloRAAi&r<&j1YDl'LRVWYsFQrXrF;*Q'V@#Z:Xl]EQg-%8[t@D0:1T\%,<,4,j,YGDNWP=a9oGlkdQ[Er_6QY?O&-+PY@6kCV#&=1]q);_/4F/XN8NrA3B_HSIW1H!Cr8e(kW'e)J$[\#7$VZ%q>e#is(<c:H#Tedf*Cj2f]'^9*f;5+]*.Y-8m<tEEM`;cWgg?,l>Zu;[Te0<Q.cIW92S"M?rV9IC@DqWU8<'QV^?H#G+2L9Ypp-M%oO<*/h4p[2\G',ZO6<6R>;hHfh_,pd2?FGtA3WC0Eh`-@fWOsC*91V.[pgKDk+p:gD`$Pi+Wh1ka:0u-Y+r3]$[8,7&Cnq7-$b54%7._jVJAWKEK+="YV2Xmnp^i3`Er?e6`/-i*g'iZN??:W`/t*q"ILHoKNAF\Ub>EEPj%DjHYNe0hAK>E]JP3_ab&[=fQ_fL`o)P,)%Ddq!b>iHAkXe.drM(;#8/Vgj[HDC690!W`L8<;^B`^,T@mC:+5'Zho.".Qf!;st&1fIT1tFb\.NbWJFXUZl5`%j]HooK_DP:Ce_r%p[elL@o(Ei3;2tGLLX+5E&dR`%#8=g%iimgoK_DF<t?S%G4e,[Cf_]gB(r!n,te-jNC&-,;<Y4P7\MTNYNEJ?U7#&(X:QCc5":W(%OLOF?a!AKd#?OHJCF^Eg7#USk,b!Pu[ibuo\KD2QWL>J(?atPU&I^cK#`\+R&qo'B^EA>AL&I;?d;Ou9'1<A43CLu-,`)0N-`P`s%g69%)-.]Hqi`Z]'>_9e6RkaffaTLJKan)pPVdR>=5?L&4bc6A'4gCqLdX3iT.m1+ElW]nSr)*<)>QBHs.uL3cE$YtrVsGr@GF"II%.5XZW7rj0kN!al1d(:lt8;c8nV"q=+3qr]r7DZNj9=2ko2,(APrR-uSY%k\,0-HRnBf'%pG&sA.`PE=@]]>!(\1VIBls.`)7e!Td%+3A*Im7r"5,<j5]Zs"f&eV"I+TN:@nQPN^%CA-T/X":*ZasNC^]n@D"UJ5VhQnZOQV)"Rt%h#k.AU7@UhdCo0jR)4ATO+;1if9,X%LW`5+[?%-UeTqFFX)]]@F`0_+QgCS<>kF^M2H,glcIRnpg&8II=dJoi*t]_Q5!Ji:e'f,:cC\CWH?T>dlG_*(cNs.tK#dI^r?p>q%+2<-lm.kk[O3c*HYHM<jrTX=3'q0TWrHi;S&+h`k@LR^?J(@H]TDD#3o(,?N\CFg8#r/r1@kY!)P@Ac:lVR+FSF9HIS0_fBaHqe<%PY8\-JukiZ5B0ORFlA=^KYj&32k.i0B%HQHeI[ZiK^0o/\_f->06c6rb[*hQ'8>K.)mrn7:lPRVC3kQJDa)D'AQr>eR-'toJ"1I;%0dEBX0&u#W;,Z2I%uWfKRR\>g_<!Ue2tUjq'2%1C4eQcNMsO"e'%+&diWgCN#>q\Zqcf,.`+'DhZS4hYBa2:VJsdWIP7D:A1*1kX%,,J!*`3-u8ghN[&2;=ttPqI6TRkf$>Y3i;MBWnm<Vm0RL>=:idYX*'u1KN'391RrQ"kO)6RpfeC0Q:s\^?*<;2/P0'U5s8RW\C_W%Ao6k0GP',U"L@):4+"_Nn9R)g0#+3K_UQK35;-Y5g<Qp5D4.jBKT7e2:u;Mi>bJPV<#NJi5JM^I,n]u(U@h$;"O%QAs24!j+(qtY%jm?j[rl(*$\@I'rq=sUHrKE^&pV$Oceaoj1DI..oGk(Fg`@#U(gK+<`]=P\(p>(Y-+2<;KXY%<!^VB_h>IHc1g?rm_?>Vo4C&5sF%&TogHmi<JEim$$@>5Mm[J>V**g984unN_>lDsh):I7F)uh7nF<oTqW%/jA*'B@F9^O0<i*(B'i^J%,CA`RXVl0B]IIMo2E=HJS;c%k3C92lgOE0l-E.3J+or#io,&fih'RAHiCIf\-q;a=$JjYH1BnW[l+-LVe=>*\>?sR\pDco6d/Y5j>i@dpP\`p]R'+cc&5`BPr;uT%rHRqnk,H]2%HIGCS$tV$qVoKm:MW\7MqQmhBFd5AK>0*jT7?3Gj=YPPXY`2UJ,P%tJ,/I,9jbuZed%t[]R'P9k4YLgUYVR1J%XH`%qT8H,n+t"@rP6&E+e%884E_ru_'QG:Q;hPq+!#h7&T_k0lMJ7TfUKAJlFJ8^S^%AJ!d"89]f%Dh9Y\aMhRRKDgEuC_^W2gVbXR]=%Do@S(om9G[E%QMn]sYoh;o8S&GC&Wf%J&4i_joukM>r'\fm_":Yf7.qqnQRC4N-3E(L_g)[1B0F:JK9.*<CEOIbU.'pI*g>6P;So%18ZsaUuUrb0D+]hNknUp`\KoBh]AZTe&^;G6d-lAnF0DAW"`B%='U\]L\,q'%0C,N?Z(]SA.eD*NtYUGiClR+fLmiji+m'_g39F%%&%Q$g&mdE(\R8[1C'b-[a+N95T`OcJWK,nj?T6s<)o"r.[?9VS-?(r.qW[>Q*k@ZJQ,&,/q7gAWX@0/6_@(\QTYhLPSgI-!<3a1P%Po]1]9OFY]bNp!;ig6.fot>0<[s^*T(I;VUmu.+od<1`QG]5CZk2pbng=l=BT(@W)0Ps3q^d-sLa.U8>#WI'?5=bt:YMVT$X2ELU%`:9M6>ENkFTdKhdqW0!ln79:cc@so#^B*)'Ad-FJdEM8(=Q\+\0^RkJWJ,i`&_"g,6!u?priY9&LT?]&f0egD#j*S\IX.a%0sc+Y%]f0lgMh-cbTuXf*l5^BsI&c6"3YqW%fnO2c[/KaBdf*=SO@fF<1AC=>T5SXSDEe$^kP%2(k?kZiD*Is.o:%sO]tSpfn"7tJYO6;:%J%tgOn[#hLDf;`!Y`U(qDHODWmsS8Q*p3@':H+oOB!hMlc1Y(^/cF`2dYu38IW:BT?JXHLEd84'51t0\8j<6`5LEhF&dcC18[G,b%^>'\p2d]laj9=i[eE5dE:I"mEMpF&bYUJtShVl$Fg`/WMS89"5D#ZTSa`./[#NNA$-QRVJhf$C*j0R?5TEY8P`RWFM2hV\#,9_Fq%9qQP(p0A'%B>1.]cd"EZ5IUD$3^14SiE*eSTr1puEV\t5mpA5'IJ\[>3-j,"4SY9d=^$=QLYM\RFMp>W\bU7BpuZ=<G5M,*3r[_Q%2X>k3o3\)3$8OsD2;@/SBP"n*NX1jg][&e6:B'n\kIW,9\*2uS;)!-7!.:G\*UEP"p$4\CSb&m`=0V8Mmqgq^oYBDbl+d5fo(2aV%2lhH+L[E.^H$B.UrqqTIeVe'9?G@\tPjSLCddcbj^SZo"d/U2tp%QdMT>%g42[6PIIjE81^Z*uuS29rD+9.Db0>DpVp#>'tbhOB5%VJiW)lF8G(0-=m%S/A1#9t&XBn,M-PkK1'n:MHj.*KWWZI!kPNF%4&#@qa`qn,K\7I")+nTcqbFGC+i<",sFu4?%'OJX6<pcJH<Y%p@#Akc`Th(]F3]ui_'3(2u<45Q`oiGI]omQhhd8>p?%nnLSjN8b.f#=IeN=>3[nS\Z&X#Sa5;;Pcrg:)L@Ti3/q*QYTDj_EnR$M[%]Y&Z9rSO.^F#CruD*S!J%;G;B0CV%TmU)FW7bjr&8lNJYS"JSL2F%5<B9Q.(%079[0Un]+4am#%]?Eebrafa('?nY-rmIm^^VRbY%?)D0bs2+B]IX60es8OnLk$(\>c/.Y!oK@_\J3[%9F#clLWMheM3.O[Pb%(UGrL?*dCHq?IaK3OaY,\WGpA3'\f7(.rBB9sJF%"S1%khtHh"J3lu+4m^.-_r^[=^(8Qs$,H@9_R=KgiO'fQf//J^Wuh88c@P<_V+JPrXh^hUWt)%E?8%KgAK;#]<'"4%"A%HWJRbFn^VXR%hsnY^j8ZZ]=?S^UhENt[4h9-SdErWh[].N(Un4(!M9Z"jT/ZX3O!h@g/oNB8beC_P5!$57Rs9:-F`D`&Xb,dWbIW8JrVH<e\1;X2%T#al1cZ'BlGkrtZG^XX]H#l.=G5pk(\9mfHZ?=P58A5C8hi6)f-PQC5l[t,oma8u3`T]g8_OWYW[h5ITKBf>VC?jk<c"uU^T6!mm%05+*F],,&e.[lsU2#"27WR#'TnF^2m\J;h@^A?AmIB%>)%G0JpMK7V9V_*f@edK`u0DCNf$HkWf^\UmE[&_B.lU%ZNdh>I!,"$=1%/l12I%2qPHl)&.lo\%13S*PuSH[8I7RCIp6IH'PQm,le)X*(O5??c.iY:fS6-6E.VVfm)KX\DlF\*do'f\GE!RqK.r&Hd+(qq^f,%`r7i$MTq'srDOj=(&qT0l-m'tmW&!SMVZ_[q)rg5N7s2QcGYe9_@bq%St$lu>gqMIf(+]n(Tr'5M;@sro]22/!NP2[&/+r;V>'fF%dSQWqJ&gA<fO)l.N^\Nc0=m)GMuSeJYA(TZp.tG/%o\W]aE`$X4ZYdlh>W8-<u9K!TC!"d+AJ4"kJsL<&OLi@mKDKd#Fj/hS+>.e%'W9UU[GL9El*3&gX/fInl=an'm%\R,)+iT>.4KU2\4PZCqJ:L:qkZut=o*Pdd(Vn905]rnI\:/VX$7tu#B]<^ncr-1eifmU>od9k%J8f?u]"+K\(;XGY#iF>,Mh>[*5;":g/#@'fF+05pm_m4-j8R$JM<V)@l1)#;4M2Yk]X.':PS#0T-)>Qq>;"%'I7\I<7p;f#W;Z<4%c%ue?-c_;0,=L')[YR.W)5<R.l)>K&GU9Xq/l%im?C`npFF!FWs7Q'$o:3#Y_thCtM.^Ce&*uC?NcN1sK;hr(VsP_nOa#2\ok]'N%pe80CKYo.o>TTH`c_orc-Zs^a\8sA7VdGZobfe24DH8n]g??pAF!aT0#?bkU.E>:`fuhl'rMi=7B1/]PVkg`b;<o0-?YJ#@9W$O0%h/)R/:?pSklI]djnPOIg:0G>eKe9<BAFE>h<u4)M>TNQUp8cQAkCgA\Mf/25r93q@jQF'"qGfE6X)O`^g:e"LI[loL2e][MF`;AL%[XVH;<8)F%A>IQ1iPXI0p$U4A[uIFlhr=.bSETE!,k@ChULhTqLrg^h0\OA3;>['qb1^LcdI7C_*5=,;s)25h0=G?PC%kVZ2a$BO%FtKHR2ZG=2ZFn^&8`%LbYJ0E'eZ\N.nFH5@^M7d8D%=mql4BQ@>a$4HoYg%fd4(XS?hW@^h6(AXQTrgq[#`P,3n+aP[(8S'7Pgck%k!Hki9@W#A6MTl1lh&mSI]JD=U++K=a:!:)<BbD+>MmC?Ft[TJ0K4Q=H9q[AT4V@Z%'&3X:`Br=]2plQR&to&V8[Zt1qpDae?<_u%%qX(r[M_n%?UOFkrU-;Yr2^hoc<+]Y[aqN!['jUQG"7%P?al(klcH-5\a9=*33T*RBQeN>?uESXL&kA_0E6p0Atd2[#t3"k-KiE6%$.o1,baBA83?dO+<KE>W7uZoL^9:IhhY,4BapBH']DAp2lIU%#/tp\_2>$ceRTk(lV7ktp7:f`bIkKJ9Rt0[d%8*b676\qq6WqU)%`Kh8+1l&d4d?Mi/M++8T,r*Zu+YPGYCIf$r\>hP[DK'\rX/sm6C\k\M1?fj&YPL$jDY<&Pr35>QV2a&i%0H1\-N)-fq7/4GQ5^mT%<Biq4nB@'"Aj<Z[[3n-Z+&$c/p9.'Bq`=WBj6NhNEteT/5-!HWM2RZnl';h`AaSQk:.RW7@Q6G3ql`a_b8O\ls#RT*Wi:j8WG-5f%3UZXAZWZp>4sCV&8YdVrAFj#@$#ggb(&@++cEh/'Y]>[36Eg!AJsAS"j4E013Ce;M4lJUI,oa=CB0UXaYnr1f_m@Z"(;I%Y6m"ST%aSK^_n$pj652&5.5Mc<eYl+I]S#9$ucIKE$O4AEd13I]Fg6u@4Cjc2YmQQWUK?;Eo)un'mrFZ'!p;)ou2#l"s+2#..hg>;#H?nUB%ZMnKHlKuLfPon;sU\%W3ro)W$fAt0;qnJ=&^OC)pc6'Km-PuK:^.^/hC[WT_2m-gG!:7)+c"(kodDO.A4j'sDn'U7PK1h[(o.rPk%rO9uH?f.J?k-_R_Y(FF\YBQ<r9k\rVn_3ecG;e-bh3t3h;S7t?g!%$7YC=JJEdT\CBRTH3J)t"M1u61;hT,Ll5NpGd;u1ZM`@QE.%WnY4:osstermkjtaaZ7mF6,]%'H)("IJ#i'g0?$Ho\7^RNQOOSp\3*HeY!0'h50q.1eN4!4m8s.\Z$++Vjh7M?;9gAb>j144F.[3%D\iVs-p4RqpM'X+iTlhAK6D1Ihj_;@rF#2Cfq?WZoCtVjT]+Dfq#6>-0tChsrm"SXmJZUFdZrZm]=^*$qW-bmdQuK_/iF)ilMJH9%c91"V?WM%5L[Nb]pGiGKle1.f>9CQCi-L,Ao.PF8o\OFGI6HrJbY6tprV+_9.1]%[l!QA5kdTuhm=Vk_KAP>j4rjN+ap)]W>Jok]%^40-CBXIElh+[X;%jpJN=81j\ap6a[G%hYM^HHAGRX)98.L$?2c-7d]YEodbc[D:4E<"-c.?.f/l@(G[2nXE=2Q3tUiluM_T]+CB%&-n7H#2RrW9O>>Us1WTW\(5I^]X)n]lU0p0lYkeMWpSWPZT-Y;-%i@LrNesQAoI1@\Z;,G$bX<"HNr<Y3t)&E]l[r7kd!23k-J.H%oUn:(Z\=[QVPBg?rgXFe>O1H`BCkIa<'KNP>;u*7c='s=kj-^XNGMEPQi+'@g4(al.L,i,n%@EQHW*,l$ZC61D=-k(fq<F>n"6.5%X'Fu&Qf7i1<J.G6gWj\753V.geGH#S]D$TteoYo6gUe!".L4e$4l3fP)YBltEUiR>fq>H])Kp9&j-."-.G`q.$h&9i#Q9):rT8.>%TO1(Lg]$qm*Y^S7=R3!u-\(PY^KN$+FEdK.?KIgra,ak_Q4;Q:`iq+en#Mp.jVtl+6/DBZrT789T\]%:`@3t6JN$Z?2"SiF<K@B%%9rn4sfB[^^FK^&OFW:h$cnjnOLU2JS=$JjA5p(7XK?iAdfNHRRr^lNiK+^nuYgYhNg_*ZU0(5`OGlmNe=afsS*J6!<o$ga!\'Mbb%>;U$V]"#GSX2!CO.*cCIFeM&-B9)+3<Ut%blb(<&_W1HInZ+;[FK'K2E;J/'SW+'so_E#U.#l+'Pe6kiQ`TlM]f5>q#62D^\GA]"%IJdMp1V^VFYePZn0M`u,C9(kEl<^)W](aJ\Zuj^mqot['n*',Dr)\B.0$U0L\E_Zu+iDKem+4A-oQRa6eH`9ZjnBg!i:B<Ko82Z$%YIt)<o4)G)m:3ot=2s=I:S#b*(LbkG*TuPFa11Ed<Tj&6ZaWrLmQ'_sJ$/I)p&=r%_0NLQ2-KTfgNih[j_WJNJb*=@D`dj(^gAFZ%m`f:<J+'45)p\/4abTG&nXB8\Sib[k(E]"Bauf<.e+n5MH!9n6/*CEPg8XpkbP=78IB35;\+B"9kIY?HH@Gl43T#;c=K)'REHXS%%pSr[jip;AG8bQp#a7d*EIJ60,nb)m_9"qnj.t0XK;Tj9-f.)"2i152ak19-]Y7E;9X$?#D`NMdQC?P>L46=3]]BAYO5Ig\t[:AXT%f&Y'1o2kjj47d-/,QI)YanE`<8+LGXo"!AMP7RTS^U%9]a#]-&hqB"$m*Y_+jbp0@6M<f3o,$88.P2=j*A<bYSm&[PXJVU@?-dWD%hER$D<^*_S]O1KIqOlXGe62)g[gtQkjeWdb[f5uKq@rPkA3=Yg.;sr@6)J\LF1u1LDs:h\53"1Wr,dR\nV)eZNsFA&^RSIgH$D#5%\*2E.<W)"9<fZ*]Dn.Y7[ha[W5gQ^6]KKrt$[U)e@8NI%&*r\3iaGIb]sW$j<&lAm3>I10BM3Zs^+GE!C\;ncf*o7)Qrnt^h75>,%%Ed+K3iL)OZBh:F(t/G41[+[LDM)lPg4T7jDJ+Tb5,d2#K<k,fa^\XcXcWOsQ4N9LI&S*M[eIut%,./Y2jgE@b!@3L+&rbr>Wlcu%lHQ5s4I0>)b7k\D`Z(!gp8S=F;`N7Wo[:k2]`gP"rg1XsHTe96hX5iFFs?Tr2X8\^gQH_H/_nT)D\^E#gpJ*LZtI*p;@CVGgLZ]0%KXdD_c#3Fm[I?I6V#U7"/*jRsf[NRk2LV2^7gEt]3P5A>Dr%t>oK&Cg/@,mJc\(IrrXTM2UFcW7!FD\1=b6"M`_?fKVq1L8AGsC]%!U`YIs6P6@,\CmL1DcArIp#XLhlbP4jebs'l"P9Ds(C<PL$XfH`=+cP<^8Xsa_d]ao?0eAN`W+J+%"&hcEm?rE>.:a'pDg'?',*M%rD[@j^c0p:S,+^T9kQPk=3,]1l2%h8qlc(\o<rUe3K9(qOQ>JhALD/`hqlU`1O7A^b1:d!*jKAE0`=eO@X\"6)rP?Z[okSZ/W>;J%AhAW&lT:Hn_(=c)]![ah47<+;4.hPbkN9,iCmHloAmOON=5VaK"l_lo03mWD8F^R_dK>o0QEb=M@2\qodPH*&nZmQ2Fr%7HB;>81%s$uMu)bs'"DY<>hA/3cM^QkPGPh\l_WY_-L/o>U.YdF%-Ea.oNDmf%i2kacKBt7G\rE",3<gBd5O7'W\cLKGWO/&;sA]>nS<dNkp%^Ad+e5uu;Pe&kPj%-29AIAu(j]kT1e*++1td[65-ZKN[tR(Rle2*tr$QEMofDV]m@=7hiAn(en@8C&b]P.`t:1F2;">Y(jBC]tR/%?ZX!</AF`B>B-2.O.NqMU#2Yn5I\Kl(!Lg/YWStaAC#&*EaI%P:A]tC^[s/Mop[]cXR8XW^HG*X-gpQ*f_\]ECR^J.>1KOO.^gT8%@r&YVB$APE]gu.]CoQiED-`*h+0DUBgG9dYOIlFsP8X)V4M96W4Zo,!MfM>RmdfQ%H23]Qg#,*JIArgf<$e`lNirBZ[*2<-qWE%(%?np4,r(7)Q]jhLHYcq9Unc%C#VT<0B?HYG-ICq]gB%^4#h-$>C%+gnhojd.QVm5Vk?EP5ea*ug5rB.M/"&0`G1Mt`!G*qScIl#'/%;7JLN/q;TW,X[2Ta$2L4<Pd7.O"+#PTJte;fk@>:'I<p(/!iL!\M][W\H*enMcq+d;3^5nGK7=Ds2ARp7@Ej=gL5Ejdp28jQ(r#2%p=fIYZ6`FKXed+:aA&I8hoA]bCFteb8Z=tP^C7@pDUXGEkL)GWqJ0Hf%.F-HB2I3@Y&GmAq-BC`c>LaOOHK?JOf+G3ZY;>4T+Mgj%?`g_t'F(KiC:N0(cMJG9=p=IoF[:I@lR-l*:!(tLBN!G\@j(iu$3["ohetg]IQqU?!*Xe%8aa(Rq3aMsG3P6Y^CVaaOVNaUX(D)N%eio[2\Q3p@J$0U<a"^YJ,Ls!;(K0/h9Ihcfi1otKIn/?HhC;^PJ60BqZRRVQ$*W^OXS`fOpKmBrkBt6!Q*aT\!#='2n+OG![g',a%A:'[5b-U7gHJTc:`FC3+K)QOKr[(cOR[Rs%ZqAJjp=t#-rVg@mICRS8iS@9.3X*4&`kYFt4[#]?[P&OMW&7k(=r-N?AF%)!5*+7c%)oTYH'Re&^$2W?OMDgP'Mp:isHVGA,YUg6cl(Tm1ptjSE6(%?eJ!b+]9WT#+Zhne=+tlV#ZZhHpW9LV@cmXN%_A>X4\/Z`02HY63%/mmZWiG_G:36+ZbIGt?*V/.>Ek#[9"Xm$`t^\;=qchW<"d'V]OelPKE?M&3KhJHsag6_r:/)?RR=k<(jlqX/&<U<I*=a#NhSsmc+%Z%C(<K$H8.GP>0I5J8T=:6]I?[5RLHXg>jS?#"pDl"i>+CKX`@l&dV@/raU6PA>.QV`$Iq$H?_V5Bh>$S&;q`Qh=hcqZHJs0_fIA%^*N,ZEA6-s"lJ@Cg5VndAtFmj\R'RQe,.A,@-"R:d:d?WUX&_BRoVni$T"i'qNUmPdae)`bL%?>OXJ9a5O0^9.5&H,@.L@7'S>1W%+NQF5BHK!e<cp#h.,+A`;i9/`!ftVrV.ci78Y(ilU0[`f`c1\2L`_3]p#&qjoYW?s%D>jX,j,s_[%DNjfi7iT\Y#]j[=7Al`V`)U%7HLh*D7.BGc.=t0/D&iYWKa+Z^%><U`cJW02@aDaKBVcSmEcBi8r8WUNVAd`5&Jn5E[uu_R=Chi)d',DSekiX.XeKpair%A"'rLg%mlKLYZEU2LM1RqiO[XW]V+R0!>C65@1Rpe&Z]LiPVP-NQf20%N04DcnZ!)%TIqsJHa:%`\D-Atpc>#Kj2uM;bqP[0LK8qf1CDLD8%FZ(lJrp/Gs?<CZhX[b3jX,kN%)&M&Bol:IGN-Zq!XG6+T$kYn_O#*)%WIhiK1cN@(/_8X>#Npj9Aetg0&?on(^lF%a^^Y!%?`k?%%:1[iN[/+f=,%alXOQNu,]9$%L2c:A%Bg3A;2*.eNgNgs!jEC!7)bIV$I&Yu-E'28hS`KM(!)[JGK_\QKkuobbNTt=:WJ28;F1J[6%ZG;j_j\Isr"if%*3ACM<.`>S?g8SRU9d81qkN;GQZJ%?CID*d#V:.'INJ<:u7;%T^98W*aT.-j')]',?n(bM'`1C6!)sB<(^;7:e%:V>\m+'d>"hqAoE3Mjr;aci__$oa2Hc1m^5['k1f>dMdi+N7Ghs&qYChV[AY.r38o-bF0_+)S-Gjj;OjckWCk@<:Z!4J:O>\u^4q%BK:2-)0G5I*^^ECI0NtG[c"q]FRumXFD82ALcKPlKB`lVN*;7-6W]mGQXpPbQ:"_:-o1!9ZNUTXTrZM4bFee'3HXp3FD2fRLcKSM%)0B=2)*NbX5(h/O,L?'`,epFF"hW:KCcW**,R/_`cJSJ+Qc;rrN<<1L3(Z2kdKB(fVQ,_V92;XqjF:=SbJ4#MWS5e42)@7aIEJ%H%b2SYSmSe\apVrW_'J<=pV*#2?(Tu4(T?=_HJ#Pr``p9\IRnI=[g^5PZeMjD!HqM)?O%!\VhbC;E;Lckibs(6'9r!r`SiEQY#eR]0%:aek'G4"SHf9H^;5bT=$Cc$$;l"sfdhHd88BNn3t<OB-:;uP7NC:cMs66b*b=YNC=A@F%8EH=c+P2.$<>RDf)/+7Vg5qki:LBDBd%8LR-,=Ys#Em*>1T%(/-UaS`To$Mb)8mR9Et-l@lcn@To=5&bH*c_,98l2Ifu>HQ=EX9M7nq9-6JT>1`IfDrKGXH;l.L9oZqjUI!,%FVjU\P'(TbC'/IMJ]I%h]nWlTo"b*6J]65Nbi@HkWTQg)jRMo,^$aTDX5&q[1%6t0O"6E%)MlhPe?le(pt'FW;DbFqU\_sF&!Ft7%D*DlaIT[`Lp>X/aV-UJ:?'XpXk+,M!bR7^Q=T^OPouXZ\Crb'#G,uPJ5LPR;U[;1?n1,e/F.l>n2u:Y]3O+_7IYE<cd6D?s>kYnb%E`Ldg%D(anE;4=O#+:N:2b$jA;G$-LESoMfAESh$WlK>K4)"<UimCaiMP0+-X*+Uc\R5>Ph\.Ja7`tL!.b%Fp\FmP<I5do<cTf?k%oM:I[gM.@HJ-Gb$=9FFYA59=U4M0#naH>o"X.RuGW0rp<9[%Q#Zc*L?EHWsqV63j36o?dh1m#b,59%q.a"H34098!FV_[j=!D-ME%NV7'?o1l.DW[]s1g<reRV&kPRV=?F_9:=3N(7G"-]7DLg2,ie4pKFn!H&Knal_6fP.7sK4TUT(pcCQu!aRkBgo5<HT]fiYi7Vq,2%`tla?p3[8\7'ne#G&Y>d_'a^*Hut8TcFdPIYrj65V4mR%JeosnV>:#7a'k)rG+N-:[1V6n;pDR/%?bdI3-&>-?Kr8k0435lTk65e%>84,kjVO]D%=<Kkc#g]kQ)9Fnp\7*TSN>Jn*lP#K@`Z,h3D?<hc&ErrX=&+`aBtCteI>\@XOf,FH$*W<JXj.M:54`LI*jX%A?*di%=\,]r2M1Y9]rA\>gL*;lB8W9[K(VEaArQ0,]<TlOl^JF:)C21tk^9lQh^`h-mX2O<,?+ojLT?8.*Fh:gkS^?oo&1L"$]^G^B@/Fa%,Au<4E)t35q]Slq9!2SW+3rH###<]^S.F4$c%mmAbGb5U.41rQ!6Bs83$5;af@S:a)k!aW]p5bRc5179'1nbf8Z+.V+P22tY@rL4%W]`BFA:2(+jKY`2<Vk'%'!d!ONQPGSH[*)n]_XbWWlg%j_(rPb$sALq<3tf<f)T]M:/JHRCpe_6[s/?`^NSm$YZ^H!*<TY8/#m[3%bc3k+(u!9m-o?53Dkie#<E>ua@l9Xf=F-hjJIR6)j%(%-7l=]BB=)GfHI8'uPhI/5:Es/V^=Ebfdp08`'^UOjD"j0]kuV`%0"QVb%=0Q,tI'KOuFfdui*2L'?kmN-kZ&dqh8GtN^N7<pKa[lC,G:XW2lIOrs1/b*D0k@)SQZ6Q3U7ZF9U`t;j=W-Gom'ZbBAbpP;=1!Iq%;Xk[nFaJ`;!)"tR<E8X&f<As=>b6jRB'YDC$CA5^,(K!0,8IAi%fFsWi>QtS7o"cEouc,VP&[>8=ecC)VLGaK\5nfN-,ZRr=b7f4%YEbj@_,ZJD2F']UiQ++"K#4;Eebppt6L=6V22nP%B7K7'5F2,tfZ#EMaQW!%J\'E'L=n!k)'75:+=V-?%\/\s>'8A@6-P[1=C)/P%W2ujbP:G)Y*\=Ki1C$#)I@4ktP`07i(d@ijG(^[LhbB9HZoPZ60CDQkI;rUg0!)_a34Z9,q[S[A^Rr19rb71<D4t6JEq.+T!%mHa%T1H;`LDPI,.2uVe51se]-J<6Oag(TmA=_to33Qq3?e>m^k*+V5%rT/\;iu8^pU0G"\D>+dh_-7e/VgM["q@JNBi2i[\)#aH]Cj:=%Cp!OcjRqq93bU5aX6/NP#F"'93EChJYW#A7>([TRh<pnaGZ?J3nE]M+O*<7X1@4q0S[r@@T2+L@cJ#ael3t;h5>0`9eJWQ-21r%n%pF6F8?N#78<>a62YabPO'n3+8i.\b-5.a`Q;d@pC*hNCC:-X2MF&_$p[sL8\gn`c.f+08#OcU;0]/P(dln!1Y\OR2g(RMjAQn>Pk%qH@Y46Z*8Em+.`6@[MQ"Sgr==+nKA"/'UfmX%@qfXIdq.C2PdQGq#pYSlDu;3]U?ee[SqK/$gj.^6I74-+Sb#2fic=R&c["dJCR:%;MaWXnI[d.T5n5jH=__!j;P3T?P'cD%X]ER^Lho5nF4RLM061C;LO0H)bc*fA\\!"Rd\_&s0ZZ8l-#7OiN>OYe!82)b"*OO2I4:^%NB*K29H($^Mf[Ne]!A1*<7MgGS$"</Y0pZ;F>hr?R?'^Jdoj_U>+8$e>*imNPpmdj-BBUFY&>$H=L.1k3:_=#l'b_V8'e%_bGF7,%N&@*--FRQGflXpkF0o8C-U(Kf>oEZ5lRIiFS$%^WQ?ktib,3?V8a"N)f$Q3`e!9%C8N+UKZg#WX05p(q7lFXU/m[#.J&>pJ%IN*p%.%@A*IcVEPl,n&27c1I7Ds%P;@u[hZb'.[WflUeC'VYHbbbcoVTJ\n#Cq?paSQSJ'Ptb>G935&KU8j,8flUdGj=/;4ZK]MPl&'CC%Nh/sHQ:mRVqd[aF.ndXVW'XFn*J5ekKaNV2"V%(u=.#.J!!g\<bq">=Y'Q7TAlhSnN-rQL_aM)9B.>EQN(Tq)BDp\e/8Th/CM3LO%\l.d%V"a/s*[kh#DF4BtlKWE@/AKiDI]ld1hPX^Lp>)X@:A*'3^I)d2W@$K-_,GJNV^0Y1ooIHXh5BP]>[$6jAtSq65$L(E?4'&`%$ATalq<B0\mGuSkV@T*M[t7*!)h6AU$s*2Jh*B@a6U,WnP5iu-d+ptWLq0AHBC86o>r7&n:9k*#4ENN60h.bF)`^*md5-!K7N$rU%5')K\RJK*hf<CWZoeUe\9PtPu3:J_J"4W#L^+_Di10FJ9`Rs`4/mf;JMlLed)^MfJHS^C]SemAq1&<1Z:@bT``EM<GRm]*BqBs^N%*.i\9U6epk[k[ifd[E=PJ_c0;]Y.d,/S#R?p+"40Rr3I?Q]mYop\.:P3ZBo\b:hS(LQ7*uR=AJh:n7JKC7I=?+%O%m#e[?:@S`ij%#5nt!;d5Rd7/`)B[]B&KHiJhG-ZSX2->VI0*)C%Gegt3ER-dJHrI*JAQde.blh@[5/AJL*KSRk@<YDa]QR41,pYMH"g.GS/SBntE%>)]03mWIaq2K0j-AbOT:;<o\S+_uHY(k*=b$\faX/.bXfqqDo35?,nRY*C:g%/RsTqADDXU%]!%mUmO8SFa_bfu*M^o<_ON<jgKX%)U\egdD(J+n<3.gHOU9>C-Ic/M7)o6])`SW.`?T_L8=&k*9)[ab'0oZ)g<O4:Ar&cka@K+?FXeC;VoLj7-:>YOfr3\$[2]ePW.Y2%G9sH:jPIBcW&#q,1sMWM([cV,HQ>bP"UD#;a"TUr,N5e$8pViHoW('2c5Pf]equK-c;1#,,HEH(gW-/$(B\;6%[pLhgA6^*N1O/K%Z(P9%^Q[<bTB8SBWi>+#g:D6U,r)+aA21T+[/BW\d$bHb?$rS`?k'<u?FMi-Ee#tnSImbn&ej_9AOb<<[J=\_[@MO.=+bJ.#/OE/%f:POAZG@bjT*A)#WmiQn\rH"%eL**-Rr'sRXlB51jg`a'C6P$dHK,HU>Ru-CXph?G$sUtt>aIYqh,IfSTD.PAhgHFqc7Zk&/(T$r%**;F,[PUuZL?Y&bH>kb:F-"j52QV20pE]LeKrfhKEa3g'=^E9;\^@2k@RN4t0GaHMr]UZqSsPJ8cX?@EgNB]<lQj1,aUW@ghW$gr%-Kbooc]Qf1iS;/U\!c$[FQ>N;l03]Z;U`3YC:\3<chok@\(l=%`A;_Im^/iAe*sq-hqO&IDWIG#Hf4n)IW;O[[N:u4/kbPP?1-Tg%<B7"ap>a]8b!B7\GLZ5t_lDM,UUk[%QJYhtk#9a3VLBOiq/Ej/\IF#[p\%b$ej;RU>]gZ#D=>C-([(#Sf+Ou2pFi&JrV"IkX\-J-%<gO>@jlb^c6LNb-_Y<H?6"c3jUL."mGjWX>>LPFqk"Ol?]2p'q9i_`bq;g;iqqRS\-Y@W&QTg/ToN^SNd92*fF1XADkC)*=;h'!m%5J8\Ve)#a_bM\`,43]+7\+B9,60L-@RG"nff"#tQ/W_43s,sXu8iq$!=tT7KI9A!,RiLi2Z`TY'$56@;L#d-Jbl;6cYgBE8.?V-0%YG4'n[aeQ024iq`Z`GthXf=5@(,W`Y.t`OV<UNdla;l][m;Ab@2/$#oTD&hAnYrT?[e6?#!TLJ$f2qg_96Kl7?&IB%;-GfQat1j8%IDaI%:8u_A17nA`^H/SVc*6MnNm3cg\R'<a]/l%5\baR8eM3;`h,u/?rA8m[dd#HOH<kj.ePlQU*K-7sB5uRcRU!.&\Qrtnq\ZU=%LN6P\UMc.s33$O-3Io)#SNX6Qbr01LP)\"8R+9>=XbQPSbFI(knQkhaFq3<BrQMcG.*V\EpiPR!moKCO>)g5PYR(eDm&His1i68f%1&M5&]7Nc=:OEHUPCHW1BODf@e9a?BgIeN:%JD>W?b)/'A8@J<fVd$25WMjMK@Do[IOX\c@7gVoj1-W#c(0!6J=7_7U]T]CrG\a+%/1DUApO2_3E@PV1/5<%8=U`Y[^[*Sb/*=o1Sb7D"VpW.r0'KB$c8T$>K3Y#1Sb;SZ%^]_ohpWHRa(c78HI@KtV8MR<^mrG[.#k/s%%U`IqA>h&pVE'0TV"$WOJD%rlk5Z!$:EKL(]bHZcao]f3TdC#KpD($74W3?M]eif4W%:2l&_,qCp12iUDT=.Yl7qBB3X`0&6)A9_%eN.`7/AMn?j?qV#+HI6M&,m@dji^t@qqldcYKdJ6^.7uKX`.cuPcrW)B_9CmX;+NW4c01XO7MDi9D[OlPcmA)[4sedf-^cO9TSc7%qir\`,<X,8T@.`Dm1l)f7-;rO27VdS^NqK@6#EPin+u_'j;Q(NIZhf1^=lEFn+mJ1D*-gjIeBo@%94@IjB]Os"dRhM#Ck@/oU*Wr%)p3W]Y<L1+DrblTGQ$f:V(?@Ad^st9!rImq]J#"`rVG33RO\+*n+tST1Z`)JQ\U(B0>FmR6Z,9D/PG!oX2iPlf,9<gf<6akD@@,W%Km3L\05b'Ej]ET(895EaQ@;g/WaGf#/"=6<=+BP)B;LUY4@%l-JYCuo/"9V[m7,1Zf\^K:0NWo$p_r;sf>$T0VYBl^,_%_$O0?mA%IeCD<S<8rkoug.1R%7;R/I-dW0>0BBYPJuL&.SN>?[[6XfZ-I2f?`G^-!P*/A^kr&l<j3?)+115l^+G?Q&4orA>Ss%F.""F/mAhb%Y$_..IUfnbr2sB?DtW>_qUP>']uN'XhF$t:IY5DU2pC=;`GCRkGQ!9BHcRZmQe1FB4R]!C<PN;IA[$CW7aF\Bnuc?531jdkNVKY`%IU5H[E<p9koNf5JV=A!NorI:fqdO+'eUH,R^6]&mnI9OK$b\6Sos'$)9dZigeShCD3[O7kc.B\pfBX<R9t%!Jf5KTKZuJ69Cq]+8%Q!$?8]70E.;r=TL%H$hooH%@l4PV:PkZ(cl#(;PN3"'?EH[I'iZmp@Occp6Q_nYM=i`0_i4+5J"rT`cR`WABi]7+<O:F07^`-;.e%M_(go-$?AFHIo?,D/YEu?,(](VR9nY^$D"HaduT4lL`4+_H$H8hltL\K>$SP0,TS42#=h5Fb8Sg'k2L0nZLcEg/n5TZP^TlIe=a$%QH$u7Y$\<K%,&$uH.VL^mAk\]?deH4qGgZZX"(RepT@lrPRs-fq:b;qO1l\0p_arMLf;Gl=ZAd@,,WYH&,2BIVHncg069<HOh7_&%]J$'4k4%W@@)J_Vg$3,E@/aEFc_&s]^hEja$Io'Wo8_['e!^2On$pj65'hSHAEis,o;=);ps,FUFDHT"+I`_K4R]cQ]9C]NkO2*]%'JqhV]CB[BrUBR1q>66P-M%c9^YP<-J+Dd>=^D!>jK/>e]]ZB0GdHD2?(>^llYhqTBCjfW4_OBQa%tmkl1$Fih+KD@hEO*TG!910%qVc6Pf=7+#]+8hMO,Mc!cKBllF3_7I>HaURh+p8*]slk+oA0:#j*Z>:qki-8XtFk#^0]U`hPg&5m`f'#HSlJmJO&_u)O[-PM^M"6%Y;]c65Fu\@qttO+m[`T<>IWYiV^1q0DnTA)Ico=Tl!(W[V,t!%Vh`aIr8c/hKAW;%*o&WPJ<Mo"Qi=&SHmFmKp2o^#qe>6enI`UG%/kRRK5*o!<Q8FN#.jU?s:+e0fpsp+?qAmD!b8$Lhc_p0?q<NEXYWLJ(^07&1>U`/4k<@-Tn7J7OCWeAsS[BPpc^ja\YKj;JG/FFC%Y"n9P*rTB8Ii,rsi[h5!9d1tTNO-2:mI;u^cI2%=Ku.]LY)g\O[1R9L/@2fh9?Xh@\e@&_4-O^r?MTeC9/G>D\6YN8]b2tm0$HJ(%!nd+dq)>ch[AK(2q[,PNSm6[.*DJ0!r3S2(p[8fuFoQB]EE\s[FQYqKDl^JjFh`"'^SJ*6]dNP5-bFacCTHmHR/ZdH;D%hEq2#$X%rE%bLSY\Q[gAJ@&4#sorSD!TKrs>DZX8hkipb%!$0dl#[R/&h)5Nh^3pLY63kG%rse(5TO't@R5r:;k`.)@_&l.O&<e^G<V5COh,%E1Q3L5)SL.+7'_)H8ojAY^a:Vd/;6nb^OMt5C[q%5@B^Gc^(l/8G;oUe9pjkV*F=pJPDat9C!,WAh\Smp!/0^K/N5rZSqEtKtG:G%^<TYA;fhB9X5>l.dp'e@HB19ad[s`>ZG-'86mUF=!h.mj)>eZHW<ii=9XJmt-?AaI%X.12&hM36bU`_M-GTlSp9#C\daf4Ql/fNA%*e"!Y[X[SY'RlUN!SV23d`uI51#L5(hs'(:c\j;Hq[`,MqftBs@I:n2s4bD$PE*3Ql&DgTQ9!1Ec,@uRRViM([\b!cCFC`X481jd%PJld&:M,XEY<4npcW&?h4t2-+n(mf)L$>)7fo9XjgptnIWR`o$)E$7CdnSK(&aeNL+uX4f2E3aq5<g^h'qg&)En%qfZT7m6(F@Mu%d_W*`.!at'W?(>Pr3+VMTQsqcApT,+2??A;k5YYC!WMa3s*7:^TBX/.hojX5"JGO=ma<+,D-#s97&'?0?6A(d]1C0>h-F>MZ?]5C%^KfV1%34fQHi.l+Ir0,lb6qSP2QlYQ4LBB]o`lYc)gCuB<k"CMQ,PEJFJBp1R+&k,-ZO]FSMnEM:SLM2J*'Wh3ETK82i\G\0ZXL+%0XsDmet7X-hfb#lBCD78I#jUKX&aH54YX)f$]JRoO=B&c-,<^=+qWY7%fS#OhE#"B$^VlHjnXN:VjAHdl7GLr6pZqt!#kZJSkgs,%iFOGA&o;`uNuhV>iLYiTHC2h9b<:#dUZFRkLJmqNjkHiJr'%EjmAi1V1'EOt=,R3>Dl!3"_t\r)DAb?X4aWH;Ygq3RIs8TnD`g/b%*Lf6"l#n.TgpL9&$U5.;7CHfBa.5qJ]M.5sk!-P,Hc:)GGc.Hlje\;IlJjMHg8B(YD36/H%sMV'=-lZ'I9:&E[</]nmh,.?"5Efj%?p!2@PLo!hhX(OY^,)X4O1/K0aR[;8d<X:5EjK3H&+6('2*??U'7Q;uH+DShCEX(sq>LNhe\#>gV<]-5/Y-5nl/Lj;C@ajhVn(L$%?V[qe&XQo%rc;90i(LeM`15N6E9_W=G4&Ah_;d*DM%efX6+ciB$=tgg`0[=lSpiA=O\JTX@Hh1]l<X)jF7G[a`Ur*!Msj[q#VGnp%Ze8]B&bt[t,<Z'eHIc?5,Fpb&Ri]LCog)-&p:>l)*(+MQE"J[FF/B=C6uq`nn!br`Mj5Xr$0Q27%YDgQZfpX?h3oF5%^sn+K%7_O%bNQ;LbI4]6h0^*Ah3FLbrNnNBr^(X2[:=JM<"#8]q*mO<6e'VGm`*Z&I!K-4kke')X*WQ>YXl0HqjGl"X`#b'6Xc>\g@&.Cp#Wr0%Al?BDeoKJo[IQI&mhFK*r]ZA/:#5F`g4/NSH(5gb@HLX%mt>a'gOF+dhm`X@N?6f'rd=K3.kH5qrjeeqc.`bP:S3NY5HErH6n")$%ZYT2dQfjdX3kr9)BnPM<&d(n`>'+/L:6\ig:=li)e@fWLC]s,Co.MsOEq6:I[Xs=g2TeHP]4B<?s!4W:V9;bhq/C1"Ppr4s_S_D0%lHG0slj'&0EkS+E1iIlM3IdFqY\='@)]bh@/D36mG(-;QW8&eCn5+[Bh6i]TJ!`AQc!N'T5Q(/7dN@2e>"GN8ieWc+Z+'u`IAL&?%;B(\Sim0Q>L<@(epc4DKIBt&U%W=l31qb7s9+2YmM[tAiDjFL%;hpF+@GBZ&D@bWPi,1\N9A%n_lA18NmbFNIb40r.QD5Nd\W9VU%H]R&k^Kj$?s1J5NlgVsWb)9nrmkW!2NIC'Pm=45?'URXdNO9#Ol.5:pc/qBML#[';KBoYoa6VVHa$631]=E?qqY=gJ_>7,camQX-%h'ZB<gtD?u<Pl5R@-)Bm,0`X*BLs"EH.)ctqRC(=^dm\ei#>eo7qIAAO"B^+i*W)R9-hZf]qBqXhWc>fO%35`$<&1OO%35h:"N&(%j,qls@s-5rs*<+Oi]*<]K/f<%H@'^ZgjS!Aq0@!EZ-^)>>'g$=W=S/^(Mhjej7gUoF1lU6G]S%UIQ_[h@d3-hcEh/'Y]>,9EHF=J%OF+mnZGYhkL>Ht;`Sp"Lm.5kKmqW`e8'a3\[4:U:YFf_45$7g`o$,X]$g6g0rPrY7?C<jc=`$m:F>gj^@u=Du(NqT>?hohcs4Ncc%qf%&HLU6TnM?RAs@-7%Y?Wc#??pU6Q>hD.71:c>G]pkPJ\>$A2YTnafBJ+Sr/#;XX<*N1&=IO^R:3USV5-GuVid#a^XhXfK^?Q]o%@Y<p/V5pBgXm*6(lHe&Ha!]a3rQgtrO(d(9^-:?Y-P'=Xca_@N]SOn1&N:V^(Wi4^_Mq%D76F0eDDV\R_C3[=d3uY`pglg11^Yna%[kcL/bLjhh_:_YY^K+X$`.Q(IJSa1M`e-b>5a`'c,eqP0F=2;"dp"iJ[D2J'ou6:_a5rZ6Qfh,U>=8J.NRmamWmcFSHgObCU9FNS%2Hi>)B@q<@QEbS+Dr@NX@b55$XVe'6DJe3<>:?VmR;H;FUE<cbeo8$n2=Td2RNUSh$3%RrDn*a*6@'PWl&0DKcpjKff#XFt1J^s8%]5;(2D(J]$_G9a=TZA-H5,"H,MaZdD&DFms[oXD%<1ifG^<j?Ge=<u&rO..KIm.*mgi(Y]JqFl#9;k*HaS5;6OFfta(JG_0Upcn<%nA\e&YMPGK=:T&E.^N'Y9mNh+W\QXN^Ks$'93%CNMKP;k>,oa3<-7tH[T&Nk]=)9Z4I3!&4&t.s1Cd&XR@QtJ(?;c$Q.`.TRlF/9%<LKE#fO;g5W@FB)CV$C$Te'2TFt0q^Nn%$-[[#RL1e(,<)&gAt0O@CPR@VLQaMqklRP1pEn`f3g<HSM?+[pDb#QMOhP*9K4Lk051%Oh<P7OF_(9Odsao\UeEbOdt<UDJgR8;C&`P[JoWOj@*e\In(dIF6R<Q)VHNL?C)YJL"jBkKU;^.FQ#,3$:tHO81r[%7NlX7+2rs2%Iic#c\#*U2fipU(ZL'iXl"Pa^42/G>7"\lcq=s-pq<%[+a5*&MOT.?55Q!H4-BoHF\3WB0"FtA2Zt?l9KUSC_4E!s_/NrK-YFHS=%T3RoTGQ4/B#LKB8Rie6(9\c,![X6NtrkpA4`n@-<o[=e=9m\_7]p:JEPlC.#s3nPn\UdP+Fm76(1mO[b7o+hfrf@&':B1)`T`8ZA%T6NBdjdS&GKJ25kr6T;9:?#&oJSN5V+&&34r4m0]:8fL%5AY\/2rVA?4%f!ddLL[&NK:`&54[HbkCsY*/RO5!f_8j,-#GS[-[_cE%^>jJP?5U'J,U#G.%_S1?M&km,_agk"K@1N\M;)'fj%oHAhc9dWi?Zp\'/@FdWO]3a[\MU`h[qD_W@QkKg.ju0B!&_Um0(Rdpo5A!%nSD;?#.dg!"9bD9"G%q^OT5$%5FUg*=-8\#-r`g-`$*]&O<dLD)re9=0Qcu#.4bap38Z2`o\DF5$JKLZ@fh*@o][VT2s%WX38/iC%HQb?Bj3V:lS+m;UiWmteRkTd:N=KX^@n_r4U>]R9,k;VN+<cuF=kU%+#m.^Rbpn[hM4IZW7L'W!X4[/XK`N4.+4/l"JO!2%UqJ.Y%lqH@,oEZ*#5Nir3c^h;o3:/]rok.#2LY3RBKT8eo(C4^8`kFP)O78=PEG9hr7!#)JqI)eh8J%>)>ObK4@;%p(k!arkI`R9c;%E]$%>tCFr@fcd0M$KOUI`F:SSm-0dqE_S_rce*km`NkAX#rFl6@UYEg4[ZV>noCIC*3<jCm/:dDdG\!ld00_&3gLg>)Z+AS'[`-'IX"`%_#)7c2teS'Q*b8Wr![Vu!mL2J,_OKpFKo</$\EY@f-Or3KMU$k1J1Ul!8he\$HKMO?D'qMek)SaK;#>rg:JgF,;f&&Hg8f]0JPo3%+H0ks'u^6JRuj6l*<GPBI]@Jl*&k/>8I.dE;"b*LnmBL6DpiX\rIC)Nh3]lP&_a!HI1"Vk+Q<#HNQ;+?:U1ID_`^&\3/DTFj]TX%%'\uGJLapBV=@,iV+acQKf$Pa0\$/SE]#=uX0uf'u\N"sDKZm1($\U4\",1m2OLkkRT&W6WCm/9[?%[P!7#sT-o:SYE1#P!e-5])!%g"H]5\8dT^>"7#_DW*.k,)Ki3,LCg'kjGEdTDt2C]lbs;bWp>8a+X0FN+')7SqZ636K:&!%AEG#G%h6,cm+_9H[Z1RA/O]MaC@<)%DLb/tA\^J8&!MZ+(AAU1)0.7E-5r)H[[4fa0.1ja/!%E.<m8^jR1?`tN(M(Y(LbHZjD+L`r;uRRV-uY4o3e;_[ZV532c:O;g'rWZ%pl8r%0WQKj5i`fpiM1\di'"Yp!A1)Idl^dTRK/27=E&h)?4L@^!N.:-Y$n4S-Y],li0aD2d6JU(U$;&!nZ?c8?(UV?SArL+$$UpV%L1W+CF6Od?Vd_!j@2LaBG'WW2"S#8a"WLTa=bFZSmXbB<\3Sbi5;8\4M5%CJJ0i!Y\tWNtZ$=iCq#:0?"*$7(aOH&mi<j!'`-:Dh%b@aMqBe`0jkJs>"92tma#Y(bp8HNRd$QbimV:%:.&4P=r"$3^1VaBH;,rT(.Vbuf*g_4$fL4jQ</3su+>sC7QJq4#3YEB_*f8jIA%l&PaEEidiSLH+-eUCG<E)8hj1i[bDZZbKe?Sj&cj$6l?50Q*)-Tr+mu+(8C00Eof)Ld`]6=&p8),G?9;M@<'C?goIqP`!fNd/6^`%22XZ4#bl]6j"P1N,Y8A8PQVk?P@7l688l^m(ud=,,GqR_VL&FR_F/Q3E[/d03uuC;q]8UOQUHW44-r8DXfY6#"gRP$5T!c^#`\"u%494=kQlI"NeLL'AP(k.98IM7oF'*H^ehKXek<aEM[YHh2P*'3JAP(aQ4pg-s=*QIe0caHYBrj3()C=t._KF9r`.!rG,o9*Z(5,F5%P0M'UK[`g,GY15\'TFku,D,Jp.t^.`J0^T.1>PqCkRunL\\0AXj1BIZ8#%$34sK+)-"0YQ$LX&naqiD/p%/snV?3InjeoE65Ah/_%)KU`F-eru<&j8TE&"h8EIKCR.+>P<=.FV<c1::dAN$AL>O[1m#5X\UtG9Q$n=;qMZ'G:cT]T3--&e-)1bR7uS8l2#H3Jq@S,]]Uf%El_?KdQqEQ,*_VGq9FWHoj9@5=dU!%`0Fgs-OI^fGa'fJ`\]MDoQc6bPf<;MR3XF3D[OPl/9Xdm(e<Vr(;Zfl>X)%F5p/')C#jd]%QTe8,3?ZnaQHf#8a=)d0S;2eii8s#"9MKDh3R4!e4Rq3s*'b`n;3G%%5dhIu%\Ps1OX8;p!<dIC5n]";C_aIo%0Ls9>Y>\P#Z9?t%&d<*-@C=TLP6"l'kW)<5S7>DGD8ngp?e29]F9]fg6O#?Z+cZ^p;nAS\U;^?L+]4uJASm5L6qiCFD]hU;0mCle"2PTb=KE[>1NXXq%%FC4_&/JBHb?+k_!n"@`CESGIdMZg#b]eGm2'gP06^osO5bD0?aA]Zq=Xt\oO]KMU25CeA2:sTk%5Fi%XrCKE+bO=,U$&YcKCg.X%7KoL2F.`blQ;@fWi46!Be,^<gHG`0'Fbh;gXRq?G#Cokel9'i4P0hAYFb#1S:^98H,rqZZKJ0(PH(b^%hbf\9#=oDA+\P3D5Wm&W%<2u].'@q\e)6")W5;1PqCRh+uQOri996CP!2^d,f,Rf<q:e)YFkg6&$"CZpW-I`(5HFkKQ-%RBmp(Tj[RtUtO2CgH1ocC/Vj=7$:%MCg#J7o$W>S#K;QkJEf%MU"Ze=D1(/k"cqa_.Z)-hGs.H%;L4s;O/EZ(P(#8[NEJ>h22[fn@aeR=qI%A*1QFK(pUXX@K?)^-D!*^%T#JO7UF'#FQq6RYWK^RS=>m634MHAl/uZ6(W#3;UAO/Ej#-dG.7`Z<r#,A*7P+F?>/XN?_'<-h*0ib$/LpFUSYU,@,M@;hp%MJRg%L!dku+OHl.-ZZ>7pT3d:4`CY,LMar-eXA4>Sn!R)N/#h$!L0?.4of[2grN;^c%Q2g<D[Ahq171kP*!40M$cY+Pa;+6RgXejMmGm+%V(OB_CV_\,;Qu<H,Z7h.:S?Vcb/=CWRmUN8j@R_("CIB,q)hO&qN@qF9N=ODSgRq=3JbEF/n7nE,;fTKVPskWXLs'ONY[V-eCY="%mpJHp;(Uh1]n^%P:)Hr!:eQLb%gH%BSf;D"K+6QNblL@pE!G.N`Z!KhLnaDW)I_HRUr'\He&"/lM*'(Sh#aChH3Q1BH901?Q@"IU%SS_Qg_/tuY6l6^Z?3j[S&4^?%b3IK^STmG.&Ia8)H_-AMnR946:*ZfL1ce#t<l^_pOl`sOcL^[m-*(NO]Z=*@FD!m;C#+ATE?-iS%IE)uP/P%@o>;.Y3A"GD;.2cRce'"0m2Jd>s`&?/#;o4T$>?pX9-l^nL;l(@%i7Va$N4;[AM(^8hYpLD;dDjCH1:/j2CUX>P;Hg41%A-fltH>`M67.jYl[`cNF96;Y&/S)nQ]!4.,ML+8![\G"u$mIB6U9%CE,gI+\lBnF2'LL!&fMl_(<2Lq(XJMn3k\8j;YlM(7K5K%k%l%3MUJJX-p9=h,G>NC'W-QtZ#M'b.mQ=Rsf!_Fa;V0eV:$C2;E2g9=Via1j0>,<DUOID/<`Uh@,!Xm.%VHKW8,WFVh$#VMWrY.^;%Hena2Z-JHOs0sj<#q]`LP[QkZjO0.&+:LS`.u8a&Y2"s5,ch<,FHCGsffY1p7'X^k6Jna*.0NS+F1NW26>]dPF/hn8`f;9:RIig,%1)3s7,^RpAQn";M`HjlgKLtCnROXMOL#Qf='h:;;UCu]tCr",V8Y2B<Z44@<+^N.1.?bT7W1&9?S"Z*=llhLtS2(D<lT0;_3ZrmR%Cm1U/;Uji/!TJm>AQR/C%*PFF6W$0+QIg2D((l-!7GIk\,"As,*[@EQDZHL8D'BP*0PZ1GY5imTf)uitnc!3]L`rbCVe8Q#Ze"S#%1aeZg[%kod0Hd>mZ&&6#_#e$>OI"7Mg_1i13H#I:^6?X)Jr-j$f*F+j:C@iHriE"c65r8dr'DPc/Gh0?ZdjM.Eu8Kn0/I&C;9+m6%M'>d]0JXG/;[RjEffk%EfPmL(N$*`j7M%Xn*(/ds-ihuCA2jUK's;2U!eS??n2"A^K1:3-NYasoNPiQo"gN4WB=n46#rcrX.M"n,%<e1]1Lg<AIdRJog@T>@g+G44++G1P4&Au.g'El,XZ'S`j_[Bp,Zi0)g,RK3CA2+1ffT!N`1P"dP0tn%?%.L*kXinQidd9`m4KU8[%_D'">&6M6XP1;$F^6BT/*3r"L'6":Q=UhW14@?soD,"8F`O$a;ngk(/!aD$H$>XAq6e8^uE!/hlJPqe;N8@I7dnj8#M>3O&gB<gV%it'Z#Q=,C7EK7ECp`asEK5%B97W's<e31Y/(7(^DZoialJnNjW6>j-c0]\OC;(4(X(il*RED`;q`1\Mi2CpV`X!+r,W2pc@K\Y8m%6d/qm'(9C$DL5.-]'9Tr::06E3ZdVe#pG;3Z'/Uc%+BVag;TY:&d0F7PL"c0W@^5,fKkp#'JTZ)fVo;DCKn:9W]5ibR;if>"c/7k%1s:&o1PU2!@1hFli%[X#=@49#55aFH$,uX*K/NnO5$L5_,:(;sYUfe)"3MrXN",m=iD>+LfWq;=&doj4/UaOQ4Ra&T3"dOSUK'!9%r693CH=DS-/kf.\BTk_k!6KP2'"tb7:m1TWp@hjog!Na>G/4dX,@.S`(rnleHQ-4l55;A5_#OrNS(u7@s!uduI..<o#,m0AXs(hl%7%-[LL=;j.9>c:^AWT/-JJs%]"QJJpLnfN<1/.Hd@]s%U<`iD56^`o=HH2S]Zsd/:f><X/82i5hm1Gq-"gn/fVs5a%CN?YdaI!!L%QTU5q&0hEr`WG0X!>G_nNC^<o68t&.PQT3H@+ejOR<)adKJA2V3ZsPolu40i3g-&GlY(E*#@b:qA""K.*&<bsbW>l_Lrr!l.aXl'%l\:.bp)^#P`h"]H4Ug?U/k?)bab5V?ZnRia2O)U,AUaYNT?IeH.4:Q2HAEPo_[F.>b`IWK\:2L1p<$Jnp&[T51ZUtm"k32;`d2US%"kiSH-UAqYN\ptn0]2-VS<b^G;]?"ig2WK,P<MIQ0JB$]3QiZ`W_s@RL:Z2Tag[a"o:$-$*1EO'e/<m*2qAhf=!`P#4VT=^s5_)5%!kH%Km9Bi^]C,tcrZc1n=C!ZLq9\Iph8X(f$*YP5HE_c^[^JF,j@NG`-75aCBRokDOJBJ-"kq?iTpA9P`C%XW2hcCs0L;sDbkFO4%ZQPia;'`S;@O=t["#X#/[%L\c0o'Er;b\Ej&qaX!PL!@WTdhThd%LV,@TSBOF"@jKM]Fj/Yer3U$jbl!OrU&:Ag7Z<!_?fG2-6@P%Hh]'&'FERA(J'p_,Y8*\%<@XX<\(II\iT2UdS#G\7PY/^pXfu8J3d.g3Hc<M2e%]+TMZOR\MN?o$CeM@$;?+M_bO,^1qfF+I%qsm%2_B[b0>Bj[=E&Z6@]+a\GroT8JFE[sDTW<!''7ap/#mKIGI$!;WWFT/oS!s%$GD0i2r+\F&S@2'U`bt?cJ^5ZkFk'g@AeWD^7/W1%4ZdT&A9d)iZq5*;n$#\*W?kPBeE2_>_RJt<3QVEo%ZWGZ$E6J_XDk&4QIK:g!^O1LdK]h$bTAP:fHQcOj+M$\11s'll,2.FEo`gV%A!*-1>2-C'Ph&/%QTL\ag*k<SFc4i!XFhKu4Y?K<5\m'0Z7j1k2^C>;M=4S[+3,;1&c<Gu8irpcRk1OO7j3%6L/Uj(W05M2";6!/%DBBN^gL7449G#I(>sliCdXH%oM)=%%`"+SQULLNU6M#;.9+j[@".Z?^R)'q@YchAN!8Ij:bHVK0AF?a#nkaoj*)BC&a_.1TO3EWH%Zs/A3Z:6(ujQJ,W`/#Ca$LHF/s'Nk`>DSgMA`Gn`B,@E8o,C()@:\nW30ZSP;;,[i[nm8Po&6mgR_^*\^^#USI+H1,.PR:oJ7\Tb%/N&>?*'TX5npMg%(.K8_&?r&>*#=ps]+X-sKO:$T\d`l&&gM7\83&;m^*4oOXc-N2K)"!Ia>^81JU))K?@)5hiZIRhe71%#4,Ysa%>f3ik"-]sC7!pD/%]@!=c!M62g52O,p1_@B)G%)(H<T[@'had'c5%[:c5qSH"8`E-i]*(>^>QpUdLk/[O7!6Y:U:mHI"8J@U7!h:%p0EqobS^u?,OPBg3LXVm(_':Q7XbBVk'Y(9!RRP/RQ!#JE)geA%M9:QR&-Pe>3YU^ToPF71jABDA4mkskM=U/6L.WjU;sNW.8>?6%Y%J<5RK<k;.%YjI7*?u,qk;]$Q75jR<f70Tod]ZJX.3>sO=\Jg0S`33U8_<"QrmKI'ah,-,Y3fc3/h-IX5_7lVadf*OK?-.=r$lM%?_W*_4(/[=46U[SBVnc1VJK]h(sML_2CQq\AYW81X5+/99WQ<%1_E"AThQ+p99.C`@Uhk0>Cd[Wb_GpS)TrStMh66i9,VG?i\iNQ%6["kje6^i9%WXHb@Q#2@%%":R;@Vs<ie>s`ZmX@NPJ-1:^:p9c*GNg]BsG`RN(fuiL[<ZS,Q]c='bWaZ&uoVm)$H?iEd:P"A-%^d%,0`(=>g_h'Nok;?Xi<WuK&%]X>&cqqVT5o"4jm44#9q99`>OZQ7NRPj=)>EtZ!TTK9S,YPjbVHlJ_NG#k(Q:em,25Opo3G0/]0&W%/'*Y++qFi,'0I/,/<]mk^&I$>\&^727M]S*)^@u1Ruu=TmEXZp)-Oo'E;Wakqs\q;XsJN)2,#RkRj!6ZD#'PG(nGo7akqV?<f,A?%X#J3'_%.Pu+rCCjU?Z%RMu]/L2X3O/iiR&_igcd+Qc3lt0U9f!n(sVE*T*"Ld:@Wc9p(`j+@]UJ*N>"=Y1ZXN9L`QF^;T2M)3H(6%c4Inm;/#+c.M,<_Ch#"?9$iVN,;M[*MY&U]NtQ:oh-*qU3D2Z]LhqG"86-r[!of-@@q7uXoRUcqOWg"sjW=^<BHpP9)#Ou[T8A@T%'=a'6Zh^e8K<<B/@C1-?N/3=#f2jk9K;P&M"sj%8#16[ZI#S3fllQK8n<@t[@!Z/^BLTH^%@8t/]W@*r>sIPndEZ$K+=GX%\A8T.%87A&YW5Yu_hSmI1&SO!3R3Jf6U]&jmDTBQNJgOeMj@i7o.0PDDb"OQ-+UIjBM!tKu,DqsId;dPPE$u3%f5n&POU6,MX]Qp$-jd/r%B*RKAR$GAY:kB[&-,"(E`1K>2'r<LoDhtQ/PE`>&AWY+;`]hbj%l9T.n9Pi&(,37'Pqpds1ig!d.[:Z,GJU[Ha!!O+*MGSEHAA3>%0Znr'cdO3p5XOn^U=VP$[,%de=2nPVj.VR>p6D@IlJ,'15(dAoT>FKjO$V[q.Kl<;=PJHZUaQ+%L`L'9ndMu`8=r4"UsEEQkp'^I%C,.@smoa"ToFXLW,fq3XCn.4KqEXEV[!c/?5)!*0T><A4USC6K!Cl8Y#c'&%)X1\kJ0usb'@Ko.SqZeS,X_DBQ6JIr98qDnBAKo&%!n&GCWY9UZalJCh_RE+tB(HgDL8fNN)0kF7oHLO^*O6>Xb^]t?A*4='hDoj<4jF1-6W*9qj+Oc6ZSjOI5Ep&]TJ`VY0Jk_29P^"L%$hu6[dUl6:;2,Hh_C<@fI@D!!FM1'l2G/GXB85;/$Yt94&1ojL>J&<(!6RV&qT!JQEIC/]AS5]9lF><-n^=42SWk;'"`cWO<cOq;%MV(kkVCB<CI/Ll_$A)O&Z*uHY2=iWZ'kVVChZQ]A5n;SC*C[\\[o1rUSmkEgQ%+N6XLKQ'beSFU-#YOiNR<utUr7MG%HK_p:h-u^%>hSVB%?ZTks%3hW,>Go4k[7B^$H)QT_h:lt1b^YiD@RBWg>!fEQlm$!%`siE,!]8B!58]#547'#3GTM$Bl2=NV4+HFPk5S$@jMqP%n;<3@"OTO,Y1QhdC%=mfJugW:BfZq];qZI5XuGH0/")cqS+uX'Xo\T,(;N]S.d&%++9W2WLda7pP97G^,(TOUE"raK,k0\b2=WU5%XdrLCeEd<\1*!h6!5saicfb(K@OrB"Wa!F608"700\qf*ea_'9aP_[.'*f.to)mn6:ipS#*hoA2EG5YD-ir]?USeWb!8J.t%lOZb%H+Su-&3-9"YQG)^5sSY?5h2TmUn]<[j<m!Y!YF5,:.ntEa^@<\fV!\ffE52\f\t6e7(uL_65s9.^]AYM=L5qXqdD&OSm;-o7MY2.%S2]Gr&qNFjq?RClmqB;+b!A9)6iP:gfl"ONcV5?JKHtO,@;#^X+?Xp)-eDE4bJas%X=l?[9LhFt!KeW[5bLJ\e)n1R)NELfKgGir%>.L`NdTtjB=/;jQ#;-U(1#[lXFP86mEPQ'(W=GjrmX!qM:.[u0f*dE=3Kt64!#=Ttd/\X]:mVu+>>YT]*7:2ESUl@).#iO:`uVrR%$+7#Cn\OD(iVXr8KRun;,`.<^oqOX0Qh/-OmrLUQ/)g_&\8A\lL)M]RK3\Zmfe=\C)?ANC$,Blh:+HQZCI\Tfa=NU/6kTrg1Xj<+%!/k7Vo+Tct5UYS_np(NhP<bJRLa*5spQ:`Yni88m0Eu/$83nA]6uk&MkdUVgqngp2TSSsp&VUHKLEMbtnSo-bohd(AaZ[kCE'&$g%]fY#C]uNO'K^Q0`Jt5F0.2L)\=;q8IV.NLOWEOhV*M"?%(=D+0f[:(nLRWj/q$?`dh15=3"[HgQa(9Kn(aloaL.9%l:_&;!IE9<G%IYVhq\0EebJB'>c)rlk"%0/9pq98dN,nMBS5!^Wb:gbiAVPide@?8]P]4JfF.HQ[X>b)X>6+!1)]t9H"Kba40`\\pY.UZ?19%C90%SWnh[2ipASAoS<cGqLIEOh.Z#eZgL-%^(k%cR@R)./6)Lc<tt-%02WbUC_WQ((@(\#[Jlfo=h,4kJ5DG3CTp@`08CHpdUX&_EPhn%VnbunD1'8p0`D/K+CtVk(>2FjdZ-tJJ\U5k:_J_T^_4fgqn>HY3bAjA:lL+>RV=dDSi[pNabC&XF0r)]Jh$"!BFU%91.Weod[c[-%o3gP:^flm6i;5f;.^@:ZH>t)Qcdf!lSCJ/4K.mbUJqpGB\WGr-:U.Es5\Zj-:pHtTCgcB`9Jb<G_p$YP--0hb;_C$=#V/U$*Pip=%%Mro@N7j/0(&:QpkNK-%b&ps9l7g#Ig(Cb>Eof)cLe,F@e*In]7fl@D%.T?SC/mRXo<jIBkQs7)=<oVh]E_'Q8RAK/"-Qd^2?[#6%7!QsaO\PmFE>-8pq4&%LO=HL"6?rX)'99H)<G2;M8M#l8k1P&Y*_Hk@39hcJ1<?0MQ6@-dC)'=MNGk=70YRb<\:$8?`uokF`R5ic%6AagKNQ$>WQHo2*b^cf"JC'`Yg/nF49,Kl$Y-+_AJ@M,r64gR7&=4$g!8mU`"BPlnR;Ip)KN1oCl,%*YVh.nh!Z$\m@^gGb/n^I5%cjJPfO2WObWoZ#YLC3j7Of?6q9ommARKN:1!?D64A2A3C)A^l-9?O%AZ)J?>ga&a4+pEX2('J+fJB0WHoGr2iS-jXU*WZj+dCM3%%e"TG1Z0u<*=tL_kLFjI>6TsDW91"@YU7rb4$EHZH"$H$-<e=:PT;+[bm;<$L_T$UU3*c<O!'&n:^2d]9Hqt*ZBF?@6g)QdI,!]9&%&X,/#Kt&W>69np8k[UQM+Trhl'K?J/nT@0HG;rk.XZTBS>AtItEB9$@$ZT\3EYGuFQj`<cd@)3=4/X?GJ0F9:E5[t$LUplZp_MX5%em5P.ip&Q^OQ_O6LC=bi$`aNVA0#h8Z+GiceZfL?$UT,:CJDrK\?8@4>\adtdLLWs3*]hUg#34pRUa_Ie_Z[@_(3Njd1#)t*P7gB%B!js#^E]kV@\A>!`KB_:XG_5R4j$a@k@f#Q`e"]@<Vo*/Z33;>U1GIL"pGIoh=`[2kNhF;m#5!PF=&X/Jd;iSO!E9uD'C,l*7_kO%lTb_p$j`J56Rg:t)7kW0@+,t"'2Ro,0oY3uBIof<%"Yhs#`f?!S,=+tQpW!n_A2`78bTi\>\-0&a@#G*U)`rSl+.Y8,?8@&&a,/S%_LX7gYcRs<3@A>?6<]N?fG`fUg',Bb#7U-V,'"\5Qio\Z32'PC5tJ6g)5BN_jMIJoBnB7#V2n0Y%7J[oWa_mV$eo2/(CTdohqR11%(b&PmT*GT>!Ko-*;3IOua5XX'<*URrgj,]K3jE;BPN%I`aP;n?CVX&ci?dO2\@quGZ-SP98no_-G%7Qm==?48.=lo\J2*8KmpMm*%(3?2`O2oBln0%?d*IbnWK1st/-6-bJ+KY^dagKiQFs2Z*UFT)6$;L:*'='I0?^LEcK^FR\kr;Fk+Mi;Ja>"p6Knk\sYWICAQ`L9^%kljUsqHaD_rRSH8lT`6Ea[mTL/mohjP:m='$2m0jK*?<YggWcXl6%N(:2b;B/RO-Z`N18VKECa*Q:Tutglsc<Y$D>NUg1Xe5q$2J%,`sW,,S850e&l'S22C$;E@W1Ph.RV?"Gm4krKLk:C_<gW,,0lGXEBo\CLPTuVi(qM$=bV6+eFZ!Qcp*XcoN.la=Ijq^kibf_0NX:%7WRTd%f0\<MstB+GSD'+Ar?t_!*\/Q2OZn26gV5(AL2?,;=4rLM1D73Ge8AN_LT]:60pQ*0LKq,[cmi9oecc,=``TT6rmQ+!ZVo0%aB,g'Z;psH%,t8)%jAr#efBdpjerG)3bqY".TI+B#8i6mE*5:feflkc'*nbb&80)4D]f;n6Q]u"+$-.P;21-1!4YcTlI&gs=KF!-%XZVQ#+$j5L(+:2XkH\>3\Qn),HdUg1CUQo%[plY#ctgW*C^]jo*?Ca^2?4=&RJ).BZVPg@XEqB]0L4qH9Pr.g_aV]JErAD[339_7%/<<oY%`bf[c3J8G/f^VY3GAOUOR+sl26'apGYM:*FWKjFKgpdkG3!]-MC&=C.ND_laZ!a!$j)%Hpu5;+9[5"S46Lid),a)U@Xhg<%ECEZ3R54qY;Ze?h+>8\MXO<sLJh;L2a`P`EU0PgYd@#gWMY2Z'_bS9!B0r`c@G2>M(i"+=+Hi?#;?n']'*r\?$BS!;$O:e.jhJ@U%/c_%IM;i4mgF6FT2(g<[H&tCh*RmuDft/-k[$C/A6\Y`Yl#7)2SVHHf0jG><`"F)*JKEo,7D]CSKhVpf8M-[S<ZX^CP*FAT<.cS7%;^W]]El?JQFKr_P1rZ#<g/'JG!`]l_)hq^]_bG;69nK\lEA4K6"2cBm#^,8T9>V8qMGFQ_IliVL;BPu-DN;m39]6^+%#:iLEStNY%O:0Gi`Gi4H'kNauIjN6D,.<T0McI8lXU",^3X,"DBVIV3e?&%.iC.>i."K<O2Jh1Qo0G!Ebg_D-Bd@Dn!PXoH,d/TF*_B1/.?"nZ%)PnQ-EP)HL!$W<eCLV64e?raQD0cE)0d5j\o*5j%O#ekDYnp`a=SguQ&_M88WS_-u_3K9_VNZuP<u7`c!?pT7:(Y+kEU4's9R.Fj%'/8ZTljU</VV%@r/<m`f$t4VhC3E0>-UR<ep`A*OXnr`5+B?9:D4%gA\>Bo%#gb]Q<p:`n5*GNt;5D?4i)h+Tr(2PIdYE\9mVkT.%&KWb7H9C@$_8OVrS.H^NhBG<l:WNK[\rjL/@=I-ba"YbgMKJ?5W'*,7T8N"tKR5uiUadu$64hPi2"c^%ConOKPf.Z3\r`/;C[DI8%8B=#)Hd&QO+0_MMFCI^ZNeH-I65*8jQ!e':#X%K)6s!9?`n-Wb(s\%6`.qlnU#%U>#%GJJB-L#JhZI^8iU@#3e]8kt)V?b2$Gg2f%'6a>q6ni6bSbUZJ=g1G]W!i`?2d#0"8!6Ee<c!.cTU>'aKBA8G0leBF].O*S1hDbZ_'m`C*^D58i\#i1=BisrI6nOa`DEXI&j$eQ%g0]t.>]H!M=r,=j6ft6L$;E)n<ec1OTk9YD1b%M/Bd5eI(FL]%OWD_RA^<Q\?%lIBk5A\s#W:%5f?/2q_TGHK@g42P&/>K'=qJ;4%G8M&Siu\F,TnRRS#6NR>*1`c@NNY-0TE'kK&6b^L:2uS#!FQjMVZgS;'S8kD/(naT@]_GH'5_!/XdEls60r,L*J.^R"=bk:KW=mY%&[3N'7YkUU3#fEB$jZZS,!Ph>A9>pb9HfN@/lZ85%LR_3&$l/V:Y:]RL*u,NW5+C=r9,;iJetLM\L)ZWD%k:#1.Wgul82ZOM^"!l%gpCIo0$_@5@.Q2>0X;s)[$Q!D98Q:eZ?mF6hlsad#t]u9J/=g=CdrdT\03(8eKn@TAf;7s:*h23J`Xt]L:rER=__$S."LP)O[]*U%9uVUXTh%=O.#:bT&b6LZ23`XHm8aEaF@EhV6AhF,KGHr\[<+BRKge)=U52ei8*e/i,51o)Q;k)IU_QI\;BV05cN2u=?nNE*9*^1Z%]h%HV:(3E=0e"I%34>7uG+AdH2H`QoI1Gf2BJg-c2e4ueKe/%\V>:T%8M&*809BL>]]4[Y%&+b+]r)1g+WHsbY%/(N'faCSfP$fV%E,*+m+c.U2*Jn><fs.G`i+n!S;$P^9&nRTbQ*iA)4;"s;\hGrX?RPA"^3A4?lu65m/4eb&dqF\:DL)MCUa,\o@IVBlGg^'ML1tQ;%gV76s$':I`&iX&njs1elOZ7W0>c"RH2PcH%Q3@Y=>YYJhg&a6*#1<7(Z@,uV5D<O;>VdUYm'(VrAKn0T+;#oME'ced%,c>,]#LW"%;C,lV(Iq'q"fOgS7)1'>e'g49'H,QabpGj]Obp*VorV7X8@/iU!]+6M-)5>ple#+dYScM<rl'IK6TDF`&6?gO&N:%o67t2$&?!(V%]I^3DXe1-``Z."S&6<!]30HWqPYMoN/=[k+f@qkbk%_^jK1%aA.YE7RaI\"V$TaZLop?KC=DaoKefV`F$lH<#n9Nsrg9AP$*gR17%W'p=Z"(hd!gRK8:PRuACJ5q!>)'ETc^mbMuFYs;4KX-F>Z78qSl8]PTqlI:7/pNJ4"q$O6VM\XFM"uV^'A19Z?pcOb`j&O#GRLp!%PUgs^LPlP7E2a.WJF(cejuZ@2^5/+QZ>rg=6Z?%>"$XTMfDqPh'<uo,p._D?f:bP=_7rZpfrsD00!9dNKmh@_NaPee!q@cl>^o#T%7)Z9mpq@FTn$E5[=to&.@fAkS%(k&6=pe-_9%s_64@Pr(HT;W=%cLK/ITEE)P]>=uUO5dq&OjTg>0>GW8!kT@+<^S%"P`Nf#F2K.%9<qt0<CITgBfQG(O12nXYh`4H52o-N2N#nE.&7)5a5mcGRV:^I6Xr>i+H\>"e"q6@oSM?DKu=J0)PNr9?L4@7GS9$b&'<1mkjE1i%BV7cK<GlPT7]B^A`"bLAEM7A=_^<2D]t[C"EDgm1BV-J_`U6NuI-heA).8dg;c;1LKO@"`h,/k])N``.)CrLOpo&WdO6!MY>Uc3p%i,dO^6>,^3g*_l5VMO+3;IJ8G[.L`b7/E..pu3d%*2EWQX44k_JkB4ZUgp_1J9SsH\E3K<O!QXeie&.Am$p=Kd3cba/g+=;"nIjF%7sK_KcO)BlCl*g)$1C0X`?7Cd5UbU8m^GF_13ZoXT4(MY<&!N8Yq\BTJ/N=-\MSYXV!]F;"a4OoMN1>d3_o%FFi=FeOb[F:6:YL\%BJ,kd/EPO3"KFQmm@fQ7k$#PS0/Le&cPkX\'VA76+=8>a@1,pdP)Z&h9bnm8P"DVDQ'+OJK;+&r%g9I`#o0tj+ibh*eR\V7$,h"m%P3M3rN'l9>'<@/Y7!r*s/doP<)E:R62-HE2?r/+((.YKIr1sJ`QLagBe;dBs*)nu1Q=HnYC\1pI23_5G-@,<9c8J]KGA+fVQ9+&Z%N0$I0SNalM0*UZhX=HJU"u7>H#L)C"'m=OF,^N#oF[nQWau.m"lC(:lX`Dmtf0hG_>\#;OMg.Khh@sV271tU#16()hZoTVq#U'&@%'Hk'aTGu%dckEYp9Yo43\S[I6'p+nU!rF0"N.N8<WYU_!4ZY0G72AR*OP#eKKtKZt&Eqal0$-eWRg?T^<JG]*7LhZb.0giM)@@*a%K[H2Sqa+=>Cr!WJ/mo[DLuP8`4r*@_RIKQ`4BF2n!J@c^=n+0c]IMVAVV`=+eV_8KJl!XcTN?ps!"fM71dnFPk6#]+iY#];KOoo6%]%fFrqZF^3L2rA@@SCernK>cQEGPE6AApT^`su#G!1A(FKft!c@h.kXNT@K$/cu0#&r(*#HjQZX(d"#`';(nq`.=o(@7*B5dnWCB%d[A6?'GBDQ5$)',E@4nkJW\-:`;Rm@/^G[Xa%=5*bVc`b!.b*,rKS?0T0Z<8:'10,R+T=X&O0p$A!p&/,9W"i\8s*%EK<0YZkc.C%nR_tdi#f<4Adch=.nL^Qjk>5t)4Sj!8%V+();$X364aD8\q0i5Kr&eGCq!jlc)+T.3">s9>j0'Gr_>T&J;$&K:nE4G[55I>2`\K:%_X.p)UBM`@XSHKK9Yhl=.?*pKBr-e.>\5IIaC&%u%lor-G9&Am'CSfK4Qa/^6lV1l*S5#jj)iq$b*=iP=[T)PZm8Q*_;drfb932`%eqWG1%:?:P?7%UmL_%QBifk19)!q2@eEQ3o7@d9>LBcn0,YROD1;P]$<fn1(>tLjTE$e@>EC/nrb,Y$.\;Vpd?RUsS9'/AG#fQ3V%VI0Eno#MlaW7W[BbDLP!r3W6,h2#"QSI$!?3%V.@.itjY:7K84,7[Y/I]!fu@APZ<L.Sbacd2U_`C1t"glXS[3$aE7AJ"811Gg$O%>b1c67h5@]:ioO`L$!"dq2m^/O_gIRC_PtGVt2\UM4P<93,=6++I6M3:JRXV[C!qp@cLrWZ[sgu0PZu3B96qL)9gWb,I3m\;.\58%n?/8U^9U>@VCkP'nT88f[bji*qT4JXJ-i!KmBpsf7JekpcTF5NF64pWR5.;]S5ueML-^'K]Q2hj0-SWlE#Ko<lKhBQ=s_1VD`UJk%en?K`SQ"6>3q)(nCrCF;-3V3Wi)i(I@D8m48UJZ:%;qUKjMN#peM<4RWOBVg.;OWNBg8kL8g/Mn_j1JT``T:>=Bh?%n_uA-/"9Pm%.\1k=;fR53m4d6\\j/Y#]+=E<LF/WJN7j<oEV0ikT+o,=9`Ajaj%4c0"q.h`R<B;0*2m[1%?]!3*EoM/'Wee?0`Z!n%$]%.G@SlY%^GKQsXu7f:?j:aAE1M8S$KD[^_/uq\R_L)h?dM)h!YP<!ejh!(H<MP-Ld]RHaHs<_$a=r_+R*Pg/=fYlP;VP$aprLPUb,^*]j^.<%[MaO8G]rE;X7rf)XWl\[puHU2Ne%/Y;Oe9CV5[rRh06jm;rjMf0?b;Ck7;\4!1Pd_L)--h">'(5\i)AYcdNZ:#Q8V8&q>Mm2`Z#_%D6?4,puP8R8+)e.^X.Z[RS12S3I8h%.(k3LXN`5DIM9l*ni7s0!"Q&;JBoBHXD"k&bHNB-AILeD7u4q]KLIR9/<%Q>5k5ps5=(9S%fS<6?`dU=Y!=Y/I/.moAC%&o7#:i.c[5UIX%ir)V0=*=GimS\6P"YlZR&T#lN[/%r?Woo_#SRl9>REI>Pb\/!PUmaX:BBH,j\T,Y%H"-_W&,o=3fg8FCUC/#3q(<jSK\of?dS`L&'!Q$NRmb2l#0qknc1*0<'_1><5)o`!Xb1JZn2t`5i$lPh<]b=J]+bgKj1.0c#$)Vo%86D\m6rX]4`:OQW4Qjl7'l(9,394IuiBUur:LZq9)?C(+nHo$RKNJ_;NJE]A8>A+%-7+4LMMp>)KuB1b<[c#D"\`)>%KU[0bU_&F%pks[$*-Quj]+CTbh%F)^#GUQ+MOBGs4<hoj_)VPWEWm;)D@tR!QkJofq3!e4pe?]D7l<h,VXeh('Z4<,#=OFS^`+&n&J'.3JYYRf%U;Mke)(`sF#f\l9R&DH)h/uk3eql2]&ck?SY.YGkglm8-l71-a_-'1sje)^>aM]7HkR,]_XA&HD(9I:j:aNE$:0['225^Uh(kHa;%;oZ_.YSE_^0I6l&\3?]VD;Z]gGdHnp8`WFZQK'[&k/UO:`rn"_JM&]-2A!h&5YI@J*Z\.rN[2R=0]m=@=<'rphH9YXn=mLL9lQAH%Ylp<07;aQQ+oK%eSHL3J/Hh/+f.N)*jpYY%6inQ%4P^=YX+EXuD01f26?G-3c;Amm*LIPa9u(s60I`0$9J2LP&"mp0M)YYZ'.3f&%0l.N$*;h.\*CT!7->&3pq&oAVf&:QdU1;aa>:D*4D*,.6Y+.r74+no'0$#"l/'*pqN'f3EbQ^8g`!`/Wl!WW:F<usmF3RWQ4r4Sn%PW=\(ThaD%9U%nic'O\>0#\ANrGo&4JWa,S<eU:jHWMcJJB0TX80ZSPFU0qD>TJ[#MsZu=[K5?(7ccinM"PuOO6)0iAZ!6rN:U"7%:gI#u"j?Gh[c4o%,UA/M*6JYnpnr$ui6t_aq[@Q@@:+FI0VT%89d'f2%&@!;nRgnO*p`5"7-,gs=-rX-orqgo!R-Z2_c[H3=5u<S%#NuJrNH6Q\3@dZ3MXLocLNKLG="auu`1GD;6Cm*!lQSH*MM$Ini=YpMe]O"0(KjOo0(N_;a6nC!Uasi.d(Ud!Oo;n"-?unhIJ%J/%nIQ=3bqIBD``bK6W]d%3%-+9Ha(-dmJ9a[(;k:`a-p*ailkJUGV_nndmWt3O5oCp\H/%W-$>?bRi!,>9,t4LP;n3DNB3YYl5WVdQ%OQ3eM@uIE\F?ND%q'Tnua,6ar;ZACj?D3_PYd&bS![8Wn,?;Ar?0R&M+NP[s,dMPr(+^#(cDD$YjiB#E/3Y0aP"8'+h,g\AVX2#.%a21,54AdF!Qh)g\GIE6JjF&j;/S/=ZX9W^cGkNEl5oemO5s-0LC\<BX)D=su^/Q3c1o29D?^)IXLk>RB)+58Om^.!gI\q,6L7'eo%.0R%*+<"AofQT=^_h,F^?"NbqR$W?I6keqlb#W!p&d'<'T,O(LCrif&B4'ZL+KW_?aO<TR^;MIkmu+N#D4$1!aMC3bJ&k+;N(*G%%6V-oU)j80mfJ$>u2JlPIG4ln$1)c^<^lKa,OToF<Q=M\G/'OKN_W*9*mjtn86TWo3;jcnT?eXj>K!=,[#N7fsoYl/_k_mb=#Lhk*%K/nX(!KgVUQn);(:l_=]Z,>(Rn/S9?@mH9@6\T-kPpT>G1gn6\iu*ZKcUh<IJa!F=UbD>9Wuo6b+Hb/dZho?`#p'np01=6Cb(=V]%3YmXiHDG:L,ao%[lhQC_p189"P\4PWX,,'>^2u:0(RZX54hC3(OI/u\3!%>\5g3ArLnSF+(uMnE&;RJU%T.;l,S2cP5#LJ6!NV?Q%ZGoJdXtFJlY71^H199DbI[%1uO9.sHY,Q9]_f38^PWUi88*??@P?'XN8&s&J$Ad4Xi&I)K6Qf_*j/RsKZDo/u,E`0Yaet;0*k]X[%E0Y)-Cf[@h[$B8--"]'p0O]Frf^'$a;!(o(%\I`/C&5:hRdOU(ZVT&meknoT3C`Ru\!1YuGjOCL-0S.2%8X?TIP':&18QnPEV^X;%>*uVBm"s_hFG-]A;PkICW#Vq3"T4"V"c+HH,),*PpJRA35&*>.B,Zng0aA'j&fU-f-)-?CiZpCD?ZB).p)".B,I,MTL`M:09#$6+%&".JY!7u<XdA9bo>L$bS8jRF7Ub4NbY(/kT^uLl%kfK&6O0p(re;!5/J[B@bAU^+?B#)sF4GeYQ/30f+VT<>]&2q<S2?`!_L.,8k%Je"mS]nn%4g!_CUd,tR$3SVM3eI\BLT=1O4JKpRQMCUb4%N-DkgrbuYBhoU-TY1[Pa6\ThTL:+\&EQHi`BUC<CA3BdnB8I4O)iX)%PZ!WP;$Oq'Vm(JTVg4X:"!%jm8g'G4M&I7Q*=?3YY,U,%\'frgArm;W%3bsf0Wd:)=tmmNLH=9tNg57c=ZVaUpdcTj,W0ZdJI>_p%a60$j>0,;9ELeO,lY.XbaTY6Zq>j3Y<XSGPgn!.Q3"u3X-hFS+9D""_VXa#c6s#1S2'IpS3#h$87QSh`?aU"X6e2+dP%p/:i&6?\%S4X!;k_"GH!9(D,@CD'<6OOdMPPR"hXUJgI$VkQ+.Ae,q')*UcJb[bsmHs(hE96%i`agBN_mZSo<f6@YhnH6N.W<-l8fMG"LaST1%LF'FOOA6:_eD\>^auF0.AA,$0Yp9X[)M#[OP4TAXN??_mF;;5<Oeb=#_"=G,UkU!8>uteULbaG30G^&d_M!r(d7;+ur*lC_,N@)I%5jWFOLg[^q_3:c]ogY^#*G^j*gbdJ(Kpe#FqhQBcaW&P1!O)l83tQI@IhX%%rO:eKPu=n5d97gE^dneFVD+i@8_?Uu>nSFro.;9(%q>,).%(8uh"pguT!eK9?c7fs/8OP!ep#1T's2mFXhRJ^7$NG_W&,jJ_/.epdA/33Y52"5!0S#?Y2N,4q1?>n'0d>9iNRf'IqsZ`2%(7VGWGiVO2"?T`0>.SISaa1KtFmhKV#Wi8#da8\QV8M_7CTrEVXf[tWJsuju;<9;'@NM3]9+jcoSP`MIQu@"Gf5UPZ8No&3-*<n!%TLZg4eLXW5HlmO4N=\Y-I'5H&GK"r-".?JZ0QZUfaPK_</ZQD+EL<H%=mDrNJu0n$hg,><E_RpITE7/:dYA?[>0L^]j5<TC]'![@%bJ=CU!6sG:;O!$ELq$F6.1=f10u13N%1/741b2jho0J3BZY8?'hl3=`B]?>@o3Ar&4t\:[pd!U"qi@%4E;+YL.HT(pO=M`jJX7c[%hMBC9)E5qK"2`7E[d-j2Q$d%AlWi*aV&Mi[;0/ee:FrOMW!^b.US69`fo*@GKLCid/WX)A;7%Ge2,r9sB7N,US8_6EAFCG&d8.(Z%p)0A/QI-e&,85N=m67$@`?IgqkRI=GOcF@_<Kp[i5u,,2aYtnnM&];<*2+2jBcaRN=JDOMO3DDKe@26LA0VG/Zm_9<rr9Y,P\Tsr%@auTp0pi$l'Ss@5mZSghk*@rVATRKhKIFgf(s4IF)>>";"*A_E3WlY;+a5e3,XZb_;kqgRhO+-fld_QbHrBrJ+<nOL@K7al&r/uG%mMZ/8gu,-;km5MKArU_;LLG!2fbXF?6FJA9U6i<]R*_"R/#u67J5ZSA.nlUJ;%QJ]pq6Ee81LDKGoTO9&Ggbr5#T!N"n\N\iD5bS%VCH,O8YHAiq5cn]X_fJPhm=fUV#@_f@HZ+5id,*Lr/&!<a0[;J@J0"_#O#RWWe'cM47uu/'V+>sS6j?[7!>`EFrj+3JF>$o16&HW%Q,Op\g8YVoaYG&l:s\U5h(n9P-2=[pJlP7Z44<7&W6K:Wc\A/]Z-j(.>_JkAV9Dt9'*-Po[&gMtaU\G`)?NhZ=moh:/sn>&#>1@c%=4LCd&0Mls'+Hm>ngXJ8OVYI`]mRHXpAWsmn!BIBc#9d=J,&d:hqVPPqf)5uDP+N'IK-t2?gTL-">Z9gGTe><eaE9#<N^XsPIE!?%?h@a]cp'/>hi,DU?Aj*^0YULpWO?-nr^+em%NEG1g7Rm*jHIO&.l>l$)\@KP?gaN!H2cgsm]ShpmQQ$pG^4YNs%Acg^[Ifph5@mB%>oc,b^:S^#s,6!b:O9D2^Uq(irnGW.gCO=p>dFCleVe?M;uHXP52G)j:VYnDJ$o==`OeoaYMQqe[_>lck9'0\YHQe&+!NnVr3ne1%gAf@.#E@R>gr<+EaoB,_.4m?qfS9QiE+oacnn#2/@%(pN8@7=C0_LV\*RPTO561_XMNkaT)dXfa:9nYo1l=;Zm>8m"+sIBX((WVR%UiUJq_'YBJ'hLis-A`42Of9ha$#1QKF254X*HLj'LT_Z*rK+BY?&1P._u#-Y6'h3Xo@gKCHh*i#'F%`%6I6,]k`.m75=(?>/5S*4%ig2N9J#]K_1h<@X=%.[><[g3U^*D541/u@feYlJoc%*7.+pqFmZ#XjNcS[DA*L2<m):[YBDeRlkCj_LX2?MRmY-iK4dq\s/ec\n%%Js^2.A<`D$JOH-W&tO7>O\P">.6te($_^!8>:t:17Gn;1Htr+!_5,)iX7^.NH\Pp+CG(iSPPNKp[h:6[M)[agLcfA\'c.Mqp3pMo%D+1-"S4*Fc=>*9VU9DBgD??fA(hrZI(E2;%U:)Dkm(dVd%=fYXle%WqRCZo(&T^8GQCa)>U\\"eT,brDNhi'AcgtLm`(YA(G/]Q7%EtJ&Ir6k:L.QSY;j&HoYQ.Ta\kk8R4eu&]u%4YM7n-R%WTrK]&LX]S"9@dZ7]Ud.6WNhedN*_t\`S"H'Zp\mS2UT82O\^.f#>Qt&%h;iBQ1-r7$k86;pdPa#lBbuX.CkU^HD7XGe.,sa]]N<D2a`6\nD^LgjBj-Kk*+4C,>=:on&Y-7+5.O:Y$csCam04sNh[e+o-5\$;%-]FK59/9GUY%t=@F[`I4qQ5eJe=B5C7kZL6HU;#9r54bn"a$=#+Aak%^aU"o66HLL7is^WlZ*\@^_^@Pb/emB$4%@NITQlU\=RkR%bFTFdAZG$MEa%^9CKeR6`?-.(68_'?+TE!;1D<0A'm;6i'#%Ln'%@:JVJI+LH6[QolPA4+!P1uF&YRpM$,qk<G'ut)'t[pll:qcQ%SiT?M)F1,e!2,9o+*Ini0[="mOlcB"+5afG^A>*'@VN*D#IR*5eOF=k>IN7c1OSIcXK%r42<])tnT0Ei2.Cfl]`.^Y^&Qo#rR/"+%BuI=@joF+N!J;O_UUE"^["&,h%YE>39C3]%]j.DkOWAstYf,+0Qo\^k4@C>%l2-GDS:2MgQA9;cHtj-c$Nd/aeorl:Lb(rsrCf)(%%3GN^BIIGQ,felQRj2#s:\G8sr%SBDOt<bP;XfcL3*Loqg"/[k;\q:-l^`>p%@oH?d6$h%e_s%Q@;]^Y4`$q>Rm=;(>@ocU=uK1)%Csm@m6fl+-;@t\CXS)J;4cC0B*<Y<kbdZ<skIQlL_N,IY#Va]Hf"Bpe-f1^oqt'RZC'UG44u&4e%>8ogHY!eT&b5M<qET4:[Ynh6%(`jrpY=mA)^GI&&KpI.UPCOp)nG/)h]ClfBoAafRZ:9G/.43=u@B!(27.\@i&;gJA7$+e-*k#Yo!!#K"cWB:h!KIS]LDsH2C;ItN%G=)AcK*gElkTq:l?WX2l:rskF#jIY21&"5Zl7#Hr>lk?3C3OQBbo;#s/A4o>E`=Z1;-e4Aj46!_BOSqpS%+0+@Pf2dH/EBDP-Yq\%lmnBK/%Cp=PbYbYHfJjB3eYepA)g"U'2&J[%_JK1R/FK:O-hYHC*=Et^MaMpAD8:rHtb/I224X%!%S4098QmLU`[&)4O3Il80(#:%qXFHteoM8CWG8M]l%p*kho']G39WNqZLW,+TfeHJ?*qd\[Z]sk([V_I!1OEAW:PLIT&ceQqFf]+GTsu-bh_j9D<sP,d93SPq"*4\%I)j6=6k[#Z"XkJsciiHajDDWSF'4kiBoJ@iAM4&tGqHkoF0l@XT^frieadM1=ptF+X4P'KU,=uiB.pn]a`Sq&k?U@=,Hq>ud^ec<%c:fcf'M"UB?`2Z8pG2,RM>RhjAsCWXN*RAu<[NWR)[dU\3+:"-YT^fs22uT@'CQ4s$"[53&Nf:`3MHJW)sU(n_t[&bdfO)oNWV6J%#]HoG@#0*or%R8QCDgBWjh;(+1/H>E+/K)9_;P]MR0^7u3#kp3[r?^Rm<<S?M-b_Qlt@9lF:*Ju[W-f0#o-r9NH=r&?bM"n*k`d,%[N,12QG*on^=2Uaft(q[H)_raH?;/ikt_*)E:Qs)UY<l7']L\^s"#DV5HhVIEbiR9h4^;&>-&\:kts)R#Q3nY2inM11^*[>@/eA_%JFO561Fg)FH'n`:P8e=soLs;LTrE+aW4@P&_VV#*,kas5TahO/#/LIS=cu(Fr)DMSg.*SC.H,Hrh9A9d2cM."qN88$hL309kM=27%5<P*(gZ7*mV"Ql3D,jLWJu2"&Wg&40<1,T0##f#.hF/1s)(t_<'%9E45T`W%+s@=BP&0G7oPpX7DK3Yp-iu3'1u,g,Oq6%aB7J!*%DjYEW3jl29Mp#p@\U^o8%hlf7iuL(E@(=ioLC3!mH`>r%h5Zhub<d7ES=(9&&<T;TRTF9@>4b?3T^ErH?QM@\r*G;f!]\)LVkl^r%3-AD#h8F,MYi'8GS'7Wb)9kjK8-(bRRReo^."-#<k8\ki;74)VY,<%-2''k%g=WN;_5Clq;k4b!nBBIR");`7G_3N#""#>s$VMcZ%MA(pgSR9g?'9\Q,<u6!5jL'-O%p"*!_s=Z>40t0_3iW_'&@JNJ4YkD_XC0W=glQ&WL1_`j*JI7jSm!_Kng1:I8g%qCKHWgCOHq6A%;I+RDN%`3fEk."LBH,_e:+W2t.J>+[S`Hba]o$VrXMAIiC_bG=)])H[_7H,l3b\`iKof"48['Ai87_@d#d3HSJMJBX/g)aE;spVu%a<[KK#$q<E)C<tW]FI[m_SqGe9'77:D/'l5I1Xd>MVLU9`-lP^M([:`ekZT2>11tG?FfjFXj(o[Q73rQ%Re)^_XG=f$3^LR1VIM+%q"h6t%0neZNFd'?W\7RnV$(MNC4VZ;T:G(')E4%3T]dNRT3H7t2r+f);H>.i,V0929\!'/9Q#nBedI1VF.bKpie'I>CU<*Hd1WVL%?[!kU.$:_n@\^6&U!_+">H"c_]+^fHA`N<\l1X?GP+9S=FO7Pn16_7851ZaP%T:1MDOb9L/;%N,'JZN`A6d<W73pW7`gGm]Ku'XG%;7Qduq_=6[1)O"i)Sa>G/-rBbnOtW-_<7dYh;DT(`DT6Sa4N:5^@&+umUu,8kGSccN`jY\+?T^h7$NoKKFE#RCO)Y;K$9EM7;7Ba%V5I+.ch-m]LZZacPoXdFPlnX(,:BAFG<`^me:[5uBK8n'MU1l+Nic'-.T#RJJ:`Gc5-YMC%Q`r7[\1oSV'Y&^43Jn;`+V':%;.,>%*tW3s+]Cc1]m)&hJ-8VR6NhJ*f4MB/<]cdA1ZucHU(g6ZS60eVW8H6beLSR6f1oHO9HUY&8\c(&,?Z;^Bl=+.P5QTWO^fq#R\>]a%[lENi2?o$&H6]k:+[tRt;rQ%^[^`:M`^'6U?Q[UP9<_+6C5Ek0_ersWAt(d:8W5F+IV5kYe]3s:oU0fef4\BSU_GXmqPIsHJ+U76%<8a`OC:nLl_5iK%;Be_Bd"m0)g)ol8,bq9geGW`7X#tX4s&Xu@T5*_j`F2CNZEn92:l;a#QI!iWDq<:X:%XE-N//(%a(i$3BC#YX%r6keW=AOr&NB.@P.^HE9,9]5B>"m$i$PD8D4FPB/n9,uHRB4*7.Z@Pm[+],3cGm95QFi(/kZ(Jt)V8ZmCg./J_HPtXkX'ks99b>P%\mpo$KV"YqUfdbGo/5dm1V,f@7=nr,"T#2^2S4\%Ickesi'?>F1kTT,O49EKk.Q(*;W?>*6A:tASXe,2k8bUCA1(CIRBe*+'^oY=%<R=WI)1eC$!8"j6*qgICKmdI\1KJHoWJ82'a:c%H<.ip/Ub]m%.[E@_';[^QT.!Enk+Qb:_OX="#ROmJ1.4X!FaWCb="6U$MY)(^%]FTFH?BWk*I7,LgLORs5&Ted%ct/M)!iQVW_[mLrJi)bKX9T!Fb!6ulO!;LQ,j@A:W%'ib*gSN2LTH#N63i^+QK$qkR7P]\UcsSO%6(UG3\;Mq4dQU1oQ5"KQ4K#,>iAc#2IXIb&jT4ak@bVm9ltQErJ7uJ'?4ZG+-.S`l5SC@.>&s!rKRZe7b4K0dMqIJF\pk2E$>mhH%MMe>N5Vkq0ibY\Yir<A8GlR`ugHT#Z`@Lo`JP00-\lA^:4OLOGC[hLMEr8r1`V%Un5gqtOT_P^YZ^#`ub0/3=(TN-mc2cT@i_O;2%T<-#$,hV&Tr#0PRD#_Ok^s?le0<YHGRF`r7/to&CBl%6_-MB3FP%s*!1'%E]/IAd[E@G&k(mr;Q=EPB1@F"#^3WNC<"%&1>6G0?$%fU7I"l&)nMS]K;=HqK$l/4oHeP/sA2m"2'F%!??jXpO3jVfDh\`E2S_X%'ITL7]Rln&YQp!II+DDrJ+c=KO0DRF/,L_R;'CZhqt/%@T,*m0L](ei/p@,;)D`'O^0\eK.eIY5]BjF/^Xr/8I:N<`<i=pC=HXYpP'SQ?I8LHW/PH'RicU,NHeX7J`O@Ie=VaKT>>eFq1I*!%#a+8[h]6QC?@mo6<&u/AKoK&C##ESNIm"AZq5r=m"e7gl5*I@H/=gNp<@GrGZ%H(c;$A3L1D5IfSW<mbKtH!Cf:gif=t-/rA%:@f%1<V)FU#ujD,#)WS4?7_dLZA"E3*VB$i5n:W:;@S)gX$Z%4%Dg<0"@GQjZ'FneMe_[>KN8^lV+6N4W]O:'GZK,5rtF%`6(>"R*b(I%0@@/4g=%%R%+`ps4jh&S+'=CJUVnP3_9%kR&r0DgVTfg6^rh&9;05d!W1D2lcUY_'KF#CV"qn3`RG\OQWlEOK1^RR>q&Be,D\BdL%<0[HbSO`5b_PJq4l'/9;[*$9\Wf#?jA"!FZ[.K=./=5KjorPB08HF%BRMHE&L2AK$OI`(_)7Hu0b$liu_%e[5=:p#jg71jFUp"eD%_B#f=G/+m8&NK![1kJu&7M_K11G/W=nJ`^FVDaD]aMG!\:jEDN.T1Ep>bqtl;o%s7R:mj7kS.blmsu^--TsE4`YK3.^%"i*mSoE:%jIRdK*L_/+R^mT9Jo:'9;=?1BQ\a?_P9pU#%N?_ZfXaiC7F]+F->G4:>*BaJ@&NC]3dS4gfmITlB+iDCM@%]F..[IMSOi*8>0sgZ%"\iM]E9#%Ig?p)Mo9ZCt;TFe-_G!6^5;muUZ53G\&X[4+A?$sC%)J_LD'Llm?CA7I6!gbb@(:4>8'j'.3@TmBlJsacM%D8"^"gqR%,hUs2N0B(,Tc#?%?n4rGB6Y`j0N6;thBsX.^gXCZAi:==JECmli80_[8"%8A&Ck18.c?(.7PSlq%.^j4i$<_R^s/'g'_Le/r\bV9%IQkIeE2V-h[91um2Q3,/f]pT:SM/-*e^@b,cWNK*&JG#n@`u&[%S[I5kKVRW+:c=;'Ta[</To8I*g8DaHI%25C:#E<QV]r*@I$O4%Z*nrNfAN5*A%>XlC#Wh96\VKua-bA,V>.bRYi9W&b;(%.ef""9"k`>^dEcd^V?E8QUgn<7:TB=c7%?+]Yp3"=UZWHV,gUIF?=gHf%LGIH=LS_>PpbVME!ATS1W0c(.6`1-PW7X3%Dl>pT!\]a4X[)BiZn6j0Ss?Ps#:$sHmK;K4EKuI$24,,[Hf^e$l$V7\OF8(&nFe!G%0XSMnmt:ZboP,&0ZRibC]SeS%,nsX-fjm]MdM\Lc?@_hAdFIRRd8\B>*g<'<NrGJQG&VR[/kocRL7P)<6BjdX;U\o>(.B!s96QUa%_#T1XpuOBG?L8fd(cj%1Tb#?-\MFC@U]u@)7;#A+/0nthce>"PO[B7p;c=BsG>e.q#*T?5,\nRu@mW#$[R$KQ#'7!0R"B(S55^Zi%RgKSIo:$siO>&spnbg1('VJ.6DT\ZKWpCg*5>qXa$L=BS;KLLeN'ngZ?e7@uK-lEFOB>Ur'ctbB<;1PVMrI#O&+P&`s30d5[L&$E%-'#Qm[Q`cP+bMISl7ufs91<)SHR4Xg[e4)cK'ZA+`uJGRco?\'+XO"a['K7;4]?F_O@Q4"LS1)DXrlk^WLMm%22-1KAl>[47*Wjl%3t-ZWQd*PO7<&3!@piBFDcYl\XNqo=rf/W'^1kmDb.-F#_;]3^3oV]UCis>s+KEaM.<<635bL:ahdRp<_#Y2;4LLs-jLhL:'X12?%Jh[APB7BRh8&SomUd\kM&Ir]&_)T8AG*129m\3A9ruhD`IR_3WaV`<S._h4;)BjO\Yq[&AS5m-1`6RL+8C#l'aPe<&WT=p;itaQc%i1?]ppECs]mNrUI&38-E!l7P)BU,4sNif!2q5fep8IfegodgaP9?CXXKsY)f?*g#K2Xq8uQ)VreT>ds=7hT?1jh.;l\hf0)5Qi`>%n`%C2#D&((hm%,^!%Kq)PLg8'A">b;8.eK:K7Q.cmj_%1V3RLI^]8X/&(&hmMMC_Lhm9b&"4*nam6ITmp^MEMBQPtlFoeDdh&uPY%#3E4e`@:Oe#]&]5i&*U23F>njnjLd','6;OX#G>4"g"LnX_Ubr==9B+,+^:RRr_@<)De'WR2mS5]=GY\=8dEcFNfTcGi+8V'p2Si%>kF"%43u#G#VKF]2,fT/Mg:YRP%2(o_BBG-IK(O6k>2'@oul0t(Z1N;^\RZmp#Z/&mD['4fsAH.I"1hdgWL,Z=1>g95?rZOg0]=,%q!%5;mck>+?hWr,YC="YFF1FqiVQE#P%D2"IJhd)hgG1Qh1#Gc`8%d~>%AI9_PrivateDataEnd